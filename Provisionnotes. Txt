
Below is a deep dive into every single statement in each function of the “One-Click Provisioning” script. I’ll show you the function code followed immediately by line-by-line commentary.


---

1. startProvisioning()

function startProvisioning() {
  createList("MyList", function () {
    defineField("CustomField1", "Text", function () {
      defineField("CustomField2", "Number", function () {
        createContentType("MyCT", function () {
          addFieldToCT("MyCT", "CustomField1", function () {
            addFieldToCT("MyCT", "CustomField2", function () {
              attachCT("MyList", "MyCT", function () {
                ensureGroup("MyGroup", function () {
                  assignPerm("MyList", "MyGroup", SP.RoleType.contributor, function () {
                    document.getElementById("status").innerText = "✅ All done!";
                  });
                });
              });
            });
          });
        });
      });
    });
  });
}

1. function startProvisioning() { … }
Declares the entry-point function you call when the user clicks “Provision All.”


2. createList("MyList", function () { … });
Kicks off the chain by creating a list named “MyList.” Once that completes (or is skipped if it already exists), it runs the anonymous callback.


3. defineField("CustomField1", "Text", function () { … });
Inside the callback: defines a site column called “CustomField1” of type Text, then proceeds when done.


4. defineField("CustomField2", "Number", function () { … });
Defines a second column “CustomField2” as a Number field.


5. createContentType("MyCT", function () { … });
Creates a content type “MyCT,” then continues in its callback.


6. addFieldToCT("MyCT", "CustomField1", function () { … });
Adds the previously created site column “CustomField1” into the CT.


7. addFieldToCT("MyCT", "CustomField2", function () { … });
Adds “CustomField2” into the same CT.


8. attachCT("MyList", "MyCT", function () { … });
Turns on content-type support on the list and attaches “MyCT” to it.


9. ensureGroup("MyGroup", function () { … });
Checks for (or creates) a SharePoint group called “MyGroup.”


10. assignPerm("MyList", "MyGroup", SP.RoleType.contributor, function () { … });
Grants Contribute rights on “MyList” to “MyGroup.”


11. document.getElementById("status").innerText = "✅ All done!";
Finally updates the page’s status message when everything is complete.




---

2. createList(title, cb)

function createList(title, cb) {
  var ctx = SP.ClientContext.get_current(),
      web = ctx.get_web(),
      info = new SP.ListCreationInformation();
  info.set_title(title);
  info.set_templateType(SP.ListTemplateType.genericList);
  web.get_lists().add(info);
  ctx.executeQueryAsync(
    function() { console.log("List created"); cb(); },
    function(s,e) { console.log("List exists? " + e.get_message()); cb(); }
  );
}

1. var ctx = SP.ClientContext.get_current(),
Retrieves the JSOM context for the current SharePoint site.


2. web = ctx.get_web(),
Gets the SP.Web object representing that site.


3. info = new SP.ListCreationInformation();
Creates a metadata container for our new list.


4. info.set_title(title);
Sets the display name of the list to the passed-in title.


5. info.set_templateType(SP.ListTemplateType.genericList);
Chooses a “generic List” template (standard custom list).


6. web.get_lists().add(info);
Enqueues a request to add the list to the site’s collection of lists.


7. ctx.executeQueryAsync(success, failure);
Sends all queued changes to the server:

On success: logs “List created” and invokes cb().

On failure: logs the error message (commonly “already exists”) then still calls cb(), so the chain continues regardless.





---

3. defineField(internalName, type, cb)

function defineField(internalName, type, cb) {
  var ctx    = SP.ClientContext.get_current(),
      web    = ctx.get_web(),
      fields = web.get_fields(),
      id     = SP.Guid.newGuid().toString(),
      xml    = `<Field ID="{${id}}" Name="${internalName}" DisplayName="${internalName}" Type="${type}" Group="CustomColumns" />`;
  fields.addFieldAsXml(xml, true, SP.AddFieldOptions.defaultValue);
  ctx.executeQueryAsync(
    function() { console.log("Field defined: " + internalName); cb(); },
    function(s,e) { console.log("Field exists? " + e.get_message()); cb(); }
  );
}

1. fields = web.get_fields(),
Grabs the site’s collection of fields (site columns).


2. id = SP.Guid.newGuid().toString(),
Generates a new GUID—needed for a unique internal field ID.


3. xml = <Field … />;
Builds the XML schema for the new field:

ID – unique identifier

Name & DisplayName – internal and visible names

Type – e.g., Text/Number

Group – UI grouping in the Site Columns gallery



4. fields.addFieldAsXml(xml, true, SP.AddFieldOptions.defaultValue);
Queues up the creation of this new site column.


5. ctx.executeQueryAsync(success, failure);
Executes:

On success: logs “Field defined” and calls cb().

On failure: logs “Field exists?” then still calls cb().





---

4. createContentType(name, cb)

function createContentType(name, cb) {
  var ctx = SP.ClientContext.get_current(),
      web = ctx.get_web(),
      cts = web.get_contentTypes(),
      info = new SP.ContentTypeCreationInformation();
  info.set_name(name);
  info.set_description("Custom CT");
  info.set_group("CustomCTs");
  info.set_parentContentType(cts.get_item(0)); // inherit from “Item”
  cts.add(info);
  ctx.executeQueryAsync(
    function() { console.log("CT created: " + name); cb(); },
    function(s,e) { console.log("CT exists? " + e.get_message()); cb(); }
  );
}

1. cts = web.get_contentTypes(),
Gets the collection of site-level content types.


2. info = new SP.ContentTypeCreationInformation();
Prepares a new CT definition.


3. info.set_name(name);
Names the CT.


4. info.set_parentContentType(cts.get_item(0));
Points to the built-in “Item” content type (ID 0) as the base.


5. cts.add(info);
Queues up CT creation.


6. ctx.executeQueryAsync(success, failure);
On success/fail logs and always calls cb().




---

5. addFieldToCT(ctName, fldName, cb)

function addFieldToCT(ctName, fldName, cb) {
  var ctx    = SP.ClientContext.get_current(),
      web    = ctx.get_web(),
      cts    = web.get_contentTypes(),
      fields = web.get_fields(),
      ct     = cts.getByName(ctName),
      fld    = fields.getByInternalNameOrTitle(fldName);
  ctx.load(ct); ctx.load(fld);
  ctx.executeQueryAsync(function() {
    var link = new SP.FieldLinkCreationInformation();
    link.set_field(fld);
    ct.get_fieldLinks().add(link);
    ct.update(true);
    ctx.executeQueryAsync(
      function() { console.log(`Field ${fldName} added to ${ctName}`); cb(); },
      function(s,e) { console.log("Link error: " + e.get_message()); cb(); }
    );
  }, function(s,e) {
    console.log("Load CT/Field error: " + e.get_message()); cb();
  });
}

1. ct = cts.getByName(ctName), fld = fields.getByInternalNameOrTitle(fldName);
References the CT and field objects by name.


2. ctx.load(ct); ctx.load(fld);
Tells JSOM to fetch their data before we use them.


3. First executeQueryAsync

Success callback:
a. Creates a FieldLinkCreationInformation() object.
b. .set_field(fld) points the link to our site column.
c. .get_fieldLinks().add(link) attaches it to the CT.
d. ct.update(true) saves the CT (and propagates to any lists).
e. Then another executeQueryAsync to commit that link.

Failure callback: logs load error, then calls cb().





---

6. attachCT(listTitle, ctName, cb)

function attachCT(listTitle, ctName, cb) {
  var ctx  = SP.ClientContext.get_current(),
      web  = ctx.get_web(),
      list = web.get_lists().getByTitle(listTitle),
      ct   = web.get_contentTypes().getByName(ctName);
  list.set_contentTypesEnabled(true);
  list.get_contentTypes().addExistingContentType(ct);
  ctx.executeQueryAsync(
    function() { console.log("CT attached to list"); cb(); },
    function(s,e) { console.log("Attach error: " + e.get_message()); cb(); }
  );
}

1. list.set_contentTypesEnabled(true);
Turns on the UI to support multiple content types on that list.


2. list.get_contentTypes().addExistingContentType(ct);
Queues adding our CT to the list’s CT collection.


3. executeQueryAsync commits these changes.




---

7. ensureGroup(name, cb) & createGroup(name, cb)

function ensureGroup(name, cb) {
  var ctx    = SP.ClientContext.get_current(),
      web    = ctx.get_web(),
      groups = web.get_siteGroups(),
      grp    = groups.getByName(name);
  ctx.load(grp);
  ctx.executeQueryAsync(
    function() { console.log("Group exists"); cb(); },
    function() { createGroup(name, cb); }
  );
}
function createGroup(name, cb) {
  var ctx  = SP.ClientContext.get_current(),
      web  = ctx.get_web(),
      info = new SP.GroupCreationInformation();
  info.set_title(name);
  web.get_siteGroups().add(info);
  ctx.executeQueryAsync(
    function() { console.log("Group created"); cb(); },
    function(s,e) { console.log("Group error: " + e.get_message()); cb(); }
  );
}

ensureGroup

1. Tries to load an existing group by name.


2. On success: logs existence, calls cb().


3. On failure: calls createGroup().



createGroup

1. Prepares a new GroupCreationInformation() with the title.


2. Adds it to the site’s group collection.


3. Executes and then calls cb().





---

8. assignPerm(listTitle, grpName, role, cb)

function assignPerm(listTitle, grpName, role, cb) {
  var ctx = SP.ClientContext.get_current(),
      web = ctx.get_web(),
      list = web.get_lists().getByTitle(listTitle),
      grp  = web.get_siteGroups().getByName(grpName),
      rd   = web.get_roleDefinitions().getByType(role),
      col  = SP.RoleDefinitionBindingCollection.newObject(ctx);
  col.add(rd);
  list.breakRoleInheritance(false);
  list.get_roleAssignments().add(grp, col);
  ctx.executeQueryAsync(
    function() { console.log("Permission granted"); cb(); },
    function(s,e) { console.log("Perm error: " + e.get_message()); cb(); }
  );
}

1. grp = …getByName(grpName)
Finds the group to grant rights to.


2. rd = …getByType(role)
Fetches the built-in Role Definition (e.g. Contributor).


3. col = SP.RoleDefinitionBindingCollection.newObject(ctx); col.add(rd);
Builds a collection of Role Definitions (we add our one).


4. list.breakRoleInheritance(false);
Copies existing permissions from the parent and stops inheriting.


5. list.get_roleAssignments().add(grp, col);
Assigns the new role bindings to our group on the list.


6. executeQueryAsync completes the change.




---

Putting It All Together

Each step queues operations against the SharePoint server.

executeQueryAsync actually runs those operations.

Callbacks ensure you only move to the next step once the previous one succeeded or reported “already exists.”

You now have a fully-automated, one-click provisioning routine.


Feel free to ask any follow-up on specific lines or behaviors!

