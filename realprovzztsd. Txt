<!DOCTYPE html>
<html>
<head>
    <title>Create SharePoint List/Library/Survey</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
</head>
<body class="bg-light">
    <div class="border border-2 border-success">
        <div class="container">
            <div>
                <h2 class="text-success mb-2">List Provisioning &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    <button type="button" class="btn btn-success rounded-pill" data-bs-toggle="modal" data-bs-target="#exampleModalCenter">
                        Workflow
                    </button>&nbsp;&nbsp;&nbsp;
                    <a class="btn btn-success rounded-pill text-white" href="https://my-apps.dev.echonet/teams/INTERNTRATINING/kishore/REST_API_Assets/List_provision"> Code</a>&nbsp;
                    &nbsp;&nbsp;&nbsp;
                    <a class="btn btn-success rounded-pill text-white" href="https://bnpparibas-my.sharepoint.com/:w:/p/kishore_srinivasan_asia/EYOFQ0pTvN5LsQrf_mG24y0BTXzVYNvxpVH65Q74Z2A110?email=kishore.srinivasan%40asia.bnpparibas.com&e=BrgKKX">
                        About!</a>&nbsp;
                    &nbsp;&nbsp;&nbsp;
                    <a class="btn btn-success rounded-pill text-white" href="https://my-apps.dev.echonet/teams/INTERNTRAINING/kishore/SitePages/Create_Subsite.aspx"> Subsite </a>&nbsp;
                    &nbsp;&nbsp;&nbsp;
                </h2>

                <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLongTitle">Workflow</h5>
                                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <ol>
                                    <li><b>Provision with a click</b></li>
                                    <li>Creating List</li>
                                    <li>Define fields</li>
                                    <li>Creating a ContentType</li>
                                    <li>Adding fields to ContentType</li>
                                    <li>Attaching ContentType to list</li>
                                    <li>Group existence check</li>
                                    <li>Create Group</li>
                                    <li>Assign permissions</li>
                                    <li>Making a field un-required</li>
                                    <li>Adding items to list (Example)</li>
                                </ol>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>

                <button onclick="ProvisionAllLists()" type="button" id="createBtn" class="btn btn-success">
                    Provision all
                </button>
            </div>
            <br>
            <hr class="text-success">
            <div class="card-body card-ml-4">
                <h5 class="card-title text-primary-dark">Progress pearls:</h5>
                <div id="listCreateMsg" class="mt-3"></div>      <div id="listFieldMsg" class="mt-3"></div>       <div id="lookupMsg" class="mt-3"></div>          <div id="listCtMsg" class="mt-3"></div>
                <div id="ctFieldAddMsg" class="mt-3"></div>      <div id="attachCTMsg" class="mt-3"></div>
                <div id="verifyGrpMsg" class="mt-3"></div>     <div id="createGrpMsg" class="mt-3"></div>       <div id="permissionMsg" class="mt-3"></div>    <div id="viewMsg" class="mt-3"></div>            <div id="titleMsg" class="mt-3"></div>           <div id="addItemMsg" class="mt-3"></div>         <div id="resultMsg" class="mt-3 fw-bold"></div> </div>
            <br>
        </div>
    </div>

<script>
    // Global SharePoint context variables
    var _currentContext = null;
    var _web = null;

    // Function to sanitize display names for use as internal SharePoint names
    function sanitizeNameForInternalUse(displayName) {
        if (!displayName) return "";
        let name = displayName.trim();
        // Replace sequences of non-alphanumeric characters with a single underscore
        name = name.replace(/[^A-Za-z0-9_]+/g, '_');
        // Ensure it doesn't start or end with an underscore if it's not the only char
        if (name.length > 1) {
            name = name.replace(/^_+|_+$/g, '');
        }
        // If it starts with a number, prefix with "N" (or other letter)
        if (/^[0-9]/.test(name)) {
            name = "N" + name;
        }
        // Ensure it starts with a letter if it became empty or invalid
        if (!/^[A-Za-z]/.test(name) && name.length > 0) {
            name = "Field_" + name;
        } else if (name.length === 0) {
            // Fallback for empty string after sanitization
            return "InvalidFieldName";
        }
        // SharePoint internal names often have length restrictions, but usually more than 32.
        // For this example, no truncation. Be mindful if issues arise.
        return name;
    }


    // Main function to trigger all provisioning steps
    function ProvisionAllLists() {
        _currentContext = SP.ClientContext.get_current();
        _web = _currentContext.get_web();

        $("#resultMsg").html("Provisioning started...").removeClass("text-danger text-warning");
        clearPreviousMessages();

        provisionBookManagement(function(successBook) {
            if (!successBook) {
                $("#resultMsg").append("<br>Book Management provisioning failed. Stopping.").addClass("text-danger");
                return;
            }
            provisionMemberManagement(function(successMember) {
                if (!successMember) {
                    $("#resultMsg").append("<br>Member Management provisioning failed. Stopping.").addClass("text-danger");
                    return;
                }
                provisionIssuanceAndReturns(function(successIssuance) {
                    if (successIssuance) {
                        $("#resultMsg").append("<br>All lists provisioned successfully! :)").addClass("text-success");
                    } else {
                        $("#resultMsg").append("<br>Issuance and Returns provisioning failed.").addClass("text-danger");
                    }
                });
            });
        });
    }

    function clearPreviousMessages() {
        $("#listCreateMsg").empty();
        $("#listFieldMsg").empty();
        $("#lookupMsg").empty();
        $("#listCtMsg").empty();
        $("#ctFieldAddMsg").empty();
        $("#attachCTMsg").empty();
        $("#verifyGrpMsg").empty();
        $("#createGrpMsg").empty();
        $("#permissionMsg").empty();
        $("#viewMsg").empty();
        $("#titleMsg").empty();
        $("#addItemMsg").empty();
    }

    // --- Provisioning for "Book Management" ---
    function provisionBookManagement(mainCallback) {
        $("#resultMsg").append("<br><b>Starting: Book Management</b>");
        const listName = "Book Management";
        const ctName = "BookMngt_ContentType";
        const fieldsToCreate = [
            { name: "Book Name", type: "Text" },
            { name: "Author", type: "Text" },
            { name: "Publication date", type: "DateTime" }, // Use DateTime for Date
            { name: "ISBN", type: "Text" } // ISBN often better as Text
        ];
        const groupName = "BookGrp";
        const viewFields = ["Book_Name", "Author", "Publication_date", "ISBN"]; // Use Internal Names (or DisplayNames if simple)

        createList(listName, function(success) {
            if (!success) { mainCallback(false); return; }
            createMultipleFields(listName, fieldsToCreate, function(success) {
                if (!success) { mainCallback(false); return; }
                createContentType(ctName, "Custom Content Type for Books", function(success) {
                    if (!success) { mainCallback(false); return; }
                    addMultipleFieldsToCT(ctName, fieldsToCreate.map(f => f.name), function(success) {
                        if (!success) { mainCallback(false); return; }
                        attachCT(listName, ctName, function(success) {
                            if (!success) { mainCallback(false); return; }
                            verfifyAndEnsureGroup(groupName, function(success) {
                                if (!success) { mainCallback(false); return; }
                                assignPermissions(listName, groupName, SP.RoleType.editor, function(success) {
                                    if (!success) { mainCallback(false); return; }
                                    createViews(listName, listName + " View", fieldsToCreate.map(f => sanitizeNameForInternalUse(f.name)), function(success) {
                                        if (!success) { mainCallback(false); return; }
                                        makeTitleAsOptional(listName, function(success) {
                                            $("#resultMsg").append("<br>Book Management provisioning completed.").addClass(success ? "text-success" : "text-warning");
                                            mainCallback(success);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }

    // --- Provisioning for "Member Management" ---
    function provisionMemberManagement(mainCallback) {
        $("#resultMsg").append("<br><b>Starting: Member Management</b>");
        const listName = "Member Management";
        const ctName = "Member_ContentType";
        const fieldsToCreate = [
            { name: "Member Name", type: "Text" },
            { name: "MID", type: "Text" },
            { name: "Contact details", type: "Text" },
            { name: "Membership status", type: "Text" } // Changed from Number for flexibility
        ];
        const groupName = "MemberGrp";

        createList(listName, function(success) {
            if (!success) { mainCallback(false); return; }
            createMultipleFields(listName, fieldsToCreate, function(success) {
                if (!success) { mainCallback(false); return; }
                createContentType(ctName, "Custom Content Type for Members", function(success) {
                    if (!success) { mainCallback(false); return; }
                    addMultipleFieldsToCT(ctName, fieldsToCreate.map(f => f.name), function(success) {
                        if (!success) { mainCallback(false); return; }
                        attachCT(listName, ctName, function(success) {
                            if (!success) { mainCallback(false); return; }
                            verfifyAndEnsureGroup(groupName, function(success) {
                                if (!success) { mainCallback(false); return; }
                                assignPermissions(listName, groupName, SP.RoleType.reader, function(success) {
                                    if (!success) { mainCallback(false); return; }
                                    createViews(listName, listName + " View", fieldsToCreate.map(f => sanitizeNameForInternalUse(f.name)), function(success) {
                                        if (!success) { mainCallback(false); return; }
                                        makeTitleAsOptional(listName, function(success) {
                                            $("#resultMsg").append("<br>Member Management provisioning completed.").addClass(success ? "text-success" : "text-warning");
                                            mainCallback(success);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }

    // --- Provisioning for "Issuance and returns" ---
    function provisionIssuanceAndReturns(mainCallback) {
        $("#resultMsg").append("<br><b>Starting: Issuance and returns</b>");
        const listName = "Issuance and returns";
        const ctName = "Issuance_ContentType";
        const fieldsToCreate = [
            { name: "Status", type: "Text" },
            { name: "Overdue", type: "Text" }, // Consider Boolean or Calculated
            { name: "Book_Name_Lookup", displayName: "Book Name", type: "Lookup", lookupList: "Book Management", lookupField: "Book Name" }, // Using "Book_Name_Lookup" as internal name
            { name: "Member_Name_Lookup", displayName: "Member Name", type: "Lookup", lookupList: "Member Management", lookupField: "Member Name" }, // Using "Member_Name_Lookup" as internal name
            { name: "Issue_date", type: "DateTime" },
            { name: "Return_date", type: "DateTime" }
        ];
        const groupName = "IssuanceGrp";

        createList(listName, function(success) {
            if (!success) { mainCallback(false); return; }
            createMultipleFields(listName, fieldsToCreate, function(success) { // listName here is the target list for lookup
                if (!success) { mainCallback(false); return; }
                createContentType(ctName, "Custom Content Type for Issuance", function(success) {
                    if (!success) { mainCallback(false); return; }
                     // Ensure to use the correct names (display or internal for addFieldsToCT)
                    const fieldNamesForCT = fieldsToCreate.map(f => f.displayName || f.name);
                    addMultipleFieldsToCT(ctName, fieldNamesForCT, function(success) {
                        if (!success) { mainCallback(false); return; }
                        attachCT(listName, ctName, function(success) {
                            if (!success) { mainCallback(false); return; }
                            verfifyAndEnsureGroup(groupName, function(success) {
                                if (!success) { mainCallback(false); return; }
                                assignPermissions(listName, groupName, SP.RoleType.editor, function(success) {
                                    if (!success) { mainCallback(false); return; }
                                     const viewFieldsInternal = fieldsToCreate.map(f => sanitizeNameForInternalUse(f.displayName || f.name));
                                    createViews(listName, listName + " View", viewFieldsInternal, function(success) {
                                        if (!success) { mainCallback(false); return; }
                                        makeTitleAsOptional(listName, function(success) {
                                            $("#resultMsg").append("<br>Issuance and Returns provisioning completed.").addClass(success ? "text-success" : "text-warning");
                                            mainCallback(success);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }

    // --- Core SharePoint JSOM Functions (Modified) ---

    function createList(listName, callback_fn) {
        const listCreationInfo = new SP.ListCreationInformation();
        listCreationInfo.set_title(listName);
        listCreationInfo.set_templateType(SP.ListTemplateType.genericList);
        const splist = _web.get_lists().add(listCreationInfo);
        _currentContext.load(splist);
        _currentContext.executeQueryAsync(
            function() {
                $("#listCreateMsg").append("<div>List '" + listName + "' created successfully.</div>").removeClass("text-danger").addClass("text-success");
                if (callback_fn) callback_fn(true);
            },
            function(sender, args) {
                $("#listCreateMsg").append("<div>List '" + listName + "' creation failed: " + args.get_message() + "</div>").removeClass("text-success").addClass("text-danger");
                if (callback_fn) callback_fn(false);
            }
        );
    }
    
    function createMultipleFields(listNameContext, fieldsArray, callback_main) {
        let fieldIndex = 0;
        function createNextField() {
            if (fieldIndex < fieldsArray.length) {
                const fieldDef = fieldsArray[fieldIndex];
                defineField(listNameContext, fieldDef, function(success) {
                    if (!success) {
                         $("#listFieldMsg").append("<br>Stopped creating fields for list '" + listNameContext + "' due to error with field '" + (fieldDef.displayName || fieldDef.name) + "'.");
                        callback_main(false); // Signal failure for the whole operation
                        return;
                    }
                    fieldIndex++;
                    createNextField();
                });
            } else {
                callback_main(true); // All fields processed
            }
        }
        createNextField();
    }

    function defineField(targetListForLookup, fieldDefinition, callback_fn) {
        const fieldName = fieldDefinition.displayName || fieldDefinition.name;
        const fieldType = fieldDefinition.type;
        const internalFieldName = sanitizeNameForInternalUse(fieldDefinition.name); // Use the specific internal name from definition if provided, else sanitize display name.

        const siteFields = _web.get_fields();
        _currentContext.load(siteFields);
        _currentContext.executeQueryAsync(
            function() {
                let fieldExists = false;
                const fieldEnum = siteFields.getEnumerator();
                while (fieldEnum.moveNext()) {
                    const currentField = fieldEnum.get_current();
                    if (currentField.get_internalName() === internalFieldName || currentField.get_title() === fieldName) {
                        fieldExists = true;
                        break;
                    }
                }

                if (fieldExists) {
                    $("#listFieldMsg").append("<div>Site column '" + fieldName + "' already exists.</div>").addClass("text-warning");
                    // You might want to add logic here if an existing field needs configuration (e.g. 'uidNo' validation from original)
                    if (callback_fn) callback_fn(true);
                } else {
                    if (fieldType === "Lookup") {
                        createLookupColumn(targetListForLookup, fieldDefinition.lookupList, internalFieldName, fieldName, fieldDefinition.lookupField, function(success) {
                             $("#listFieldMsg").append("<div>Lookup Site column '" + fieldName + (success ? "' processed." : "' processing failed.") + "</div>").addClass(success ? "text-success" : "text-danger");
                            if (callback_fn) callback_fn(success);
                        });
                    } else {
                        let fieldSchema = '<Field Type="' + fieldType +
                                          '" Name="' + internalFieldName +
                                          '" StaticName="' + internalFieldName + // Important for some operations
                                          '" DisplayName="' + fieldName +
                                          '" Required="FALSE" Group="Custom Site Columns" />'; // Added Group
                        
                        siteFields.addFieldAsXml(fieldSchema, true, SP.AddFieldOptions.defaultValue);
                        _currentContext.executeQueryAsync(
                            function() {
                                $("#listFieldMsg").append("<div>Site column '" + fieldName + "' created.</div>").addClass("text-success");
                                // Add specific validation for fields like 'uidNo' if necessary here
                                if (callback_fn) callback_fn(true);
                            },
                            function(sender, args) {
                                $("#listFieldMsg").append("<div>Site column '" + fieldName + "' creation failed: " + args.get_message() + "</div>").addClass("text-danger");
                                if (callback_fn) callback_fn(false);
                            }
                        );
                    }
                }
            },
            function(sender, args) {
                $("#listFieldMsg").append("<div>Failed to load site columns to check for '" + fieldName + "': " + args.get_message() + "</div>").addClass("text-danger");
                if (callback_fn) callback_fn(false);
            }
        );
    }

    function createLookupColumn(targetListTitle, sourceListTitle, internalLookupName, lookupDisplayName, sourceListShowField, callback_fn) {
        if (!targetListTitle || !sourceListTitle || !internalLookupName || !sourceListShowField) {
            $("#lookupMsg").append("<div>Lookup Column: Missing parameters for '" + lookupDisplayName + "'.</div>").addClass("text-danger");
            if (callback_fn) callback_fn(false);
            return;
        }

        const sourceList = _web.get_lists().getByTitle(sourceListTitle);
        const targetList = _web.get_lists().getByTitle(targetListTitle);
        _currentContext.load(sourceList, 'Id', 'Fields'); // Load source list Id and its Fields
        _currentContext.load(targetList, 'Fields');      // Load target list Fields

        _currentContext.executeQueryAsync(
            function() {
                let actualSourceShowFieldInternalName = null;
                const sourceFieldsEnum = sourceList.get_fields().getEnumerator();
                while(sourceFieldsEnum.moveNext()){
                    const sField = sourceFieldsEnum.get_current();
                    if(sField.get_title() === sourceListShowField || sField.get_internalName() === sourceListShowField){
                        actualSourceShowFieldInternalName = sField.get_internalName();
                        break;
                    }
                }

                if(!actualSourceShowFieldInternalName){
                     $("#lookupMsg").append("<div>Lookup creation for '" + lookupDisplayName + "' failed: Show field '" + sourceListShowField + "' not found in source list '" + sourceListTitle + "'.</div>").addClass("text-danger");
                     if (callback_fn) callback_fn(false);
                     return;
                }

                const sourceListId = sourceList.get_id().toString();
                
                // Check if lookup field already exists in target list
                const targetFieldsEnum = targetList.get_fields().getEnumerator();
                let lookupFieldExists = false;
                while(targetFieldsEnum.moveNext()){
                    const tField = targetFieldsEnum.get_current();
                    if(tField.get_internalName() === internalLookupName || tField.get_title() === lookupDisplayName){
                        lookupFieldExists = true;
                        break;
                    }
                }

                if(lookupFieldExists){
                     $("#lookupMsg").append("<div>Lookup column '" + lookupDisplayName + "' already exists in '" + targetListTitle + "'.</div>").addClass("text-warning");
                     if (callback_fn) callback_fn(true);
                     return;
                }

                const fieldSchema = '<Field Type="Lookup" DisplayName="' + lookupDisplayName +
                                  '" Required="FALSE" List="{' + sourceListId + '}" ShowField="' + actualSourceShowFieldInternalName +
                                  '" Name="' + internalLookupName + '" StaticName="' + internalLookupName + '" Group="Custom Site Columns" />';
                
                targetList.get_fields().addFieldAsXml(fieldSchema, true, SP.AddFieldOptions.defaultValue);
                _currentContext.executeQueryAsync(
                    function() {
                        $("#lookupMsg").append("<div>Lookup column '" + lookupDisplayName + "' added to '" + targetListTitle + "'.</div>").addClass("text-success");
                        if (callback_fn) callback_fn(true);
                    },
                    function(sender, args) {
                        $("#lookupMsg").append("<div>Lookup creation for '" + lookupDisplayName + "' failed: " + args.get_message() + "</div>").addClass("text-danger");
                        if (callback_fn) callback_fn(false);
                    }
                );
            },
            function(sender, args) {
                $("#lookupMsg").append("<div>Error fetching lists for lookup '" + lookupDisplayName + "': " + args.get_message() + "</div>").addClass("text-danger");
                if (callback_fn) callback_fn(false);
            }
        );
    }


    function createContentType(ctName, ctDescription, callback_fn) {
        const siteContentTypes = _web.get_contentTypes();
        _currentContext.load(siteContentTypes);
        _currentContext.executeQueryAsync(
            function() {
                let ctExists = false;
                const ctEnum = siteContentTypes.getEnumerator();
                while(ctEnum.moveNext()){
                    if(ctEnum.get_current().get_name() === ctName){
                        ctExists = true;
                        break;
                    }
                }
                if(ctExists){
                    $("#listCtMsg").append("<div>Content type '" + ctName + "' already exists.</div>").addClass("text-warning");
                    if (callback_fn) callback_fn(true); // Assuming existing is OK
                    return;
                }

                const ctCreationInfo = new SP.ContentTypeCreationInformation();
                ctCreationInfo.set_name(ctName);
                ctCreationInfo.set_description(ctDescription || "Custom Content Type");
                ctCreationInfo.set_group("Custom Content Types");
                // ctCreationInfo.set_parentContentType(siteContentTypes.getById("0x01")); // System Item CT
                siteContentTypes.add(ctCreationInfo);
                _currentContext.executeQueryAsync(
                    function() {
                        $("#listCtMsg").append("<div>Content type '" + ctName + "' created.</div>").addClass("text-success");
                        if (callback_fn) callback_fn(true);
                    },
                    function(sender, args) {
                        $("#listCtMsg").append("<div>Content type '" + ctName + "' creation failed: " + args.get_message() + "</div>").addClass("text-danger");
                        if (callback_fn) callback_fn(false);
                    }
                );
            },
            function(sender, args){
                 $("#listCtMsg").append("<div>Failed to load site content types to check for '" + ctName + "': " + args.get_message() + "</div>").addClass("text-danger");
                 if (callback_fn) callback_fn(false);
            }
        );
    }

    function addMultipleFieldsToCT(contentTypeName, fieldDisplayNamesArray, callback_main) {
        let fieldIndex = 0;
        function addNextField() {
            if (fieldIndex < fieldDisplayNamesArray.length) {
                let fieldDisplayName = fieldDisplayNamesArray[fieldIndex];
                addFieldsToCT(contentTypeName, fieldDisplayName, function(success) {
                    if (!success) {
                        $("#ctFieldAddMsg").append("<br>Stopped adding fields to CT '" + contentTypeName + "' due to error with field '" + fieldDisplayName + "'.");
                        if (callback_main) callback_main(false);
                        return;
                    }
                    fieldIndex++;
                    addNextField();
                });
            } else {
                if (callback_main) callback_main(true);
            }
        }
        addNextField();
    }


    function addFieldsToCT(ctName, fieldDisplayName, callback_fn) {
        const siteContentTypes = _web.get_contentTypes();
        const siteFields = _web.get_fields();
        let targetContentType = null;
        let targetField = null;

        _currentContext.load(siteContentTypes);
        _currentContext.load(siteFields);

        _currentContext.executeQueryAsync(
            function() {
                const ctEnum = siteContentTypes.getEnumerator();
                while (ctEnum.moveNext()) {
                    const currentCt = ctEnum.get_current();
                    if (currentCt.get_name() === ctName) {
                        targetContentType = currentCt;
                        break;
                    }
                }

                if (!targetContentType) {
                    $("#ctFieldAddMsg").append("<div>CT '" + ctName + "' not found to add field '" + fieldDisplayName + "'.</div>").addClass("text-danger");
                    if (callback_fn) callback_fn(false);
                    return;
                }

                // Try to get by internal name first, then by title
                const internalFieldName = sanitizeNameForInternalUse(fieldDisplayName);
                try {
                    targetField = siteFields.getByInternalNameOrTitle(internalFieldName);
                } catch (e) {
                     try {
                        targetField = siteFields.getByInternalNameOrTitle(fieldDisplayName);
                     } catch (e2) {
                        // Fallback, iterate and check
                        const fieldEnum = siteFields.getEnumerator();
                        while(fieldEnum.moveNext()){
                            const f = fieldEnum.get_current();
                            if(f.get_internalName() === internalFieldName || f.get_title() === fieldDisplayName){
                                targetField = f;
                                break;
                            }
                        }
                     }
                }
                
                if (!targetField) {
                     $("#ctFieldAddMsg").append("<div>Field '" + fieldDisplayName + "' (Internal: '"+internalFieldName+"') not found in site columns to add to CT '" + ctName + "'.</div>").addClass("text-danger");
                     if (callback_fn) callback_fn(false);
                     return;
                }
                
                _currentContext.load(targetContentType, 'FieldLinks'); // Load existing field links for check
                _currentContext.load(targetField);

                _currentContext.executeQueryAsync(function(){
                    // Check if field link already exists
                    const fieldLinks = targetContentType.get_fieldLinks();
                    const fieldLinkEnum = fieldLinks.getEnumerator();
                    let linkExists = false;
                    while(fieldLinkEnum.moveNext()){
                        if(fieldLinkEnum.get_current().get_name() === targetField.get_internalName()){
                            linkExists = true;
                            break;
                        }
                    }

                    if(linkExists){
                        $("#ctFieldAddMsg").append("<div>Field '" + fieldDisplayName + "' already in CT '" + ctName + "'.</div>").addClass("text-warning");
                        if (callback_fn) callback_fn(true);
                        return;
                    }

                    const fieldLinkCreationInfo = new SP.FieldLinkCreationInformation();
                    fieldLinkCreationInfo.set_field(targetField);
                    targetContentType.get_fieldLinks().add(fieldLinkCreationInfo);
                    targetContentType.update(true); // true to push changes down to lists if this CT is used
                    _currentContext.executeQueryAsync(
                        function() {
                            $("#ctFieldAddMsg").append("<div>Field '" + fieldDisplayName + "' added to CT '" + ctName + "'.</div>").addClass("text-success");
                            if (callback_fn) callback_fn(true);
                        },
                        function(sender, args) {
                            $("#ctFieldAddMsg").append("<div>Failed to add field '" + fieldDisplayName + "' to CT '" + ctName + "': " + args.get_message() + "</div>").addClass("text-danger");
                            if (callback_fn) callback_fn(false);
                        }
                    );

                }, function(sender, args){
                    $("#ctFieldAddMsg").append("<div>Failed to load CT/Field details for '" + fieldDisplayName + "' in CT '" + ctName + "': " + args.get_message() + "</div>").addClass("text-danger");
                    if (callback_fn) callback_fn(false);
                });
            },
            function(sender, args) {
                $("#ctFieldAddMsg").append("<div>Failed to load Site CTs/Fields to add '" + fieldDisplayName + "' to '" + ctName + "': " + args.get_message() + "</div>").addClass("text-danger");
                if (callback_fn) callback_fn(false);
            }
        );
    }

    function attachCT(listName, ctName, callback_fn) {
        const list = _web.get_lists().getByTitle(listName);
        const siteContentTypes = _web.get_contentTypes();
        _currentContext.load(list, 'ContentTypes', 'ContentTypesEnabled');
        _currentContext.load(siteContentTypes);

        _currentContext.executeQueryAsync(
            function() {
                let targetContentType = null;
                const ctEnum = siteContentTypes.getEnumerator();
                while(ctEnum.moveNext()){
                    if(ctEnum.get_current().get_name() === ctName){
                        targetContentType = ctEnum.get_current();
                        break;
                    }
                }
                if(!targetContentType){
                    $("#attachCTMsg").append("<div>Content Type '" + ctName + "' not found to attach to list '" + listName + "'.</div>").addClass("text-danger");
                    if(callback_fn) callback_fn(false);
                    return;
                }

                if (!list.get_contentTypesEnabled()) {
                    list.set_contentTypesEnabled(true);
                }
                list.get_contentTypes().addExistingContentType(targetContentType);
                list.set_enableVersioning(true); // Enable versioning
                list.set_majorVersionLimit(10); // Example limit
                list.update();
                _currentContext.executeQueryAsync(
                    function() {
                        $("#attachCTMsg").append("<div>CT '" + ctName + "' attached to list '" + listName + "' and versioning enabled.</div>").addClass("text-success");
                        if (callback_fn) callback_fn(true);
                    },
                    function(sender, args) {
                        $("#attachCTMsg").append("<div>Attaching CT '" + ctName + "' to list '" + listName + "' failed: " + args.get_message() + "</div>").addClass("text-danger");
                        if (callback_fn) callback_fn(false);
                    }
                );
            },
            function(sender, args){
                $("#attachCTMsg").append("<div>Failed to load list/CTs to attach '" + ctName + "' to '" + listName + "': " + args.get_message() + "</div>").addClass("text-danger");
                 if(callback_fn) callback_fn(false);
            }
        );
    }
    
    function verfifyAndEnsureGroup(groupName, callback_fn) {
        const siteGroups = _web.get_siteGroups();
        _currentContext.load(siteGroups);
        _currentContext.executeQueryAsync(
            function() {
                let groupExists = false;
                const groupEnum = siteGroups.getEnumerator();
                while(groupEnum.moveNext()){
                    if(groupEnum.get_current().get_title() === groupName){
                        groupExists = true;
                        break;
                    }
                }
                if (groupExists) {
                    $("#verifyGrpMsg").append("<div>Group '" + groupName + "' already exists.</div>").addClass("text-warning");
                    if (callback_fn) callback_fn(true);
                } else {
                    createGroup(groupName, callback_fn);
                }
            },
            function(sender, args) {
                 $("#verifyGrpMsg").append("<div>Error checking for group '" + groupName + "': " + args.get_message() + "</div>").addClass("text-danger");
                 if (callback_fn) callback_fn(false); // Failed to even check groups
            }
        );
    }

    function createGroup(groupName, callback_fn) {
        const groupCreationInfo = new SP.GroupCreationInformation();
        groupCreationInfo.set_title(groupName);
        groupCreationInfo.set_description("Custom group for " + groupName);
        _web.get_siteGroups().add(groupCreationInfo);
        _currentContext.executeQueryAsync(
            function() {
                $("#createGrpMsg").append("<div>Group '" + groupName + "' created.</div>").addClass("text-success");
                if (callback_fn) callback_fn(true);
            },
            function(sender, args) {
                $("#createGrpMsg").append("<div>Group '" + groupName + "' creation failed: " + args.get_message() + "</div>").addClass("text-danger");
                if (callback_fn) callback_fn(false);
            }
        );
    }

    function assignPermissions(listTitle, groupName, roleType, callback_fn) {
        const list = _web.get_lists().getByTitle(listTitle);
        const group = _web.get_siteGroups().getByName(groupName);
        const roleDefinition = _web.get_roleDefinitions().getByType(roleType);
        const roleBindings = SP.RoleDefinitionBindingCollection.newObject(_currentContext);
        roleBindings.add(roleDefinition);

        list.breakRoleInheritance(false, true); // false to copy current roles, true to clear subscopes (safer)
        list.get_roleAssignments().add(group, roleBindings);
        _currentContext.executeQueryAsync(
            function() {
                $("#permissionMsg").append("<div>Permissions assigned to group '" + groupName + "' on list '" + listTitle + "'.</div>").addClass("text-success");
                if (callback_fn) callback_fn(true);
            },
            function(sender, args) {
                $("#permissionMsg").append("<div>Assigning permissions for group '" + groupName + "' on list '" + listTitle + "' failed: " + args.get_message() + "</div>").addClass("text-danger");
                if (callback_fn) callback_fn(false);
            }
        );
    }

    function createViews(listName, viewName, fieldInternalNamesArray, callback_fn) {
        const list = _web.get_lists().getByTitle(listName);
        const viewCreationInfo = new SP.ViewCreationInformation();
        viewCreationInfo.set_title(viewName);
        viewCreationInfo.set_viewFields(fieldInternalNamesArray); // Expects array of internal field names
        // viewCreationInfo.set_rowLimit(30); // Example: Set row limit
        // viewCreationInfo.set_paged(true);   // Example: Make view paged
        // viewCreationInfo.set_query("<OrderBy><FieldRef Name='" + fieldInternalNamesArray[0] + "'/></OrderBy>"); // Example: Sort by first field

        list.get_views().add(viewCreationInfo);
        _currentContext.executeQueryAsync(
            function() {
                $("#viewMsg").append("<div>View '" + viewName + "' created for list '" + listName + "'.</div>").addClass("text-success");
                if (callback_fn) callback_fn(true);
            },
            function(sender, args) {
                $("#viewMsg").append("<div>View '" + viewName + "' creation for list '" + listName + "' failed: " + args.get_message() + "</div>").addClass("text-danger");
                if (callback_fn) callback_fn(false);
            }
        );
    }

    function makeTitleAsOptional(listName, callback_fn) {
        const list = _web.get_lists().getByTitle(listName);
        const titleField = list.get_fields().getByInternalNameOrTitle("Title");
        _currentContext.load(titleField);
        _currentContext.executeQueryAsync(
            function(){
                titleField.set_required(false);
                titleField.set_hidden(false); // Keep it visible but optional, or true to hide
                titleField.update();
                _currentContext.executeQueryAsync(
                    function() {
                        $("#titleMsg").append("<div>Title field in list '" + listName + "' made optional.</div>").addClass("text-success");
                        if (callback_fn) callback_fn(true);
                    },
                    function(sender, args) {
                        $("#titleMsg").append("<div>Updating Title field in list '" + listName + "' failed: " + args.get_message() + "</div>").addClass("text-danger");
                        if (callback_fn) callback_fn(false);
                    }
                );
            },
            function(sender, args){
                $("#titleMsg").append("<div>Failed to load Title field for list '" + listName + "': " + args.get_message() + "</div>").addClass("text-danger");
                if (callback_fn) callback_fn(false);
            }
        );
    }
    // Example function for adding list items (not fully implemented in main flow but structure is here)
    function addListItem(listName, itemProperties, callback_fn) {
        const list = _web.get_lists().getByTitle(listName);
        const itemCreationInfo = new SP.ListItemCreationInformation();
        const listItem = list.addItem(itemCreationInfo);

        for (const prop of itemProperties) {
            listItem.set_item(prop.fieldName, prop.value);
        }
        listItem.update();
        _currentContext.load(listItem);
        _currentContext.executeQueryAsync(
            function() {
                $("#addItemMsg").append("<div>Item added to '" + listName + "'.</div>").addClass("text-success");
                if (callback_fn) callback_fn(true);
            },
            function(sender, args) {
                $("#addItemMsg").append("<div>Adding item to '" + listName + "' failed: " + args.get_message() + "</div>").addClass("text-danger");
                if (callback_fn) callback_fn(false);
            }
        );
    }

</script>
</body>
</html>
