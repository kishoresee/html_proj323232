<!DOCTYPE html>
<html>
<head>
    <title>Library Management System Provisioning</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
    <style>
        .progress-container {
            margin-top: 20px;
        }
        .status-message {
            padding: 5px;
            margin-bottom: 5px;
            border-radius: 4px;
        }
        .text-success {
            color: #28a745;
        }
        .text-danger {
            color: #dc3545;
        }
        .text-warning {
            color: #ffc107;
        }
        .modal-content {
            background-color: #f8f9fa;
        }
        .card-body {
            padding-left: 5px;
        }
        .container {
            padding-left: 10px;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container mt-4">
        <div class="card border-success">
            <div class="card-header bg-success text-white">
                <h2>Library Management System Provisioning</h2>
            </div>
            <div class="card-body">
                <button type="button" onclick="provisionAll()" class="btn btn-success btn-lg">
                    Provision All Components
                </button>
                
                <button type="button" class="btn btn-success rounded-pill mt-3" data-bs-toggle="modal" data-bs-target="#workflowModal">
                    View Workflow
                </button>
                
                <div class="modal fade" id="workflowModal" tabindex="-1" aria-labelledby="workflowModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="workflowModalLabel">Provisioning Workflow</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <ol>
                                    <li><strong>Provision with a click</strong></li>
                                    <li>Creating Lists (Book, Member, Issuance)</li>
                                    <li>Define fields for each list</li>
                                    <li>Creating Content Types</li>
                                    <li>Adding fields to Content Types</li>
                                    <li>Attaching Content Types to lists</li>
                                    <li>Group existence check</li>
                                    <li>Create Groups</li>
                                    <li>Assign permissions</li>
                                    <li>Making Title field optional</li>
                                    <li>Creating default views</li>
                                </ol>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-4">
                    <h5 class="text-primary">Provisioning Progress:</h5>
                    <div id="statusMessages" class="progress-container"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Ensure SP.js is loaded before any operations
        function ensureSPLoaded() {
            return new Promise((resolve, reject) => {
                if (typeof SP !== 'undefined' && SP.ClientContext) {
                    resolve();
                } else {
                    SP.SOD.executeFunc('sp.js', 'SP.ClientContext', function() {
                        resolve();
                    }, function() {
                        reject('Failed to load SP.js');
                    });
                }
            });
        }

        // Main provisioning function
        function provisionAll() {
            clearStatusMessages();
            addStatusMessage("Starting provisioning process...");
            
            ensureSPLoaded()
                .then(() => {
                    return createBookManagementList()
                        .then(() => createMemberManagementList())
                        .then(() => createIssuanceReturnsList())
                        .then(() => configurePermissions())
                        .then(() => {
                            addStatusMessage("✅ All components provisioned successfully!", "success");
                        });
                })
                .catch(error => {
                    addStatusMessage(`❌ Provisioning failed: ${error}`, "error");
                    console.error("Provisioning error:", error);
                });
        }

        // Clear previous status messages
        function clearStatusMessages() {
            $("#statusMessages").empty();
        }

        // Add a status message
        function addStatusMessage(message, type) {
            const element = $('<div class="status-message"></div>').text(message);
            
            if (type === "success") {
                element.addClass("text-success");
            } else if (type === "error") {
                element.addClass("text-danger");
            } else if (type === "warning") {
                element.addClass("text-warning");
            }
            
            $("#statusMessages").append(element);
            $("#statusMessages").scrollTop($("#statusMessages")[0].scrollHeight);
        }

        // Create Book Management List
        function createBookManagementList() {
            return new Promise((resolve, reject) => {
                addStatusMessage("Starting Book Management list provisioning...");
                
                const listName = "Book Management";
                const fields = [
                    { name: "BookName", type: "Text", displayName: "Book Name", required: true },
                    { name: "Author", type: "Text", displayName: "Author", required: true },
                    { name: "PublicationDate", type: "DateTime", displayName: "Publication Date" },
                    { name: "ISBN", type: "Text", displayName: "ISBN", required: true },
                    { name: "Status", type: "Choice", displayName: "Status", choices: ["Available", "Checked Out"], defaultValue: "Available" }
                ];
                
                const contentTypeName = "BookContentType";
                
                createList(listName)
                    .then(() => {
                        addStatusMessage("Book Management list created");
                        return createFieldsSequentially(listName, fields);
                    })
                    .then(() => {
                        addStatusMessage("All fields created for Book Management");
                        return createContentType(contentTypeName);
                    })
                    .then(() => {
                        addStatusMessage("Content type created for Book Management");
                        return addFieldsToContentTypeSequentially(contentTypeName, fields);
                    })
                    .then(() => attachContentTypeToList(listName, contentTypeName))
                    .then(() => makeTitleOptional(listName))
                    .then(() => configureListViews(listName, ["BookName", "Author", "Status", "ISBN"]))
                    .then(() => {
                        addStatusMessage("Book Management list fully configured");
                        resolve();
                    })
                    .catch(error => {
                        addStatusMessage(`Error in Book Management provisioning: ${error}`, "error");
                        reject(error);
                    });
            });
        }

        // Create Member Management List
        function createMemberManagementList() {
            return new Promise((resolve, reject) => {
                addStatusMessage("Starting Member Management list provisioning...");
                
                const listName = "Member Management";
                const fields = [
                    { name: "MemberName", type: "Text", displayName: "Member Name", required: true },
                    { name: "MemberID", type: "Text", displayName: "Member ID", required: true },
                    { name: "ContactDetails", type: "Note", displayName: "Contact Details" },
                    { name: "MembershipStatus", type: "Choice", displayName: "Membership Status", 
                      choices: ["Active", "Inactive", "Suspended"], defaultValue: "Active" }
                ];
                
                const contentTypeName = "MemberContentType";
                
                createList(listName)
                    .then(() => {
                        addStatusMessage("Member Management list created");
                        return createFieldsSequentially(listName, fields);
                    })
                    .then(() => {
                        addStatusMessage("All fields created for Member Management");
                        return createContentType(contentTypeName);
                    })
                    .then(() => {
                        addStatusMessage("Content type created for Member Management");
                        return addFieldsToContentTypeSequentially(contentTypeName, fields);
                    })
                    .then(() => attachContentTypeToList(listName, contentTypeName))
                    .then(() => makeTitleOptional(listName))
                    .then(() => configureListViews(listName, ["MemberName", "MemberID", "MembershipStatus"]))
                    .then(() => {
                        addStatusMessage("Member Management list fully configured");
                        resolve();
                    })
                    .catch(error => {
                        addStatusMessage(`Error in Member Management provisioning: ${error}`, "error");
                        reject(error);
                    });
            });
        }

        // Create Issuance & Returns List
        function createIssuanceReturnsList() {
            return new Promise((resolve, reject) => {
                addStatusMessage("Starting Issuance & Returns list provisioning...");
                
                const listName = "Issuance and Returns";
                const fields = [
                    { name: "Status", type: "Choice", displayName: "Status", 
                      choices: ["Active", "Returned", "Overdue"], defaultValue: "Active" },
                    { name: "OverdueDays", type: "Number", displayName: "Overdue Days" },
                    { name: "IssueDate", type: "DateTime", displayName: "Issue Date", required: true },
                    { name: "DueDate", type: "DateTime", displayName: "Due Date", required: true },
                    { name: "ReturnDate", type: "DateTime", displayName: "Return Date" }
                ];
                
                const contentTypeName = "IssuanceContentType";
                
                createList(listName)
                    .then(() => {
                        addStatusMessage("Issuance & Returns list created");
                        return createFieldsSequentially(listName, fields);
                    })
                    .then(() => {
                        addStatusMessage("All base fields created for Issuance & Returns");
                        return Promise.all([
                            createLookupField("Book Management", listName, "BookLookup", "BookName"),
                            createLookupField("Member Management", listName, "MemberLookup", "MemberName")
                        ]);
                    })
                    .then(() => {
                        addStatusMessage("Lookup fields created for Issuance & Returns");
                        return createContentType(contentTypeName);
                    })
                    .then(() => {
                        addStatusMessage("Content type created for Issuance & Returns");
                        
                        const allFields = fields.concat([
                            { name: "BookLookup", type: "Lookup", displayName: "Book", required: true },
                            { name: "MemberLookup", type: "Lookup", displayName: "Member", required: true }
                        ]);
                        
                        return addFieldsToContentTypeSequentially(contentTypeName, allFields);
                    })
                    .then(() => attachContentTypeToList(listName, contentTypeName))
                    .then(() => makeTitleOptional(listName))
                    .then(() => configureListViews(listName, ["BookLookup", "MemberLookup", "IssueDate", "DueDate", "Status"]))
                    .then(() => {
                        addStatusMessage("Issuance & Returns list fully configured");
                        resolve();
                    })
                    .catch(error => {
                        addStatusMessage(`Error in Issuance & Returns provisioning: ${error}`, "error");
                        reject(error);
                    });
            });
        }

        // Configure permissions
        function configurePermissions() {
            return new Promise((resolve, reject) => {
                addStatusMessage("Configuring permissions...");
                
                const groups = [
                    { name: "Librarians", permission: SP.RoleType.administrator },
                    { name: "Members", permission: SP.RoleType.reader }
                ];
                
                const lists = [
                    { name: "Book Management", group: "Librarians", permission: SP.RoleType.editor },
                    { name: "Member Management", group: "Librarians", permission: SP.RoleType.editor },
                    { name: "Issuance and Returns", group: "Librarians", permission: SP.RoleType.editor }
                ];
                
                // First create all groups
                Promise.all(groups.map(group => verifyGroup(group.name)))
                    .then(() => {
                        // Then assign permissions to all lists
                        return Promise.all(lists.map(list => 
                            assignPermissions(list.name, list.group, list.permission)
                        ));
                    })
                    .then(() => {
                        addStatusMessage("All permissions configured successfully");
                        resolve();
                    })
                    .catch(error => {
                        addStatusMessage(`Error configuring permissions: ${error}`, "error");
                        reject(error);
                    });
            });
        }

        // Helper function to create fields sequentially
        function createFieldsSequentially(listName, fields) {
            return new Promise((resolve, reject) => {
                let index = 0;
                
                function processNextField() {
                    if (index >= fields.length) {
                        resolve();
                        return;
                    }
                    
                    const field = fields[index];
                    addStatusMessage(`Creating field: ${field.displayName}`);
                    
                    createField(listName, field.name, field.type, field.displayName, field.choices, field.required)
                        .then(() => {
                            index++;
                            processNextField();
                        })
                        .catch(error => {
                            addStatusMessage(`Failed to create field: ${field.displayName}: ${error}`, "error");
                            reject(error);
                        });
                }
                
                processNextField();
            });
        }

        // Helper function to add fields to content type sequentially
        function addFieldsToContentTypeSequentially(contentTypeName, fields) {
            return new Promise((resolve, reject) => {
                let index = 0;
                
                function processNextField() {
                    if (index >= fields.length) {
                        resolve();
                        return;
                    }
                    
                    const field = fields[index];
                    addStatusMessage(`Adding field to content type: ${field.displayName}`);
                    
                    addFieldToContentType(contentTypeName, field.name)
                        .then(() => {
                            index++;
                            processNextField();
                        })
                        .catch(error => {
                            addStatusMessage(`Failed to add field to content type: ${field.displayName}: ${error}`, "error");
                            reject(error);
                        });
                }
                
                processNextField();
            });
        }

        // Create a SharePoint list
        function createList(listName) {
            return new Promise((resolve, reject) => {
                try {
                    const ctx = new SP.ClientContext.get_current();
                    const web = ctx.get_web();
                    const listCreationInfo = new SP.ListCreationInformation();
                    
                    listCreationInfo.set_title(listName);
                    listCreationInfo.set_templateType(SP.ListTemplateType.genericList);
                    
                    const list = web.get_lists().add(listCreationInfo);
                    
                    ctx.executeQueryAsync(
                        function() {
                            addStatusMessage(`List "${listName}" created successfully`);
                            resolve();
                        },
                        function(sender, args) {
                            if (args.get_message().indexOf("already exists") !== -1) {
                                addStatusMessage(`List "${listName}" already exists`, "warning");
                                resolve();
                            } else {
                                const error = `Failed to create list "${listName}": ${args.get_message()}`;
                                addStatusMessage(error, "error");
                                reject(error);
                            }
                        }
                    );
                } catch (e) {
                    const error = `Error creating list: ${e.message}`;
                    addStatusMessage(error, "error");
                    reject(error);
                }
            });
        }

        // Create a field in a list
        function createField(listName, fieldName, fieldType, displayName, choices, isRequired) {
            return new Promise((resolve, reject) => {
                try {
                    const ctx = new SP.ClientContext.get_current();
                    const web = ctx.get_web();
                    const list = web.get_lists().getByTitle(listName);
                    const fields = list.get_fields();
                    
                    let fieldXml;
                    const requiredAttr = isRequired ? 'Required="TRUE"' : 'Required="FALSE"';
                    
                    if (fieldType === "Choice") {
                        const choicesXml = choices.map(choice => `<CHOICE>${choice}</CHOICE>`).join('');
                        const defaultChoice = choices[0] ? `<Default>${choices[0]}</Default>` : '';
                        fieldXml = `<Field Type="${fieldType}" Name="${fieldName}" DisplayName="${displayName}" ${requiredAttr}>
                                      <CHOICES>${choicesXml}</CHOICES>
                                      ${defaultChoice}
                                   </Field>`;
                    } else {
                        fieldXml = `<Field Type="${fieldType}" Name="${fieldName}" DisplayName="${displayName}" ${requiredAttr} />`;
                    }
                    
                    fields.addFieldAsXml(fieldXml, true, SP.AddFieldOptions.defaultValue);
                    
                    ctx.executeQueryAsync(
                        function() {
                            addStatusMessage(`Field "${displayName}" created successfully`);
                            resolve();
                        },
                        function(sender, args) {
                            if (args.get_message().indexOf("already exists") !== -1) {
                                addStatusMessage(`Field "${displayName}" already exists`, "warning");
                                resolve();
                            } else {
                                const error = `Failed to create field "${displayName}": ${args.get_message()}`;
                                addStatusMessage(error, "error");
                                reject(error);
                            }
                        }
                    );
                } catch (e) {
                    const error = `Error creating field: ${e.message}`;
                    addStatusMessage(error, "error");
                    reject(error);
                }
            });
        }

        // Create a lookup field
        function createLookupField(sourceListName, targetListName, lookupFieldName, sourceFieldName) {
            return new Promise((resolve, reject) => {
                try {
                    const ctx = new SP.ClientContext.get_current();
                    const web = ctx.get_web();
                    
                    const sourceList = web.get_lists().getByTitle(sourceListName);
                    ctx.load(sourceList, 'Id');
                    
                    const targetList = web.get_lists().getByTitle(targetListName);
                    ctx.load(targetList);
                    
                    ctx.executeQueryAsync(
                        function() {
                            const sourceListId = sourceList.get_id().toString();
                            
                            const fieldSchema = `<Field Type="Lookup" 
                                                    DisplayName="${lookupFieldName}" 
                                                    Required="TRUE" 
                                                    List="${sourceListId}" 
                                                    ShowField="${sourceFieldName}" 
                                                    EnforceUniqueValues="FALSE" 
                                                    StaticName="${lookupFieldName}" 
                                                    Name="${lookupFieldName}" />`;
                            
                            targetList.get_fields().addFieldAsXml(fieldSchema, true, SP.AddFieldOptions.defaultValue);
                            
                            ctx.executeQueryAsync(
                                function() {
                                    addStatusMessage(`Lookup field "${lookupFieldName}" created successfully`);
                                    resolve();
                                },
                                function(sender, args) {
                                    if (args.get_message().indexOf("already exists") !== -1) {
                                        addStatusMessage(`Lookup field "${lookupFieldName}" already exists`, "warning");
                                        resolve();
                                    } else {
                                        const error = `Failed to create lookup field "${lookupFieldName}": ${args.get_message()}`;
                                        addStatusMessage(error, "error");
                                        reject(error);
                                    }
                                }
                            );
                        },
                        function(sender, args) {
                            const error = `Failed to get list information for lookup field: ${args.get_message()}`;
                            addStatusMessage(error, "error");
                            reject(error);
                        }
                    );
                } catch (e) {
                    const error = `Error creating lookup field: ${e.message}`;
                    addStatusMessage(error, "error");
                    reject(error);
                }
            });
        }

        // Create a content type
        function createContentType(contentTypeName) {
            return new Promise((resolve, reject) => {
                try {
                    const ctx = new SP.ClientContext.get_current();
                    const web = ctx.get_web();
                    const contentTypes = web.get_contentTypes();
                    const contentTypeCreationInfo = new SP.ContentTypeCreationInformation();
                    
                    contentTypeCreationInfo.set_name(contentTypeName);
                    contentTypeCreationInfo.set_description("Created by Library Management System");
                    contentTypeCreationInfo.set_group("Library Content Types");
                    contentTypeCreationInfo.set_parentContentType(contentTypes.getById("0x01"));
                    
                    contentTypes.add(contentTypeCreationInfo);
                    
                    ctx.executeQueryAsync(
                        function() {
                            addStatusMessage(`Content type "${contentTypeName}" created successfully`);
                            resolve();
                        },
                        function(sender, args) {
                            if (args.get_message().indexOf("already exists") !== -1) {
                                addStatusMessage(`Content type "${contentTypeName}" already exists`, "warning");
                                resolve();
                            } else {
                                const error = `Failed to create content type "${contentTypeName}": ${args.get_message()}`;
                                addStatusMessage(error, "error");
                                reject(error);
                            }
                        }
                    );
                } catch (e) {
                    const error = `Error creating content type: ${e.message}`;
                    addStatusMessage(error, "error");
                    reject(error);
                }
            });
        }

        // Add a field to a content type
        function addFieldToContentType(contentTypeName, fieldName) {
            return new Promise((resolve, reject) => {
                try {
                    const ctx = new SP.ClientContext.get_current();
                    const web = ctx.get_web();
                    
                    const contentType = web.get_contentTypes().getByName(contentTypeName);
                    ctx.load(contentType);
                    
                    const field = web.get_fields().getByInternalNameOrTitle(fieldName);
                    ctx.load(field);
                    
                    ctx.executeQueryAsync(
                        function() {
                            const fieldLinkCreationInfo = new SP.FieldLinkCreationInformation();
                            fieldLinkCreationInfo.set_field(field);
                            
                            contentType.get_fieldLinks().add(fieldLinkCreationInfo);
                            contentType.update(true);
                            
                            ctx.executeQueryAsync(
                                function() {
                                    addStatusMessage(`Field "${fieldName}" added to content type "${contentTypeName}"`);
                                    resolve();
                                },
                                function(sender, args) {
                                    if (args.get_message().indexOf("already exists") !== -1) {
                                        addStatusMessage(`Field "${fieldName}" already in content type "${contentTypeName}"`, "warning");
                                        resolve();
                                    } else {
                                        const error = `Failed to add field "${fieldName}" to content type "${contentTypeName}": ${args.get_message()}`;
                                        addStatusMessage(error, "error");
                                        reject(error);
                                    }
                                }
                            );
                        },
                        function(sender, args) {
                            const error = `Failed to load content type or field: ${args.get_message()}`;
                            addStatusMessage(error, "error");
                            reject(error);
                        }
                    );
                } catch (e) {
                    const error = `Error adding field to content type: ${e.message}`;
                    addStatusMessage(error, "error");
                    reject(error);
                }
            });
        }

        // Attach content type to list
        function attachContentTypeToList(listName, contentTypeName) {
            return new Promise((resolve, reject) => {
                try {
                    const ctx = new SP.ClientContext.get_current();
                    const web = ctx.get_web();
                    
                    const list = web.get_lists().getByTitle(listName);
                    list.set_contentTypesEnabled(true);
                    
                    const contentType = web.get_contentTypes().getByName(contentTypeName);
                    list.get_contentTypes().addExistingContentType(contentType);
                    
                    ctx.executeQueryAsync(
                        function() {
                            addStatusMessage(`Content type "${contentTypeName}" attached to list "${listName}"`);
                            resolve();
                        },
                        function(sender, args) {
                            const error = `Failed to attach content type "${contentTypeName}" to list "${listName}": ${args.get_message()}`;
                            addStatusMessage(error, "error");
                            reject(error);
                        }
                    );
                } catch (e) {
                    const error = `Error attaching content type: ${e.message}`;
                    addStatusMessage(error, "error");
                    reject(error);
                }
            });
        }

        // Make the Title field optional
        function makeTitleOptional(listName) {
            return new Promise((resolve, reject) => {
                try {
                    const ctx = new SP.ClientContext.get_current();
                    const web = ctx.get_web();
                    const list = web.get_lists().getByTitle(listName);
                    const titleField = list.get_fields().getByInternalNameOrTitle("Title");
                    
                    ctx.load(titleField);
                    
                    ctx.executeQueryAsync(
                        function() {
                            titleField.set_required(false);
                            titleField.update();
                            
                            ctx.executeQueryAsync(
                                function() {
                                    addStatusMessage(`Title field made optional in list "${listName}"`);
                                    resolve();
                                },
                                function(sender, args) {
                                    const error = `Failed to make Title field optional: ${args.get_message()}`;
                                    addStatusMessage(error, "error");
                                    reject(error);
                                }
                            );
                        },
                        function(sender, args) {
                            const error = `Failed to load Title field: ${args.get_message()}`;
                            addStatusMessage(error, "error");
                            reject(error);
                        }
                    );
                } catch (e) {
                    const error = `Error making title optional: ${e.message}`;
                    addStatusMessage(error, "error");
                    reject(error);
                }
            });
        }

        // Configure list views
        function configureListViews(listName, viewFields) {
            return new Promise((resolve, reject) => {
                try {
                    const ctx = new SP.ClientContext.get_current();
                    const web = ctx.get_web();
                    const list = web.get_lists().getByTitle(listName);
                    
                    const viewCreationInfo = new SP.ViewCreationInformation();
                    viewCreationInfo.set_title("Default View");
                    viewCreationInfo.set_viewFields(viewFields);
                    viewCreationInfo.set_rowLimit(50);
                    viewCreationInfo.set_personalView(false);
                    viewCreationInfo.set_setAsDefaultView(true);
                    
                    list.get_views().add(viewCreationInfo);
                    
                    ctx.executeQueryAsync(
                        function() {
                            addStatusMessage(`Default view created for list "${listName}"`);
                            resolve();
                        },
                        function(sender, args) {
                            const error = `Failed to create view for list "${listName}": ${args.get_message()}`;
                            addStatusMessage(error, "error");
                            reject(error);
                        }
                    );
                } catch (e) {
                    const error = `Error configuring list views: ${e.message}`;
                    addStatusMessage(error, "error");
                    reject(error);
                }
            });
        }

        // Verify if a group exists, create if it doesn't
        function verifyGroup(groupName) {
            return new Promise((resolve, reject) => {
                try {
                    const ctx = new SP.ClientContext.get_current();
                    const web = ctx.get_web();
                    const groups = web.get_siteGroups();
                    
                    let group = groups.getByName(groupName);
                    ctx.load(group);
                    
                    ctx.executeQueryAsync(
                        function() {
                            addStatusMessage(`Group "${groupName}" already exists`, "warning");
                            resolve(true);
                        },
                        function(sender, args) {
                            createGroup(groupName)
                                .then(resolve)
                                .catch(reject);
                        }
                    );
                } catch (e) {
                    addStatusMessage(`Error checking group existence: ${e.message}`, "error");
                    reject(e.message);
                }
            });
        }

        // Create a SharePoint group
        function createGroup(groupName) {
            return new Promise((resolve, reject) => {
                try {
                    const ctx = new SP.ClientContext.get_current();
                    const web = ctx.get_web();
                    const groups = web.get_siteGroups();
                    const groupCreationInfo = new SP.GroupCreationInformation();
                    
                    groupCreationInfo.set_title(groupName);
                    groups.add(groupCreationInfo);
                    
                    ctx.executeQueryAsync(
                        function() {
                            addStatusMessage(`Group "${groupName}" created successfully`);
                            resolve(true);
                        },
                        function(sender, args) {
                            const error = `Failed to create group "${groupName}": ${args.get_message()}`;
                            addStatusMessage(error, "error");
                            reject(error);
                        }
                    );
                } catch (e) {
                    const error = `Error creating group: ${e.message}`;
                    addStatusMessage(error, "error");
                    reject(error);
                }
            });
        }

        // Assign permissions to a list
        function assignPermissions(listName, groupName, permissionLevel) {
            return new Promise((resolve, reject) => {
                try {
                    const ctx = new SP.ClientContext.get_current();
                    const web = ctx.get_web();
                    
                    const list = web.get_lists().getByTitle(listName);
                    const group = web.get_siteGroups().getByName(groupName);
                    const roleDefinition = web.get_roleDefinitions().getByType(permissionLevel);
                    
                    const roleAssignment = new SP.RoleDefinitionBindingCollection(ctx);
                    roleAssignment.add(roleDefinition);
                    
                    list.breakRoleInheritance(true);
                    list.get_roleAssignments().add(group, roleAssignment);
                    
                    ctx.executeQueryAsync(
                        function() {
                            addStatusMessage(`Permissions assigned to "${groupName}" for list "${listName}"`);
                            resolve(true);
                        },
                        function(sender, args) {
                            const error = `Failed to assign permissions to "${groupName}" for list "${listName}": ${args.get_message()}`;
                            addStatusMessage(error, "error");
                            reject(error);
                        }
                    );
                } catch (e) {
                    const error = `Error assigning permissions: ${e.message}`;
                    addStatusMessage(error, "error");
                    reject(error);
                }
            });
        }
    </script>
</body>
</html>
