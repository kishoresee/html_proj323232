<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Book Management List - Update & Delete Items</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- SharePoint JSOM + People Picker Scripts -->
    <script type="text/javascript" src="/_layouts/15/sp.runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/sp.js"></script>
    <script type="text/javascript" src="/_layouts/15/clienttemplates.js"></script>
    <script type="text/javascript" src="/_layouts/15/clientforms.js"></script>
    <script type="text/javascript" src="/_layouts/15/clientpeoplepicker.js"></script>
    <script type="text/javascript" src="/_layouts/15/autofill.js"></script>
</head>
<body class="bg-light p-4">
    <div class="container">
        <h2 class="mb-4 text-center text-primary">Book Management</h2>

        <div class="table-responsive mb-5">
            <table class="table table-bordered table-striped align-middle text-center" id="bookTable">
                <thead class="table-dark">
                    <tr>
                        <th>Actions</th>
                        <th>Book Name</th>
                        <th>Publication Date</th>
                        <th>Author Name</th>
                        <th>ISBN</th>
                    </tr>
                </thead>
                <tbody class="table-group-divider"></tbody>
            </table>
        </div>

        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Update Book Details</h4>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="bookName" class="form-label">Book Name</label>
                        <input type="text" id="bookName" class="form-control" placeholder="Enter Book Name" />
                    </div>
                    <div class="col-md-6">
                        <label for="pubDate" class="form-label">Publication Date</label>
                        <input type="date" id="pubDate" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <label for="peoplePickerAuthor" class="form-label">Author (Select from Directory)</label>
                        <div id="peoplePickerAuthor"></div>
                    </div>
                    <div class="col-md-6">
                        <label for="isbn" class="form-label">ISBN</label>
                        <input type="text" id="isbn" class="form-control" placeholder="Enter ISBN" />
                    </div>
                </div>
                <input type="hidden" id="itemId" />
                <div class="mt-4 text-end">
                    <button class="btn btn-success" onclick="updateItem()">Update Book</button>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        // Ensure scripts are loaded before executing code
        ExecuteOrDelayUntilScriptLoaded(function () {
            initializePeoplePicker("peoplePickerAuthor");
            loadItems();
        }, "sp.js");

        function initializePeoplePicker(peoplePickerElementId) {
            var schema = {};
            schema['PrincipalAccountType'] = 'User,DL,SecGroup,SPGroup';
            schema['SearchPrincipalSource'] = 15;
            schema['ResolvePrincipalSource'] = 15;
            schema['AllowMultipleValues'] = false;
            schema['MaximumEntitySuggestions'] = 50;
            schema['Width'] = '100%';

            SPClientPeoplePicker_InitStandaloneControlWrapper(peoplePickerElementId, null, schema);
        }

        function getUserLoginFromPeoplePicker() {
            var peoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
            if (!peoplePicker || peoplePicker.GetAllUserInfo().length === 0) return null;

            var userInfo = peoplePicker.GetAllUserInfo()[0];
            return userInfo.Key;
        }

        function loadItems() {
            var clientContext = SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var camlQuery = new SP.CamlQuery();
            var listItems = list.getItems(camlQuery);

            clientContext.load(listItems, 'Include(Id, Title, PublicationDate, AuthorName, ISBN)');
            clientContext.executeQueryAsync(function () {
                var tableBody = document.querySelector("#bookTable tbody");
                tableBody.innerHTML = "";

                var enumerator = listItems.getEnumerator();
                while (enumerator.moveNext()) {
                    var item = enumerator.get_current();
                    var id = item.get_id();
                    var bookName = item.get_item("Title");
                    var pubDate = item.get_item("PublicationDate");
                    var authorUser = item.get_item("AuthorName");
                    var authorName = authorUser ? authorUser.get_lookupValue() : "";
                    var isbn = item.get_item("ISBN");

                    var formattedDate = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";

                    var row = `<tr>
                        <td>
                            <button class='btn btn-sm btn-outline-primary me-1' onclick='editItem(${id})'>Select</button>
                            <button class='btn btn-sm btn-outline-danger' onclick='deleteItem(${id})'>Delete</button>
                        </td>
                        <td>${bookName}</td>
                        <td>${formattedDate}</td>
                        <td>${authorName}</td>
                        <td>${isbn}</td>
                    </tr>`;

                    tableBody.innerHTML += row;
                }
            }, onQueryFail);
        }

        function onQueryFail(sender, args) {
            alert("Error: " + args.get_message());
        }

        function editItem(itemId) {
            var clientContext = new SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            clientContext.load(listItem, 'Include(Title, PublicationDate, AuthorName, ISBN)');
            clientContext.executeQueryAsync(function () {
                document.getElementById("itemId").value = listItem.get_id();
                document.getElementById("bookName").value = listItem.get_item("Title");

                var pubDate = listItem.get_item("PublicationDate");
                document.getElementById("pubDate").value = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";

                document.getElementById("isbn").value = listItem.get_item("ISBN");

                // Clear and re-initialize People Picker
                document.getElementById("peoplePickerAuthor").innerHTML = "";
                initializePeoplePicker("peoplePickerAuthor");

                // Wait a bit to allow picker to initialize before setting user
                setTimeout(function () {
                    var author = listItem.get_item("AuthorName");
                    if (author) {
                        var peoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
                        peoplePicker.AddUserKeys(author.get_lookupValue());
                    }
                }, 500);
            }, onQueryFail);
        }

        function updateItem() {
            var itemId = document.getElementById("itemId").value;
            var bookName = document.getElementById("bookName").value.trim();
            var pubDate = document.getElementById("pubDate").value;
            var isbn = document.getElementById("isbn").value.trim();
            var authorLogin = getUserLoginFromPeoplePicker();

            if (!bookName || !pubDate || !isbn || !authorLogin) {
                alert("Please fill all fields and select a valid author.");
                return;
            }

            var ctx = SP.ClientContext.get_current();
            var web = ctx.get_web();
            var list = web.get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);

            var user = web.ensureUser(authorLogin);
            ctx.load(user);

            ctx.executeQueryAsync(function () {
                var userValue = new SP.FieldUserValue();
                userValue.set_lookupId(user.get_id());

                listItem.set_item("Title", bookName);
                listItem.set_item("PublicationDate", new Date(pubDate));
                listItem.set_item("AuthorName", userValue);
                listItem.set_item("ISBN", isbn);

                listItem.update();
                ctx.executeQueryAsync(function () {
                    alert("Book updated successfully!");
                    loadItems();
                }, onQueryFail);
            }, onQueryFail);
        }

        function deleteItem(itemId) {
            if (!confirm("Are you sure you want to delete this book?")) return;

            var ctx = new SP.ClientContext.get_current();
            var list = ctx.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            listItem.deleteObject();

            ctx.executeQueryAsync(function () {
                alert("Book deleted successfully!");
                loadItems();
            }, function (sender, args) {
                alert("Delete failed: " + args.get_message());
            });
        }
    </script>
</body>
</html>






<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Book Management List - Update & Delete Items</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- SharePoint JSOM + People Picker Scripts -->
    <script type="text/javascript" src="/_layouts/15/sp.runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/sp.js"></script>
    <script type="text/javascript" src="/_layouts/15/clienttemplates.js"></script>
    <script type="text/javascript" src="/_layouts/15/clientforms.js"></script>
    <script type="text/javascript" src="/_layouts/15/clientpeoplepicker.js"></script>
    <script type="text/javascript" src="/_layouts/15/autofill.js"></script>
</head>
<body class="bg-light p-4">
    <div class="container">
        <h2 class="mb-4 text-center text-primary">Book Management</h2>

        <div class="table-responsive mb-5">
            <table class="table table-bordered table-striped align-middle text-center" id="bookTable">
                <thead class="table-dark">
                    <tr>
                        <th>Actions</th>
                        <th>Book Name</th>
                        <th>Publication Date</th>
                        <th>Author Name</th>
                        <th>ISBN</th>
                    </tr>
                </thead>
                <tbody class="table-group-divider"></tbody>
            </table>
        </div>

        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Update Book Details</h4>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="bookName" class="form-label">Book Name</label>
                        <input type="text" id="bookName" class="form-control" placeholder="Enter Book Name" />
                    </div>
                    <div class="col-md-6">
                        <label for="pubDate" class="form-label">Publication Date</label>
                        <input type="date" id="pubDate" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <label for="peoplePickerAuthor" class="form-label">Author (Select from Directory)</label>
                        <div id="peoplePickerAuthor"></div>
                    </div>
                    <div class="col-md-6">
                        <label for="isbn" class="form-label">ISBN</label>
                        <input type="text" id="isbn" class="form-control" placeholder="Enter ISBN" />
                    </div>
                </div>
                <input type="hidden" id="itemId" />
                <div class="mt-4 text-end">
                    <button class="btn btn-success" onclick="updateItem()">Update Book</button>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function () {
            initializePeoplePicker("peoplePickerAuthor");
            loadItems();
        });

        function initializePeoplePicker(peoplePickerElementId) {
            var schema = {};
            schema['PrincipalAccountType'] = 'User,DL,SecGroup,SPGroup';
            schema['SearchPrincipalSource'] = 15;
            schema['ResolvePrincipalSource'] = 15;
            schema['AllowMultipleValues'] = false;
            schema['MaximumEntitySuggestions'] = 50;
            schema['Width'] = '100%';

            SPClientPeoplePicker_InitStandaloneControlWrapper(peoplePickerElementId, null, schema);
        }

        function getUserLoginFromPeoplePicker() {
            var peoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
            if (!peoplePicker || peoplePicker.GetAllUserInfo().length === 0) return null;

            var userInfo = peoplePicker.GetAllUserInfo()[0];
            return userInfo.Key;
        }

        function loadItems() {
            var clientContext = SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var camlQuery = new SP.CamlQuery();
            window.listItems = list.getItems(camlQuery);
            clientContext.load(listItems);
            clientContext.executeQueryAsync(onLoadSuccess, onQueryFail);
        }

        function onLoadSuccess() {
            var tableBody = document.querySelector("#bookTable tbody");
            tableBody.innerHTML = "";

            var enumerator = listItems.getEnumerator();
            while (enumerator.moveNext()) {
                var item = enumerator.get_current();
                var id = item.get_id();
                var bookName = item.get_item("Title");
                var pubDate = item.get_item("PublicationDate");
                var authorUser = item.get_item("AuthorName");
                var authorName = authorUser ? authorUser.get_lookupValue() : "";
                var isbn = item.get_item("ISBN");

                var formattedDate = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";

                var row = `<tr>
                    <td>
                        <button class='btn btn-sm btn-outline-primary me-1' onclick='editItem(${id})'>Select</button>
                        <button class='btn btn-sm btn-outline-danger' onclick='deleteItem(${id})'>Delete</button>
                    </td>
                    <td>${bookName}</td>
                    <td>${formattedDate}</td>
                    <td>${authorName}</td>
                    <td>${isbn}</td>
                </tr>`;

                tableBody.innerHTML += row;
            }
        }

        function onQueryFail(sender, args) {
            alert("Error: " + args.get_message());
        }

        function editItem(itemId) {
            var clientContext = new SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            clientContext.load(listItem);
            clientContext.executeQueryAsync(function () {
                document.getElementById("itemId").value = listItem.get_id();
                document.getElementById("bookName").value = listItem.get_item("Title");

                var pubDate = listItem.get_item("PublicationDate");
                document.getElementById("pubDate").value = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";

                document.getElementById("isbn").value = listItem.get_item("ISBN");

                // Clear and re-initialize People Picker
                document.getElementById("peoplePickerAuthor").innerHTML = "";
                initializePeoplePicker("peoplePickerAuthor");

                // Wait a bit to allow picker to initialize before setting user
                setTimeout(function () {
                    var author = listItem.get_item("AuthorName");
                    if (author) {
                        var peoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
                        peoplePicker.AddUserKeys(author.get_lookupValue());
                    }
                }, 500);
            }, onQueryFail);
        }

        function updateItem() {
            var itemId = document.getElementById("itemId").value;
            var bookName = document.getElementById("bookName").value.trim();
            var pubDate = document.getElementById("pubDate").value;
            var isbn = document.getElementById("isbn").value.trim();
            var authorLogin = getUserLoginFromPeoplePicker();

            if (!bookName || !pubDate || !isbn || !authorLogin) {
                alert("Please fill all fields and select a valid author.");
                return;
            }

            var ctx = SP.ClientContext.get_current();
            var web = ctx.get_web();
            var list = web.get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);

            var user = web.ensureUser(authorLogin);
            ctx.load(user);

            ctx.executeQueryAsync(function () {
                var userValue = new SP.FieldUserValue();
                userValue.set_lookupId(user.get_id());

                listItem.set_item("Title", bookName);
                listItem.set_item("PublicationDate", new Date(pubDate));
                listItem.set_item("AuthorName", userValue);
                listItem.set_item("ISBN", isbn);

                listItem.update();
                ctx.executeQueryAsync(function () {
                    alert("Book updated successfully!");
                    loadItems();
                }, onQueryFail);
            }, onQueryFail);
        }

        function deleteItem(itemId) {
            if (!confirm("Are you sure you want to delete this book?")) return;

            var ctx = new SP.ClientContext.get_current();
            var list = ctx.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            listItem.deleteObject();

            ctx.executeQueryAsync(function () {
                alert("Book deleted successfully!");
                loadItems();
            }, function (sender, args) {
                alert("Delete failed: " + args.get_message());
            });
        }
    </script>
</body>
</html>










Great! Since it’s working now, to make the AuthorName input field behave like a People Picker (i.e., allow typing a user name, show suggestions from SharePoint users/groups, and select one), you need to:

1. Replace your authorName <input> field with the SharePoint People Picker control:

<div class="col-md-6">
    <label for="peoplePickerAuthor" class="form-label">Author Name</label>
    <div id="peoplePickerAuthor"></div>
</div>

2. Add this script block after the SharePoint JSOM references to initialize the People Picker:

<script type="text/javascript" src="/_layouts/15/clienttemplates.js"></script>
<script type="text/javascript" src="/_layouts/15/clientforms.js"></script>
<script type="text/javascript" src="/_layouts/15/clientpeoplepicker.js"></script>
<script type="text/javascript" src="/_layouts/15/autofill.js"></script>

<script>
    function initializePeoplePicker(peoplePickerElementId) {
        var schema = {};
        schema['PrincipalAccountType'] = 'User,DL,SecGroup,SPGroup';
        schema['SearchPrincipalSource'] = 15;
        schema['ResolvePrincipalSource'] = 15;
        schema['AllowMultipleValues'] = false;
        schema['MaximumEntitySuggestions'] = 50;
        schema['Width'] = '100%';

        SPClientPeoplePicker_InitStandaloneControlWrapper(peoplePickerElementId, null, schema);
    }

    // Call this when DOM is ready
    document.addEventListener("DOMContentLoaded", function () {
        initializePeoplePicker("peoplePickerAuthor");
    });

    // Get selected user from people picker
    function getUserLoginFromPeoplePicker() {
        var peoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
        if (!peoplePicker || peoplePicker.GetAllUserInfo().length === 0) return null;

        var userInfo = peoplePicker.GetAllUserInfo()[0];
        return userInfo.Key; // returns login name
    }
</script>

3. Update your updateItem() function to use the selected user:

Replace this line:

var authorName = document.getElementById("authorName").value;

With:

var authorLoginName = getUserLoginFromPeoplePicker();
if (!authorLoginName) {
    alert("Please select an author from the People Picker.");
    return;
}
var userValue = SP.FieldUserValue.fromUser(authorLoginName);
listItem.set_item("AuthorName", userValue);

This way, users can search and select SharePoint users or groups using a dropdown-style People Picker UI.

Would you like me to provide the final merged code with this integrated?






<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Book Management List - Update & Delete Items</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script type="text/javascript" src="/_layouts/15/sp.runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/sp.js"></script>
</head>
<body class="bg-light p-4">
    <div class="container">
        <h2 class="mb-4 text-center text-primary">Book Management</h2>

        <div class="table-responsive mb-5">
            <table class="table table-bordered table-striped align-middle text-center" id="bookTable">
                <thead class="table-dark">
                    <tr>
                        <th>Actions</th>
                        <th>Book Name</th>
                        <th>Publication Date</th>
                        <th>Author Name</th>
                        <th>ISBN</th>
                    </tr>
                </thead>
                <tbody class="table-group-divider"></tbody>
            </table>
        </div>

        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Update Book Details</h4>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="bookName" class="form-label">Book Name</label>
                        <input type="text" id="bookName" class="form-control" placeholder="Enter Book Name" />
                    </div>
                    <div class="col-md-6">
                        <label for="pubDate" class="form-label">Publication Date</label>
                        <input type="date" id="pubDate" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <label for="authorName" class="form-label">Author (Login Name or Email)</label>
                        <input type="text" id="authorName" class="form-control" placeholder="e.g. i:0#.f|membership|user@domain.com" />
                    </div>
                    <div class="col-md-6">
                        <label for="isbn" class="form-label">ISBN</label>
                        <input type="text" id="isbn" class="form-control" placeholder="Enter ISBN" />
                    </div>
                </div>
                <input type="hidden" id="itemId" />
                <div class="mt-4 text-end">
                    <button class="btn btn-success" onclick="updateItem()">Update Book</button>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function () {
            loadItems();
        });

        function loadItems() {
            var clientContext = SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var camlQuery = new SP.CamlQuery();
            window.listItems = list.getItems(camlQuery);
            clientContext.load(listItems);
            clientContext.executeQueryAsync(onLoadSuccess, onQueryFail);
        }

        function onLoadSuccess() {
            var tableBody = document.querySelector("#bookTable tbody");
            tableBody.innerHTML = "";

            var enumerator = listItems.getEnumerator();
            while (enumerator.moveNext()) {
                var item = enumerator.get_current();
                var id = item.get_id();
                var bookName = item.get_item("Title");
                var pubDate = item.get_item("PublicationDate");
                var authorUser = item.get_item("AuthorName");
                var authorName = authorUser ? authorUser.get_lookupValue() : "";
                var isbn = item.get_item("ISBN");

                var formattedDate = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";

                var row = `<tr>
                    <td>
                        <button class='btn btn-sm btn-outline-primary me-1' onclick='editItem(${id})'>Select</button>
                        <button class='btn btn-sm btn-outline-danger' onclick='deleteItem(${id})'>Delete</button>
                    </td>
                    <td>${bookName}</td>
                    <td>${formattedDate}</td>
                    <td>${authorName}</td>
                    <td>${isbn}</td>
                </tr>`;

                tableBody.innerHTML += row;
            }
        }

        function onQueryFail(sender, args) {
            alert("Error: " + args.get_message());
        }

        function editItem(itemId) {
            var clientContext = new SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            clientContext.load(listItem);
            clientContext.executeQueryAsync(function () {
                document.getElementById("itemId").value = listItem.get_id();
                document.getElementById("bookName").value = listItem.get_item("Title");
                var pubDate = listItem.get_item("PublicationDate");
                document.getElementById("pubDate").value = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";
                var author = listItem.get_item("AuthorName");
                document.getElementById("authorName").value = author ? author.get_lookupValue() : "";
                document.getElementById("isbn").value = listItem.get_item("ISBN");
            }, onQueryFail);
        }

        function updateItem() {
            var itemId = document.getElementById("itemId").value;
            var bookName = document.getElementById("bookName").value.trim();
            var pubDate = document.getElementById("pubDate").value;
            var authorLogin = document.getElementById("authorName").value.trim();
            var isbn = document.getElementById("isbn").value.trim();

            if (!bookName || !pubDate || !authorLogin || !isbn) {
                alert("Please fill all fields");
                return;
            }

            var ctx = SP.ClientContext.get_current();
            var web = ctx.get_web();
            var list = web.get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);

            var user = web.ensureUser(authorLogin);
            ctx.load(user);

            ctx.executeQueryAsync(function () {
                var userValue = new SP.FieldUserValue();
                userValue.set_lookupId(user.get_id());

                listItem.set_item("Title", bookName);
                listItem.set_item("PublicationDate", new Date(pubDate));
                listItem.set_item("AuthorName", userValue);
                listItem.set_item("ISBN", isbn);

                listItem.update();
                ctx.executeQueryAsync(function () {
                    alert("Book updated successfully!");
                    loadItems();
                }, onQueryFail);
            }, onQueryFail);
        }

        function deleteItem(itemId) {
            if (!confirm("Are you sure you want to delete this book?")) return;

            var ctx = new SP.ClientContext.get_current();
            var list = ctx.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            listItem.deleteObject();

            ctx.executeQueryAsync(function () {
                alert("Book deleted successfully!");
                loadItems();
            }, function (sender, args) {
                alert("Delete failed: " + args.get_message());
            });
        }
    </script>
</body>
</html>







<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Book Management List - Update & Delete Items</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- SharePoint JSOM scripts -->
    <script type="text/javascript" src="/_layouts/15/sp.runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/sp.js"></script>
</head>
<body class="bg-light p-4">

    <div class="container">
        <h2 class="mb-4 text-center text-primary">Book Management</h2>

        <!-- Table to display list items -->
        <div class="table-responsive mb-5">
            <table class="table table-bordered table-striped align-middle text-center" id="bookTable">
                <thead class="table-dark">
                    <tr>
                        <th>Actions</th>
                        <th>Book Name</th>
                        <th>Publication Date</th>
                        <th>Author Name</th>
                        <th>ISBN</th>
                    </tr>
                </thead>
                <tbody class="table-group-divider"></tbody>
            </table>
        </div>

        <!-- Update section -->
        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Update Book Details</h4>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="bookName" class="form-label">Book Name</label>
                        <input type="text" id="bookName" class="form-control" placeholder="Enter Book Name" />
                    </div>
                    <div class="col-md-6">
                        <label for="pubDate" class="form-label">Publication Date</label>
                        <input type="date" id="pubDate" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <label for="authorName" class="form-label">Author Name</label>
                        <input type="text" id="authorName" class="form-control" placeholder="Enter Author Name" />
                    </div>
                    <div class="col-md-6">
                        <label for="isbn" class="form-label">ISBN</label>
                        <input type="text" id="isbn" class="form-control" placeholder="Enter ISBN" />
                    </div>
                </div>
                <input type="hidden" id="itemId" />
                <div class="mt-4 text-end">
                    <button class="btn btn-success" onclick="updateItem()">Update Book</button>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript Logic -->
    <script type="text/javascript">
        // Load items when the page is ready
        document.addEventListener("DOMContentLoaded", function () {
            loadItems();
        });

        // Load items from SharePoint
        function loadItems() {
            var clientContext = new SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var camlQuery = new SP.CamlQuery();
            this.listItems = list.getItems(camlQuery);
            clientContext.load(listItems);
            clientContext.executeQueryAsync(onLoadSuccess, onQueryFail);
        }

        function onLoadSuccess() {
            var tableBody = document.querySelector("#bookTable tbody");
            tableBody.innerHTML = "";

            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var item = listItemEnumerator.get_current();
                var id = item.get_id();
                var bookName = item.get_item("Title");
                var pubDate = item.get_item("PublicationDate");
                var authorName = item.get_item("AuthorName");
                var isbn = item.get_item("ISBN");

                var formattedDate = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";

                var row = "<tr>";
                row += "<td>";
                row += "<button class='btn btn-sm btn-outline-primary me-1' onclick='editItem(" + id + ")'>Select</button>";
                row += "<button class='btn btn-sm btn-outline-danger' onclick='deleteItem(" + id + ")'>Delete</button>";
                row += "</td>";
                row += "<td>" + bookName + "</td>";
                row += "<td>" + formattedDate + "</td>";
                row += "<td>" + authorName + "</td>";
                row += "<td>" + isbn + "</td>";
                row += "</tr>";

                tableBody.innerHTML += row;
            }
        }

        function onQueryFail(sender, args) {
            alert("Error: " + args.get_message());
        }

        // Populate fields for editing
        function editItem(itemId) {
            var clientContext = new SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            clientContext.load(listItem);
            clientContext.executeQueryAsync(function () {
                document.getElementById("itemId").value = listItem.get_id();
                document.getElementById("bookName").value = listItem.get_item("Title");
                var pubDate = listItem.get_item("PublicationDate");
                document.getElementById("pubDate").value = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";
                document.getElementById("authorName").value = listItem.get_item("AuthorName");
                document.getElementById("isbn").value = listItem.get_item("ISBN");
            }, onQueryFail);
        }

        // Save updated item
        function updateItem() {
            var itemId = document.getElementById("itemId").value;
            var bookName = document.getElementById("bookName").value;
            var pubDate = document.getElementById("pubDate").value;
            var authorName = document.getElementById("authorName").value;
            var isbn = document.getElementById("isbn").value;

            var clientContext = new SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);

            listItem.set_item("Title", bookName);
            listItem.set_item("PublicationDate", new Date(pubDate));
            listItem.set_item("AuthorName", authorName);
            listItem.set_item("ISBN", isbn);

            listItem.update();
            clientContext.executeQueryAsync(function () {
                alert("Book updated successfully!");
                loadItems(); // refresh table
            }, onQueryFail);
        }

        // Delete selected item
        function deleteItem(itemId) {
            if (!confirm("Are you sure you want to delete this book?")) return;

            var clientContext = new SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            listItem.deleteObject();

            clientContext.executeQueryAsync(function () {
                alert("Book deleted successfully!");
                loadItems(); // refresh table
            }, function (sender, args) {
                alert("Delete failed: " + args.get_message());
            });
        }
    </script>
</body>
</html>
