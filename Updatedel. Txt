<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Library Management System</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    /* Existing CSS remains unchanged */
  </style>
</head>
<body>

<!-- Existing HTML structure remains unchanged -->

<script type="text/javascript">
  document.addEventListener("DOMContentLoaded", function () {
    loadAvailableBooks();
  });

  function searchBooks() {
    var searchTerm = document.getElementById("booksearch").value.trim();
    if (!searchTerm) {
      alert("Please enter a search term.");
      return;
    }

    var clientContext = new SP.ClientContext.get_current();
    var list = clientContext.get_web().get_lists().getByTitle("Book Management");

    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml(`
      <View>
        <Query>
          <Where>
            <Or>
              <Or>
                <Contains>
                  <FieldRef Name='BookName' />
                  <Value Type='Text'>${SP.Utilities.HttpUtility.htmlEncode(searchTerm)}</Value>
                </Contains>
                <Contains>
                  <FieldRef Name='AuthorName' Lookup='True' />
                  <Value Type='Text'>${SP.Utilities.HttpUtility.htmlEncode(searchTerm)}</Value>
                </Contains>
              </Or>
              <Eq>
                <FieldRef Name='ISBN' />
                <Value Type='Number'>${SP.Utilities.HttpUtility.htmlEncode(searchTerm)}</Value>
              </Eq>
            </Or>
          </Where>
        </Query>
      </View>
    `);

    var listItems = list.getItems(camlQuery);
    clientContext.load(listItems);
    clientContext.executeQueryAsync(
      function () {
        renderSearchResults(listItems);
      },
      function (sender, args) {
        alert("Search failed: " + args.get_message());
      }
    );
  }

  function renderSearchResults(listItems) {
    var container = document.getElementById("searchResults");
    container.innerHTML = "";

    var enumerator = listItems.getEnumerator();
    if (!enumerator.moveNext()) {
      container.innerHTML = "<div class='col-12 alert alert-warning'>No books found matching your search.</div>";
      return;
    }

    enumerator.reset();
    while (enumerator.moveNext()) {
      var item = enumerator.get_current();
      container.innerHTML += generateBookCardHTML(item);
    }
  }

  function loadAvailableBooks() {
    var clientContext = new SP.ClientContext.get_current();
    var list = clientContext.get_web().get_lists().getByTitle("Book Management");
    var camlQuery = new SP.CamlQuery();
    var listItems = list.getItems(camlQuery);

    clientContext.load(listItems);
    clientContext.executeQueryAsync(
      function () {
        renderAvailableBooks(listItems);
      },
      function (sender, args) {
        alert("Failed to load available books: " + args.get_message());
      }
    );
  }

  function renderAvailableBooks(listItems) {
    var container = document.getElementById("availableBooks");
    container.innerHTML = "";

    var enumerator = listItems.getEnumerator();
    var count = 0;

    while (enumerator.moveNext()) {
      var item = enumerator.get_current();
      container.innerHTML += generateBookCardHTML(item);
      count++;
    }

    document.getElementById("availableCount").innerText = count;
  }

  function generateBookCardHTML(item) {
    try {
      var bookName = item.get_item("BookName") || "";
      var isbn = item.get_item("ISBN") || "";
      var pubDate = item.get_item("PublicationDate");
      var formattedDate = pubDate ? new Date(pubDate).toLocaleDateString() : "N/A";
      
      // Proper handling of Person/Group field
      var authorField = item.get_item("AuthorName");
      var authorName = "N/A";
      if (authorField) {
        authorName = authorField.get_lookupValue(); // Get display name
      }

      return `
        <div class="col mb-4">
          <div class="card h-100 shadow-sm">
            <div class="card-body text-center">
              <i class="fas fa-book fa-2x text-info mb-2"></i>
              <h5 class="card-title text-primary">${escapeHTML(bookName)}</h5>
              <p class="card-text"><strong>Author:</strong> ${escapeHTML(authorName)}</p>
              <p class="card-text"><strong>ISBN:</strong> ${escapeHTML(isbn.toString())}</p>
              <p class="card-text"><strong>Published:</strong> ${formattedDate}</p>
            </div>
          </div>
        </div>
      `;
    } catch (e) {
      console.error("Error generating book card:", e);
      return "";
    }
  }

  // Helper function for safe HTML rendering
  function escapeHTML(str) {
    return str.toString()
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }
</script>

<!-- Rest of the HTML remains unchanged -->
</body>
</html>




<!DOCTYPE html>
<html>
<head>
    <title>Book Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
    <style>
        .action-buttons { white-space: nowrap; }
        .status-message { margin: 10px 0; padding: 10px; }
        .book-table { margin-top: 20px; }
        .modal-input { margin-bottom: 15px; }
    </style>
</head>
<body class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h3>Book Management</h3>
        </div>
        <div class="card-body">
            <button class="btn btn-success mb-3" onclick="loadBooks()">Refresh List</button>
            <div id="statusMessage" class="status-message"></div>
            <table class="table table-striped book-table">
                <thead>
                    <tr>
                        <th>Book Name</th>
                        <th>ISBN</th>
                        <th>Author</th>
                        <th>Publication Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="booksTableBody"></tbody>
            </table>
        </div>
    </div>

    <!-- Edit Modal -->
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Edit Book</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="modal-input">
                        <label class="form-label">Book Name</label>
                        <input type="text" id="editBookName" class="form-control" required>
                    </div>
                    <div class="modal-input">
                        <label class="form-label">ISBN</label>
                        <input type="number" id="editISBN" class="form-control" required>
                    </div>
                    <div class="modal-input">
                        <label class="form-label">Author</label>
                        <input type="text" id="editAuthor" class="form-control" required>
                    </div>
                    <div class="modal-input">
                        <label class="form-label">Publication Date</label>
                        <input type="date" id="editPubDate" class="form-control" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="saveChanges()">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentItemId = null;

        // Load books on page load
        $(document).ready(function() {
            loadBooks();
        });

        function loadBooks() {
            const ctx = new SP.ClientContext.get_current();
            const web = ctx.get_web();
            const list = web.get_lists().getByTitle("Book Management");
            const query = new SP.CamlQuery();
            query.set_viewXml('<View><Query><OrderBy><FieldRef Name="ID" /></OrderBy></Query></View>');
            const items = list.getItems(query);
            
            ctx.load(items);
            
            ctx.executeQueryAsync(
                function() {
                    populateTable(items);
                },
                function(sender, args) {
                    showMessage(`Error loading books: ${args.get_message()}`, "danger");
                }
            );
        }

        function populateTable(items) {
            const tbody = $("#booksTableBody");
            tbody.empty();
            
            const enumerator = items.getEnumerator();
            
            while (enumerator.moveNext()) {
                const item = enumerator.get_current();
                const id = item.get_id();
                const bookName = item.get_item("BookName");
                const isbn = item.get_item("ISBN");
                const author = item.get_item("AuthorName").get_lookupValue();
                const pubDate = new Date(item.get_item("PublicationDate")).toLocaleDateString();

                const row = `
                    <tr>
                        <td>${bookName}</td>
                        <td>${isbn}</td>
                        <td>${author}</td>
                        <td>${pubDate}</td>
                        <td class="action-buttons">
                            <button class="btn btn-sm btn-warning" onclick="openEditModal(${id})">Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="deleteItem(${id})">Delete</button>
                        </td>
                    </tr>
                `;
                
                tbody.append(row);
            }
        }

        function openEditModal(itemId) {
            currentItemId = itemId;
            const ctx = new SP.ClientContext.get_current();
            const item = ctx.get_web().get_lists().getByTitle("Book Management").getItemById(itemId);
            
            ctx.load(item);
            
            ctx.executeQueryAsync(
                function() {
                    $('#editBookName').val(item.get_item("BookName"));
                    $('#editISBN').val(item.get_item("ISBN"));
                    $('#editAuthor').val(item.get_item("AuthorName").get_lookupValue());
                    
                    const pubDate = new Date(item.get_item("PublicationDate"));
                    $('#editPubDate').val(pubDate.toISOString().split('T')[0]);
                    
                    new bootstrap.Modal(document.getElementById('editModal')).show();
                },
                function(sender, args) {
                    showMessage(`Error loading item: ${args.get_message()}`, "danger");
                }
            );
        }

        function saveChanges() {
            const ctx = new SP.ClientContext.get_current();
            const list = ctx.get_web().get_lists().getByTitle("Book Management");
            const item = list.getItemById(currentItemId);
            
            // Get user ID for AuthorName
            const userLogin = $('#editAuthor').val().trim();
            const user = ctx.get_web().ensureUser(userLogin);
            ctx.load(user);
            
            ctx.executeQueryAsync(
                function() {
                    // Update item after getting user ID
                    item.set_item("BookName", $('#editBookName').val());
                    item.set_item("ISBN", parseInt($('#editISBN').val()));
                    item.set_item("AuthorName", user.get_id());
                    item.set_item("PublicationDate", new Date($('#editPubDate').val()));
                    
                    item.update();
                    
                    ctx.executeQueryAsync(
                        function() {
                            showMessage("Book updated successfully!", "success");
                            loadBooks();
                            $('#editModal').modal('hide');
                        },
                        function(sender, args) {
                            showMessage(`Error saving changes: ${args.get_message()}`, "danger");
                        }
                    );
                },
                function(sender, args) {
                    showMessage(`Error finding user: ${args.get_message()}`, "danger");
                }
            );
        }

        function deleteItem(itemId) {
            if (confirm("Are you sure you want to delete this book?")) {
                const ctx = new SP.ClientContext.get_current();
                const list = ctx.get_web().get_lists().getByTitle("Book Management");
                const item = list.getItemById(itemId);
                
                item.deleteObject();
                
                ctx.executeQueryAsync(
                    function() {
                        showMessage("Book deleted successfully!", "success");
                        loadBooks();
                    },
                    function(sender, args) {
                        showMessage(`Error deleting item: ${args.get_message()}`, "danger");
                    }
                );
            }
        }

        function showMessage(message, type) {
            const statusDiv = $('#statusMessage');
            statusDiv.removeClass("alert-success alert-danger")
                     .addClass(`alert alert-${type}`)
                     .text(message)
                     .fadeIn().delay(3000).fadeOut();
        }
    </script>
</body>
</html>







<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Book Management - Update & Delete</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

  <!-- SharePoint JSOM + People Picker Scripts -->
  <script type="text/javascript" src="/_layouts/15/sp.runtime.js"></script>
  <script type="text/javascript" src="/_layouts/15/sp.js"></script>
  <script type="text/javascript" src="/_layouts/15/clienttemplates.js"></script>
  <script type="text/javascript" src="/_layouts/15/clientforms.js"></script>
  <script type="text/javascript" src="/_layouts/15/clientpeoplepicker.js"></script>
  <script type="text/javascript" src="/_layouts/15/autofill.js"></script>
</head>
<body class="bg-light p-4">
  <div class="container">
    <h2 class="mb-4 text-center text-primary">Book Management</h2>

    <div class="table-responsive mb-5">
      <table class="table table-bordered table-striped text-center" id="bookTable">
        <thead class="table-dark">
          <tr>
            <th>Actions</th>
            <th>Book Name</th>
            <th>Publication Date</th>
            <th>Author</th>
            <th>ISBN</th>
          </tr>
        </thead>
        <tbody class="table-group-divider"></tbody>
      </table>
    </div>

    <div class="card shadow">
      <div class="card-header bg-primary text-white">
        <h4 class="mb-0">Update Book Details</h4>
      </div>
      <div class="card-body">
        <div class="row g-3">
          <div class="col-md-6">
            <label for="bookName" class="form-label">Book Name</label>
            <input type="text" id="bookName" class="form-control" />
          </div>
          <div class="col-md-6">
            <label for="pubDate" class="form-label">Publication Date</label>
            <input type="date" id="pubDate" class="form-control" />
          </div>
          <div class="col-md-6">
            <label for="peoplePickerAuthor" class="form-label">Author (People Picker)</label>
            <div id="peoplePickerAuthor"></div>
          </div>
          <div class="col-md-6">
            <label for="isbn" class="form-label">ISBN</label>
            <input type="text" id="isbn" class="form-control" />
          </div>
        </div>
        <input type="hidden" id="itemId" />
        <div class="mt-4 text-end">
          <button class="btn btn-success" onclick="updateItem()">Update Book</button>
        </div>
      </div>
    </div>
  </div>

  <script type="text/javascript">
    ExecuteOrDelayUntilScriptLoaded(function () {
      initializePeoplePicker("peoplePickerAuthor");
      loadItems();
    }, "sp.js");

    function initializePeoplePicker(peoplePickerElementId) {
      var schema = {};
      schema['PrincipalAccountType'] = 'User,DL,SecGroup,SPGroup';
      schema['SearchPrincipalSource'] = 15;
      schema['ResolvePrincipalSource'] = 15;
      schema['AllowMultipleValues'] = false;
      schema['MaximumEntitySuggestions'] = 50;
      schema['Width'] = '100%';
      SPClientPeoplePicker_InitStandaloneControlWrapper(peoplePickerElementId, null, schema);
    }

    function getUserLoginFromPeoplePicker() {
      var peoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
      if (!peoplePicker || peoplePicker.GetAllUserInfo().length === 0) return null;
      return peoplePicker.GetAllUserInfo()[0].Key;
    }

    function loadItems() {
      var ctx = SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      var query = new SP.CamlQuery();
      var items = list.getItems(query);

      ctx.load(items, 'Include(Id, BookName, ISBN, Publication_x0020_date, AuthorName)');
      ctx.executeQueryAsync(function () {
        var tbody = document.querySelector("#bookTable tbody");
        tbody.innerHTML = "";
        var enumerator = items.getEnumerator();

        while (enumerator.moveNext()) {
          var item = enumerator.get_current();
          var id = item.get_id();
          var name = item.get_item("BookName");
          var isbn = item.get_item("ISBN");
          var pubDate = item.get_item("Publication_x0020_date");
          var author = item.get_item("AuthorName");
          var authorName = author ? author.get_lookupValue() : "";

          var formattedDate = pubDate ? new Date(pubDate).toISOString().split("T")[0] : "";

          var row = `
            <tr>
              <td>
                <button class="btn btn-sm btn-outline-primary" onclick="editItem(${id})">Select</button>
                <button class="btn btn-sm btn-outline-danger ms-2" onclick="deleteItem(${id})">Delete</button>
              </td>
              <td>${name}</td>
              <td>${formattedDate}</td>
              <td>${authorName}</td>
              <td>${isbn}</td>
            </tr>`;
          tbody.innerHTML += row;
        }
      }, onQueryFail);
    }

    function editItem(id) {
      var ctx = new SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      var item = list.getItemById(id);

      ctx.load(item, 'BookName, ISBN, Publication_x0020_date, AuthorName');
      ctx.executeQueryAsync(function () {
        document.getElementById("itemId").value = id;
        document.getElementById("bookName").value = item.get_item("BookName");
        document.getElementById("isbn").value = item.get_item("ISBN");

        var pubDate = item.get_item("Publication_x0020_date");
        document.getElementById("pubDate").value = pubDate ? new Date(pubDate).toISOString().split("T")[0] : "";

        document.getElementById("peoplePickerAuthor").innerHTML = "";
        initializePeoplePicker("peoplePickerAuthor");

        setTimeout(() => {
          var author = item.get_item("AuthorName");
          if (author) {
            var picker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
            picker.AddUserKeys(author.get_lookupValue());
          }
        }, 500);
      }, onQueryFail);
    }

    function updateItem() {
      var id = document.getElementById("itemId").value;
      var bookName = document.getElementById("bookName").value.trim();
      var isbn = document.getElementById("isbn").value.trim();
      var pubDate = document.getElementById("pubDate").value;
      var authorLogin = getUserLoginFromPeoplePicker();

      if (!id || !bookName || !isbn || !pubDate || !authorLogin) {
        alert("All fields are required, including selecting an Author.");
        return;
      }

      var ctx = new SP.ClientContext.get_current();
      var web = ctx.get_web();
      var list = web.get_lists().getByTitle("Book Management");
      var item = list.getItemById(id);
      var user = web.ensureUser(authorLogin);

      ctx.load(user);
      ctx.executeQueryAsync(function () {
        var userVal = new SP.FieldUserValue();
        userVal.set_lookupId(user.get_id());

        item.set_item("BookName", bookName);
        item.set_item("ISBN", isbn);
        item.set_item("Publication_x0020_date", new Date(pubDate));
        item.set_item("AuthorName", userVal);

        item.update();
        ctx.executeQueryAsync(function () {
          alert("Book updated successfully.");
          loadItems();
        }, onQueryFail);
      }, onQueryFail);
    }

    function deleteItem(id) {
      if (!confirm("Are you sure you want to delete this book?")) return;

      var ctx = new SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      var item = list.getItemById(id);

      item.deleteObject();
      ctx.executeQueryAsync(function () {
        alert("Book deleted.");
        loadItems();
      }, onQueryFail);
    }

    function onQueryFail(sender, args) {
      alert("Error: " + args.get_message());
    }
  </script>
</body>
</html>








<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Book Management List - Update & Delete Items</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- SharePoint JSOM + People Picker Scripts -->
    <script type="text/javascript" src="/_layouts/15/sp.runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/sp.js"></script>
    <script type="text/javascript" src="/_layouts/15/clienttemplates.js"></script>
    <script type="text/javascript" src="/_layouts/15/clientforms.js"></script>
    <script type="text/javascript" src="/_layouts/15/clientpeoplepicker.js"></script>
    <script type="text/javascript" src="/_layouts/15/autofill.js"></script>
</head>
<body class="bg-light p-4">
    <div class="container">
        <h2 class="mb-4 text-center text-primary">Book Management</h2>

        <div class="table-responsive mb-5">
            <table class="table table-bordered table-striped align-middle text-center" id="bookTable">
                <thead class="table-dark">
                    <tr>
                        <th>Actions</th>
                        <th>Book Name</th>
                        <th>Publication Date</th>
                        <th>Author Name</th>
                        <th>ISBN</th>
                    </tr>
                </thead>
                <tbody class="table-group-divider"></tbody>
            </table>
        </div>

        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Update Book Details</h4>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="bookName" class="form-label">Book Name</label>
                        <input type="text" id="bookName" class="form-control" placeholder="Enter Book Name" />
                    </div>
                    <div class="col-md-6">
                        <label for="pubDate" class="form-label">Publication Date</label>
                        <input type="date" id="pubDate" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <label for="peoplePickerAuthor" class="form-label">Author (Select from Directory)</label>
                        <div id="peoplePickerAuthor"></div>
                    </div>
                    <div class="col-md-6">
                        <label for="isbn" class="form-label">ISBN</label>
                        <input type="text" id="isbn" class="form-control" placeholder="Enter ISBN" />
                    </div>
                </div>
                <input type="hidden" id="itemId" />
                <div class="mt-4 text-end">
                    <button class="btn btn-success" onclick="updateItem()">Update Book</button>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        // Ensure scripts are loaded before executing code
        ExecuteOrDelayUntilScriptLoaded(function () {
            initializePeoplePicker("peoplePickerAuthor");
            loadItems();
        }, "sp.js");

        function initializePeoplePicker(peoplePickerElementId) {
            var schema = {};
            schema['PrincipalAccountType'] = 'User,DL,SecGroup,SPGroup';
            schema['SearchPrincipalSource'] = 15;
            schema['ResolvePrincipalSource'] = 15;
            schema['AllowMultipleValues'] = false;
            schema['MaximumEntitySuggestions'] = 50;
            schema['Width'] = '100%';

            SPClientPeoplePicker_InitStandaloneControlWrapper(peoplePickerElementId, null, schema);
        }

        function getUserLoginFromPeoplePicker() {
            var peoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
            if (!peoplePicker || peoplePicker.GetAllUserInfo().length === 0) return null;

            var userInfo = peoplePicker.GetAllUserInfo()[0];
            return userInfo.Key;
        }

        function loadItems() {
            var clientContext = SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var camlQuery = new SP.CamlQuery();
            var listItems = list.getItems(camlQuery);

            clientContext.load(listItems, 'Include(Id, Title, PublicationDate, AuthorName, ISBN)');
            clientContext.executeQueryAsync(function () {
                var tableBody = document.querySelector("#bookTable tbody");
                tableBody.innerHTML = "";

                var enumerator = listItems.getEnumerator();
                while (enumerator.moveNext()) {
                    var item = enumerator.get_current();
                    var id = item.get_id();
                    var bookName = item.get_item("Title");
                    var pubDate = item.get_item("PublicationDate");
                    var authorUser = item.get_item("AuthorName");
                    var authorName = authorUser ? authorUser.get_lookupValue() : "";
                    var isbn = item.get_item("ISBN");

                    var formattedDate = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";

                    var row = `<tr>
                        <td>
                            <button class='btn btn-sm btn-outline-primary me-1' onclick='editItem(${id})'>Select</button>
                            <button class='btn btn-sm btn-outline-danger' onclick='deleteItem(${id})'>Delete</button>
                        </td>
                        <td>${bookName}</td>
                        <td>${formattedDate}</td>
                        <td>${authorName}</td>
                        <td>${isbn}</td>
                    </tr>`;

                    tableBody.innerHTML += row;
                }
            }, onQueryFail);
        }

        function onQueryFail(sender, args) {
            alert("Error: " + args.get_message());
        }

        function editItem(itemId) {
            var clientContext = new SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            clientContext.load(listItem, 'Include(Title, PublicationDate, AuthorName, ISBN)');
            clientContext.executeQueryAsync(function () {
                document.getElementById("itemId").value = listItem.get_id();
                document.getElementById("bookName").value = listItem.get_item("Title");

                var pubDate = listItem.get_item("PublicationDate");
                document.getElementById("pubDate").value = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";

                document.getElementById("isbn").value = listItem.get_item("ISBN");

                // Clear and re-initialize People Picker
                document.getElementById("peoplePickerAuthor").innerHTML = "";
                initializePeoplePicker("peoplePickerAuthor");

                // Wait a bit to allow picker to initialize before setting user
                setTimeout(function () {
                    var author = listItem.get_item("AuthorName");
                    if (author) {
                        var peoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
                        peoplePicker.AddUserKeys(author.get_lookupValue());
                    }
                }, 500);
            }, onQueryFail);
        }

        function updateItem() {
            var itemId = document.getElementById("itemId").value;
            var bookName = document.getElementById("bookName").value.trim();
            var pubDate = document.getElementById("pubDate").value;
            var isbn = document.getElementById("isbn").value.trim();
            var authorLogin = getUserLoginFromPeoplePicker();

            if (!bookName || !pubDate || !isbn || !authorLogin) {
                alert("Please fill all fields and select a valid author.");
                return;
            }

            var ctx = SP.ClientContext.get_current();
            var web = ctx.get_web();
            var list = web.get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);

            var user = web.ensureUser(authorLogin);
            ctx.load(user);

            ctx.executeQueryAsync(function () {
                var userValue = new SP.FieldUserValue();
                userValue.set_lookupId(user.get_id());

                listItem.set_item("Title", bookName);
                listItem.set_item("PublicationDate", new Date(pubDate));
                listItem.set_item("AuthorName", userValue);
                listItem.set_item("ISBN", isbn);

                listItem.update();
                ctx.executeQueryAsync(function () {
                    alert("Book updated successfully!");
                    loadItems();
                }, onQueryFail);
            }, onQueryFail);
        }

        function deleteItem(itemId) {
            if (!confirm("Are you sure you want to delete this book?")) return;

            var ctx = new SP.ClientContext.get_current();
            var list = ctx.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            listItem.deleteObject();

            ctx.executeQueryAsync(function () {
                alert("Book deleted successfully!");
                loadItems();
            }, function (sender, args) {
                alert("Delete failed: " + args.get_message());
            });
        }
    </script>
</body>
</html>






<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Book Management List - Update & Delete Items</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- SharePoint JSOM + People Picker Scripts -->
    <script type="text/javascript" src="/_layouts/15/sp.runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/sp.js"></script>
    <script type="text/javascript" src="/_layouts/15/clienttemplates.js"></script>
    <script type="text/javascript" src="/_layouts/15/clientforms.js"></script>
    <script type="text/javascript" src="/_layouts/15/clientpeoplepicker.js"></script>
    <script type="text/javascript" src="/_layouts/15/autofill.js"></script>
</head>
<body class="bg-light p-4">
    <div class="container">
        <h2 class="mb-4 text-center text-primary">Book Management</h2>

        <div class="table-responsive mb-5">
            <table class="table table-bordered table-striped align-middle text-center" id="bookTable">
                <thead class="table-dark">
                    <tr>
                        <th>Actions</th>
                        <th>Book Name</th>
                        <th>Publication Date</th>
                        <th>Author Name</th>
                        <th>ISBN</th>
                    </tr>
                </thead>
                <tbody class="table-group-divider"></tbody>
            </table>
        </div>

        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Update Book Details</h4>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="bookName" class="form-label">Book Name</label>
                        <input type="text" id="bookName" class="form-control" placeholder="Enter Book Name" />
                    </div>
                    <div class="col-md-6">
                        <label for="pubDate" class="form-label">Publication Date</label>
                        <input type="date" id="pubDate" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <label for="peoplePickerAuthor" class="form-label">Author (Select from Directory)</label>
                        <div id="peoplePickerAuthor"></div>
                    </div>
                    <div class="col-md-6">
                        <label for="isbn" class="form-label">ISBN</label>
                        <input type="text" id="isbn" class="form-control" placeholder="Enter ISBN" />
                    </div>
                </div>
                <input type="hidden" id="itemId" />
                <div class="mt-4 text-end">
                    <button class="btn btn-success" onclick="updateItem()">Update Book</button>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function () {
            initializePeoplePicker("peoplePickerAuthor");
            loadItems();
        });

        function initializePeoplePicker(peoplePickerElementId) {
            var schema = {};
            schema['PrincipalAccountType'] = 'User,DL,SecGroup,SPGroup';
            schema['SearchPrincipalSource'] = 15;
            schema['ResolvePrincipalSource'] = 15;
            schema['AllowMultipleValues'] = false;
            schema['MaximumEntitySuggestions'] = 50;
            schema['Width'] = '100%';

            SPClientPeoplePicker_InitStandaloneControlWrapper(peoplePickerElementId, null, schema);
        }

        function getUserLoginFromPeoplePicker() {
            var peoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
            if (!peoplePicker || peoplePicker.GetAllUserInfo().length === 0) return null;

            var userInfo = peoplePicker.GetAllUserInfo()[0];
            return userInfo.Key;
        }

        function loadItems() {
            var clientContext = SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var camlQuery = new SP.CamlQuery();
            window.listItems = list.getItems(camlQuery);
            clientContext.load(listItems);
            clientContext.executeQueryAsync(onLoadSuccess, onQueryFail);
        }

        function onLoadSuccess() {
            var tableBody = document.querySelector("#bookTable tbody");
            tableBody.innerHTML = "";

            var enumerator = listItems.getEnumerator();
            while (enumerator.moveNext()) {
                var item = enumerator.get_current();
                var id = item.get_id();
                var bookName = item.get_item("Title");
                var pubDate = item.get_item("PublicationDate");
                var authorUser = item.get_item("AuthorName");
                var authorName = authorUser ? authorUser.get_lookupValue() : "";
                var isbn = item.get_item("ISBN");

                var formattedDate = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";

                var row = `<tr>
                    <td>
                        <button class='btn btn-sm btn-outline-primary me-1' onclick='editItem(${id})'>Select</button>
                        <button class='btn btn-sm btn-outline-danger' onclick='deleteItem(${id})'>Delete</button>
                    </td>
                    <td>${bookName}</td>
                    <td>${formattedDate}</td>
                    <td>${authorName}</td>
                    <td>${isbn}</td>
                </tr>`;

                tableBody.innerHTML += row;
            }
        }

        function onQueryFail(sender, args) {
            alert("Error: " + args.get_message());
        }

        function editItem(itemId) {
            var clientContext = new SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            clientContext.load(listItem);
            clientContext.executeQueryAsync(function () {
                document.getElementById("itemId").value = listItem.get_id();
                document.getElementById("bookName").value = listItem.get_item("Title");

                var pubDate = listItem.get_item("PublicationDate");
                document.getElementById("pubDate").value = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";

                document.getElementById("isbn").value = listItem.get_item("ISBN");

                // Clear and re-initialize People Picker
                document.getElementById("peoplePickerAuthor").innerHTML = "";
                initializePeoplePicker("peoplePickerAuthor");

                // Wait a bit to allow picker to initialize before setting user
                setTimeout(function () {
                    var author = listItem.get_item("AuthorName");
                    if (author) {
                        var peoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
                        peoplePicker.AddUserKeys(author.get_lookupValue());
                    }
                }, 500);
            }, onQueryFail);
        }

        function updateItem() {
            var itemId = document.getElementById("itemId").value;
            var bookName = document.getElementById("bookName").value.trim();
            var pubDate = document.getElementById("pubDate").value;
            var isbn = document.getElementById("isbn").value.trim();
            var authorLogin = getUserLoginFromPeoplePicker();

            if (!bookName || !pubDate || !isbn || !authorLogin) {
                alert("Please fill all fields and select a valid author.");
                return;
            }

            var ctx = SP.ClientContext.get_current();
            var web = ctx.get_web();
            var list = web.get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);

            var user = web.ensureUser(authorLogin);
            ctx.load(user);

            ctx.executeQueryAsync(function () {
                var userValue = new SP.FieldUserValue();
                userValue.set_lookupId(user.get_id());

                listItem.set_item("Title", bookName);
                listItem.set_item("PublicationDate", new Date(pubDate));
                listItem.set_item("AuthorName", userValue);
                listItem.set_item("ISBN", isbn);

                listItem.update();
                ctx.executeQueryAsync(function () {
                    alert("Book updated successfully!");
                    loadItems();
                }, onQueryFail);
            }, onQueryFail);
        }

        function deleteItem(itemId) {
            if (!confirm("Are you sure you want to delete this book?")) return;

            var ctx = new SP.ClientContext.get_current();
            var list = ctx.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            listItem.deleteObject();

            ctx.executeQueryAsync(function () {
                alert("Book deleted successfully!");
                loadItems();
            }, function (sender, args) {
                alert("Delete failed: " + args.get_message());
            });
        }
    </script>
</body>
</html>










Great! Since it’s working now, to make the AuthorName input field behave like a People Picker (i.e., allow typing a user name, show suggestions from SharePoint users/groups, and select one), you need to:

1. Replace your authorName <input> field with the SharePoint People Picker control:

<div class="col-md-6">
    <label for="peoplePickerAuthor" class="form-label">Author Name</label>
    <div id="peoplePickerAuthor"></div>
</div>

2. Add this script block after the SharePoint JSOM references to initialize the People Picker:

<script type="text/javascript" src="/_layouts/15/clienttemplates.js"></script>
<script type="text/javascript" src="/_layouts/15/clientforms.js"></script>
<script type="text/javascript" src="/_layouts/15/clientpeoplepicker.js"></script>
<script type="text/javascript" src="/_layouts/15/autofill.js"></script>

<script>
    function initializePeoplePicker(peoplePickerElementId) {
        var schema = {};
        schema['PrincipalAccountType'] = 'User,DL,SecGroup,SPGroup';
        schema['SearchPrincipalSource'] = 15;
        schema['ResolvePrincipalSource'] = 15;
        schema['AllowMultipleValues'] = false;
        schema['MaximumEntitySuggestions'] = 50;
        schema['Width'] = '100%';

        SPClientPeoplePicker_InitStandaloneControlWrapper(peoplePickerElementId, null, schema);
    }

    // Call this when DOM is ready
    document.addEventListener("DOMContentLoaded", function () {
        initializePeoplePicker("peoplePickerAuthor");
    });

    // Get selected user from people picker
    function getUserLoginFromPeoplePicker() {
        var peoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
        if (!peoplePicker || peoplePicker.GetAllUserInfo().length === 0) return null;

        var userInfo = peoplePicker.GetAllUserInfo()[0];
        return userInfo.Key; // returns login name
    }
</script>

3. Update your updateItem() function to use the selected user:

Replace this line:

var authorName = document.getElementById("authorName").value;

With:

var authorLoginName = getUserLoginFromPeoplePicker();
if (!authorLoginName) {
    alert("Please select an author from the People Picker.");
    return;
}
var userValue = SP.FieldUserValue.fromUser(authorLoginName);
listItem.set_item("AuthorName", userValue);

This way, users can search and select SharePoint users or groups using a dropdown-style People Picker UI.

Would you like me to provide the final merged code with this integrated?






<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Book Management List - Update & Delete Items</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script type="text/javascript" src="/_layouts/15/sp.runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/sp.js"></script>
</head>
<body class="bg-light p-4">
    <div class="container">
        <h2 class="mb-4 text-center text-primary">Book Management</h2>

        <div class="table-responsive mb-5">
            <table class="table table-bordered table-striped align-middle text-center" id="bookTable">
                <thead class="table-dark">
                    <tr>
                        <th>Actions</th>
                        <th>Book Name</th>
                        <th>Publication Date</th>
                        <th>Author Name</th>
                        <th>ISBN</th>
                    </tr>
                </thead>
                <tbody class="table-group-divider"></tbody>
            </table>
        </div>

        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Update Book Details</h4>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="bookName" class="form-label">Book Name</label>
                        <input type="text" id="bookName" class="form-control" placeholder="Enter Book Name" />
                    </div>
                    <div class="col-md-6">
                        <label for="pubDate" class="form-label">Publication Date</label>
                        <input type="date" id="pubDate" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <label for="authorName" class="form-label">Author (Login Name or Email)</label>
                        <input type="text" id="authorName" class="form-control" placeholder="e.g. i:0#.f|membership|user@domain.com" />
                    </div>
                    <div class="col-md-6">
                        <label for="isbn" class="form-label">ISBN</label>
                        <input type="text" id="isbn" class="form-control" placeholder="Enter ISBN" />
                    </div>
                </div>
                <input type="hidden" id="itemId" />
                <div class="mt-4 text-end">
                    <button class="btn btn-success" onclick="updateItem()">Update Book</button>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function () {
            loadItems();
        });

        function loadItems() {
            var clientContext = SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var camlQuery = new SP.CamlQuery();
            window.listItems = list.getItems(camlQuery);
            clientContext.load(listItems);
            clientContext.executeQueryAsync(onLoadSuccess, onQueryFail);
        }

        function onLoadSuccess() {
            var tableBody = document.querySelector("#bookTable tbody");
            tableBody.innerHTML = "";

            var enumerator = listItems.getEnumerator();
            while (enumerator.moveNext()) {
                var item = enumerator.get_current();
                var id = item.get_id();
                var bookName = item.get_item("Title");
                var pubDate = item.get_item("PublicationDate");
                var authorUser = item.get_item("AuthorName");
                var authorName = authorUser ? authorUser.get_lookupValue() : "";
                var isbn = item.get_item("ISBN");

                var formattedDate = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";

                var row = `<tr>
                    <td>
                        <button class='btn btn-sm btn-outline-primary me-1' onclick='editItem(${id})'>Select</button>
                        <button class='btn btn-sm btn-outline-danger' onclick='deleteItem(${id})'>Delete</button>
                    </td>
                    <td>${bookName}</td>
                    <td>${formattedDate}</td>
                    <td>${authorName}</td>
                    <td>${isbn}</td>
                </tr>`;

                tableBody.innerHTML += row;
            }
        }

        function onQueryFail(sender, args) {
            alert("Error: " + args.get_message());
        }

        function editItem(itemId) {
            var clientContext = new SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            clientContext.load(listItem);
            clientContext.executeQueryAsync(function () {
                document.getElementById("itemId").value = listItem.get_id();
                document.getElementById("bookName").value = listItem.get_item("Title");
                var pubDate = listItem.get_item("PublicationDate");
                document.getElementById("pubDate").value = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";
                var author = listItem.get_item("AuthorName");
                document.getElementById("authorName").value = author ? author.get_lookupValue() : "";
                document.getElementById("isbn").value = listItem.get_item("ISBN");
            }, onQueryFail);
        }

        function updateItem() {
            var itemId = document.getElementById("itemId").value;
            var bookName = document.getElementById("bookName").value.trim();
            var pubDate = document.getElementById("pubDate").value;
            var authorLogin = document.getElementById("authorName").value.trim();
            var isbn = document.getElementById("isbn").value.trim();

            if (!bookName || !pubDate || !authorLogin || !isbn) {
                alert("Please fill all fields");
                return;
            }

            var ctx = SP.ClientContext.get_current();
            var web = ctx.get_web();
            var list = web.get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);

            var user = web.ensureUser(authorLogin);
            ctx.load(user);

            ctx.executeQueryAsync(function () {
                var userValue = new SP.FieldUserValue();
                userValue.set_lookupId(user.get_id());

                listItem.set_item("Title", bookName);
                listItem.set_item("PublicationDate", new Date(pubDate));
                listItem.set_item("AuthorName", userValue);
                listItem.set_item("ISBN", isbn);

                listItem.update();
                ctx.executeQueryAsync(function () {
                    alert("Book updated successfully!");
                    loadItems();
                }, onQueryFail);
            }, onQueryFail);
        }

        function deleteItem(itemId) {
            if (!confirm("Are you sure you want to delete this book?")) return;

            var ctx = new SP.ClientContext.get_current();
            var list = ctx.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            listItem.deleteObject();

            ctx.executeQueryAsync(function () {
                alert("Book deleted successfully!");
                loadItems();
            }, function (sender, args) {
                alert("Delete failed: " + args.get_message());
            });
        }
    </script>
</body>
</html>







<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Book Management List - Update & Delete Items</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- SharePoint JSOM scripts -->
    <script type="text/javascript" src="/_layouts/15/sp.runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/sp.js"></script>
</head>
<body class="bg-light p-4">

    <div class="container">
        <h2 class="mb-4 text-center text-primary">Book Management</h2>

        <!-- Table to display list items -->
        <div class="table-responsive mb-5">
            <table class="table table-bordered table-striped align-middle text-center" id="bookTable">
                <thead class="table-dark">
                    <tr>
                        <th>Actions</th>
                        <th>Book Name</th>
                        <th>Publication Date</th>
                        <th>Author Name</th>
                        <th>ISBN</th>
                    </tr>
                </thead>
                <tbody class="table-group-divider"></tbody>
            </table>
        </div>

        <!-- Update section -->
        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Update Book Details</h4>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="bookName" class="form-label">Book Name</label>
                        <input type="text" id="bookName" class="form-control" placeholder="Enter Book Name" />
                    </div>
                    <div class="col-md-6">
                        <label for="pubDate" class="form-label">Publication Date</label>
                        <input type="date" id="pubDate" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <label for="authorName" class="form-label">Author Name</label>
                        <input type="text" id="authorName" class="form-control" placeholder="Enter Author Name" />
                    </div>
                    <div class="col-md-6">
                        <label for="isbn" class="form-label">ISBN</label>
                        <input type="text" id="isbn" class="form-control" placeholder="Enter ISBN" />
                    </div>
                </div>
                <input type="hidden" id="itemId" />
                <div class="mt-4 text-end">
                    <button class="btn btn-success" onclick="updateItem()">Update Book</button>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript Logic -->
    <script type="text/javascript">
        // Load items when the page is ready
        document.addEventListener("DOMContentLoaded", function () {
            loadItems();
        });

        // Load items from SharePoint
        function loadItems() {
            var clientContext = new SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var camlQuery = new SP.CamlQuery();
            this.listItems = list.getItems(camlQuery);
            clientContext.load(listItems);
            clientContext.executeQueryAsync(onLoadSuccess, onQueryFail);
        }

        function onLoadSuccess() {
            var tableBody = document.querySelector("#bookTable tbody");
            tableBody.innerHTML = "";

            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var item = listItemEnumerator.get_current();
                var id = item.get_id();
                var bookName = item.get_item("Title");
                var pubDate = item.get_item("PublicationDate");
                var authorName = item.get_item("AuthorName");
                var isbn = item.get_item("ISBN");

                var formattedDate = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";

                var row = "<tr>";
                row += "<td>";
                row += "<button class='btn btn-sm btn-outline-primary me-1' onclick='editItem(" + id + ")'>Select</button>";
                row += "<button class='btn btn-sm btn-outline-danger' onclick='deleteItem(" + id + ")'>Delete</button>";
                row += "</td>";
                row += "<td>" + bookName + "</td>";
                row += "<td>" + formattedDate + "</td>";
                row += "<td>" + authorName + "</td>";
                row += "<td>" + isbn + "</td>";
                row += "</tr>";

                tableBody.innerHTML += row;
            }
        }

        function onQueryFail(sender, args) {
            alert("Error: " + args.get_message());
        }

        // Populate fields for editing
        function editItem(itemId) {
            var clientContext = new SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            clientContext.load(listItem);
            clientContext.executeQueryAsync(function () {
                document.getElementById("itemId").value = listItem.get_id();
                document.getElementById("bookName").value = listItem.get_item("Title");
                var pubDate = listItem.get_item("PublicationDate");
                document.getElementById("pubDate").value = pubDate ? new Date(pubDate).toISOString().split('T')[0] : "";
                document.getElementById("authorName").value = listItem.get_item("AuthorName");
                document.getElementById("isbn").value = listItem.get_item("ISBN");
            }, onQueryFail);
        }

        // Save updated item
        function updateItem() {
            var itemId = document.getElementById("itemId").value;
            var bookName = document.getElementById("bookName").value;
            var pubDate = document.getElementById("pubDate").value;
            var authorName = document.getElementById("authorName").value;
            var isbn = document.getElementById("isbn").value;

            var clientContext = new SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);

            listItem.set_item("Title", bookName);
            listItem.set_item("PublicationDate", new Date(pubDate));
            listItem.set_item("AuthorName", authorName);
            listItem.set_item("ISBN", isbn);

            listItem.update();
            clientContext.executeQueryAsync(function () {
                alert("Book updated successfully!");
                loadItems(); // refresh table
            }, onQueryFail);
        }

        // Delete selected item
        function deleteItem(itemId) {
            if (!confirm("Are you sure you want to delete this book?")) return;

            var clientContext = new SP.ClientContext.get_current();
            var list = clientContext.get_web().get_lists().getByTitle("Book Management");
            var listItem = list.getItemById(itemId);
            listItem.deleteObject();

            clientContext.executeQueryAsync(function () {
                alert("Book deleted successfully!");
                loadItems(); // refresh table
            }, function (sender, args) {
                alert("Delete failed: " + args.get_message());
            });
        }
    </script>
</body>
</html>
