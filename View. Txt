Thanks for the clarification! The error you're likely getting (A node of type StartArray was read...) happens because of how the ViewFields are passed in your request. The SharePoint REST API doesn't accept an array for ViewFields.Items directly — instead, it needs a special structure or you need to create the view without ViewFields, then update it afterward.

Let me give you a working modified version of your HTML + JS code that avoids this error.


---

✅ Updated & Fixed Version (No StartArray Error)

<!DOCTYPE html>
<html>
<head>
  <title>Create SharePoint View</title>
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body class="bg-light">

<div class="container mt-5">
  <h3 class="mb-4">Create a Custom View in SharePoint List</h3>

  <div class="form-group">
    <label>List Name</label>
    <input type="text" id="listName" class="form-control" placeholder="e.g., Documents">
  </div>

  <div class="form-group">
    <label>View Name</label>
    <input type="text" id="viewName" class="form-control" placeholder="e.g., My Custom View">
  </div>

  <div class="form-group">
    <label>Fields to Display (comma-separated)</label>
    <input type="text" id="viewFields" class="form-control" placeholder="e.g., Title,Created,Author">
  </div>

  <button class="btn btn-primary" onclick="createView()">Create View</button>

  <div id="result" class="mt-4"></div>
</div>

<script>
  function createView() {
    var listTitle = $("#listName").val().trim();
    var viewTitle = $("#viewName").val().trim();
    var viewFields = $("#viewFields").val().trim().split(',').map(field => field.trim());

    if (!listTitle || !viewTitle || viewFields.length === 0) {
      $("#result").html('<div class="alert alert-warning">Please fill all fields.</div>');
      return;
    }

    // Step 1: Create the view (initially without ViewFields)
    $.ajax({
      url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/GetByTitle('" + listTitle + "')/views",
      method: "POST",
      contentType: "application/json;odata=verbose",
      headers: {
        "Accept": "application/json;odata=verbose",
        "X-RequestDigest": $("#__REQUESTDIGEST").val()
      },
      data: JSON.stringify({
        '__metadata': { 'type': 'SP.View' },
        'Title': viewTitle,
        'RowLimit': 30,
        'ViewQuery': '<OrderBy><FieldRef Name="Created" Ascending="FALSE" /></OrderBy>'
      })
    }).done(function (data) {
      var viewId = data.d.Id;

      // Step 2: Set ViewFields using another call
      $.ajax({
        url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/GetByTitle('" + listTitle + "')/views(guid'" + viewId + "')/ViewFields/AddViewField",
        method: "POST",
        contentType: "application/json;odata=verbose",
        headers: {
          "Accept": "application/json;odata=verbose",
          "X-RequestDigest": $("#__REQUESTDIGEST").val()
        },
        data: JSON.stringify({ 'fieldName': viewFields[0] }) // Add first field
      }).done(function () {
        // Add remaining fields (if any)
        for (let i = 1; i < viewFields.length; i++) {
          $.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/GetByTitle('" + listTitle + "')/views(guid'" + viewId + "')/ViewFields/AddViewField",
            method: "POST",
            contentType: "application/json;odata=verbose",
            headers: {
              "Accept": "application/json;odata=verbose",
              "X-RequestDigest": $("#__REQUESTDIGEST").val()
            },
            data: JSON.stringify({ 'fieldName': viewFields[i] })
          });
        }

        $("#result").html('<div class="alert alert-success">View "' + viewTitle + '" created successfully in list "' + listTitle + '".</div>');
      });

    }).fail(function (error) {
      $("#result").html('<div class="alert alert-danger">Error: ' + JSON.stringify(error.responseJSON.error.message.value) + '</div>');
    });
  }
</script>

</body>
</html>


---

✅ Key Fixes:

Removed ViewFields from initial POST (SharePoint REST doesn’t support direct Items array).

Used AddViewField REST endpoint to add fields one by one.

Avoids StartArray parsing error.

Safe and compatible with SharePoint 2013, 2016, 2019.


Let me know if you want to set the new view as default, add filters, or make it public/private.

