Great! You’ve already done amazing progress using REST API and jQuery in separate pages. Now your mentor wants you to professionalize it by making it all work in one click, using JSOM (JavaScript Object Model). This is a very common real-world SharePoint task, especially when provisioning entire setups (lists, columns, permissions, etc.).


---

Your Goal: One-Click SharePoint Provisioning (Using JSOM)

Let me guide you step-by-step:


---

1. Basic Setup (HTML + JS File)

Create a single ProvisionApp.aspx or HTML file in Site Pages. Add this basic HTML layout:

<!DOCTYPE html>
<html>
<head>
    <title>Provision SharePoint</title>
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
</head>
<body>
    <h2>Provision SharePoint Items</h2>
    <button onclick="provisionEverything()">Provision All</button>

    <div id="status"></div>

    <script type="text/javascript">
        function provisionEverything() {
            createList("MyCustomList", function () {
                addField("MyCustomList", "CustomColumn1", "Text", function () {
                    createGroup("MyGroup", function () {
                        assignPermission("MyCustomList", "MyGroup", SP.RoleType.reader, function () {
                            document.getElementById("status").innerHTML = "Provisioning Completed!";
                        });
                    });
                });
            });
        }

        function createList(listTitle, callback) {
            var ctx = new SP.ClientContext.get_current();
            var web = ctx.get_web();
            var listCreationInfo = new SP.ListCreationInformation();
            listCreationInfo.set_title(listTitle);
            listCreationInfo.set_templateType(SP.ListTemplateType.genericList);
            var list = web.get_lists().add(listCreationInfo);
            ctx.load(list);
            ctx.executeQueryAsync(function () {
                console.log("List created");
                callback();
            }, function (sender, args) {
                alert("Error creating list: " + args.get_message());
            });
        }

        function addField(listTitle, fieldName, fieldType, callback) {
            var ctx = new SP.ClientContext.get_current();
            var web = ctx.get_web();
            var list = web.get_lists().getByTitle(listTitle);
            list.get_fields().addFieldAsXml('<Field DisplayName="' + fieldName + '" Type="' + fieldType + '" Name="' + fieldName + '"/>', true, SP.AddFieldOptions.defaultValue);
            ctx.executeQueryAsync(function () {
                console.log("Field added");
                callback();
            }, function (sender, args) {
                alert("Error adding field: " + args.get_message());
            });
        }

        function createGroup(groupName, callback) {
            var ctx = new SP.ClientContext.get_current();
            var web = ctx.get_web();
            var groups = web.get_siteGroups();
            var groupCreationInfo = new SP.GroupCreationInformation();
            groupCreationInfo.set_title(groupName);
            groups.add(groupCreationInfo);
            ctx.executeQueryAsync(function () {
                console.log("Group created");
                callback();
            }, function (sender, args) {
                alert("Error creating group: " + args.get_message());
            });
        }

        function assignPermission(listTitle, groupName, roleType, callback) {
            var ctx = new SP.ClientContext.get_current();
            var web = ctx.get_web();
            var list = web.get_lists().getByTitle(listTitle);
            var group = web.get_siteGroups().getByName(groupName);
            var roleDef = web.get_roleDefinitions().getByType(roleType);
            var roleBinding = new SP.RoleDefinitionBindingCollection(ctx);
            roleBinding.add(roleDef);
            list.get_roleAssignments().add(group, roleBinding);
            ctx.executeQueryAsync(function () {
                console.log("Permission assigned");
                callback();
            }, function (sender, args) {
                alert("Error assigning permission: " + args.get_message());
            });
        }
    </script>
</body>
</html>


---

2. What This Code Does (All in One Click)

provisionEverything() runs when button is clicked.

It creates a list.

Then adds a column.

Then creates a group.

Then assigns permissions to that group on the list.



---

3. You Can Extend It With More

Later you can add:

addContentType()

addFieldsToContentType()

createDocumentLibrary()

addMajorVersioning()


All in same pattern using nested functions and callbacks.


---

Next Steps for You

1. Copy this into your Site Pages > New Page.


2. Try provisioning with your custom names.


3. Replace values as needed (column types, roles).


4. Test in dev site with a sample list.




---

Would you like me to give you:

Full content type creation in JSOM?

Adding fields to that content type?

Assigning content type to a list?


Let me know and I’ll add that next!

