<!DOCTYPE html>
<html>
<head>
    <title>Create SharePoint List/Library/Survey</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
</head>

<body class="bg-light">
    <div class="container">
        <h2 class="text-success mb-4">Basic list Provision</h2>
        <h4 class="text-success mb-4">Create List -> define fields -> add fields to content type(CT), made Title field unrequired -> Attach the CT to list(additionally enabling content type, versioning) ->Assign permission & create Group</h4>
        
        <button onclick="Provisioneverything()" type="button" id="createBtn" class="btn btn-success">
            Provision all
        </button>

        <!-- getting result displayed for each function-->
        <div id="listCreateMsg" class="mt-3"></div>
        <div id="listFieldMsg" class="mt-3"></div>
        <div id="listCtMsg" class="mt-3"></div>
        <div id="ctFieldAddMsg" class="mt-3"></div>
        <div id="attachCTMsg" class="mt-3"></div>
        <div id="verifygrpMsg" class="mt-3"></div>
        <div id="createGrpMsg" class="mt-3"></div>
        <div id="viewMsg" class="mt-3"></div>
        <div id="titleMsg" class="mt-3"></div>

        <!--final status-->
        <div id="resultMsg" class="mt-3"></div>
    </div>

    <script>
        var firstFieldValidated = false;

        function Provisioneverything() {
            createList("JSOMListProvision", function() {
                defineFields("studName", "Text", function() {
                    defineFields("uidNo", "Number", function() {
                        createContentType("JSOMcontentType13", function() {
                            addFieldsToCT("JSOMcontentType13", "studName", function() {
                                addFieldsToCT("JSOMcontentType13", "uidNo", function() {
                                    attachCT("JSOMListProvision", "JSOMcontentType13", function() {
                                        verfifyGroup("JSOMprovisionKishore10", function() {
                                            assignPermissions("JSOMListProvision", "JSOMprovisionKishore10", SP.RoleType.editor, function() {
                                                createViews("JSOMListProvision", "Provision_view_nw", function() {
                                                    makeTitleAsOptional("JSOMListProvision", function() {
                                                        document.getElementById("resultMsg").innerText = "Provision done :)";
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        }

        function addFieldToDefaultView(listname, intFieldName) {
            var ctx = SP.ClientContext.get_current();
            var web = ctx.get_web();
            var list = web.get_lists().getByTitle(listname);
            var view = list.get_defaultView();
            var viewFields = view.get_viewFields();
            viewFields.add(intFieldName);
            view.update();
            ctx.load(view);
            
            // JSOM notes:
            // -loading mult items in a single request and executing it all together:
            // -allows multiple list item fetchs in one batch using excecutequerysyn
            // NOTE: no direct direct alter for executeQueryacsyn, 1 way is to work on queryasync only in trusted environmets
            ctx.executeQueryAsync(
                function() {
                    $("#listCreateMsg").html("view added successfully.").removeClass("text-success").addClass("text-danger");
                },
                function(sender, args) {
                    $("#listCreateMsg").html("List add failed" + args.get_message()).removeClass("text-success").addClass("text-danger");
                }
            );
        }

        function createList(listname, lc) {
            var ctx = SP.ClientContext.get_current(); //Retrieves the JSOM context for the current SharePoint site.
            var web = ctx.get_web(); //SP.Web object representing that site
            var list_cre = new SP.ListCreationInformation(); //Creates a metadata container for our new list.
            list_cre.set_title(listname);
            list_cre.set_templateType(SP.ListTemplateType.genericList); //generic
            
            var lst = web.get_lists().add(list_cre); //Enqueues a request to add the list to the site's collection of lists.
            ctx.load(lst); //telling JSOM to fetch data before use
            
            ctx.executeQueryAsync( //commits the changes
                function() {
                    $("#listCreateMsg").html("List added successfully.").removeClass("text-danger").addClass("text-success");
                    lc();
                }, 
                function(sender, args) {
                    $("#listCreateMsg").html("List add failed" + args.get_message()).removeClass("text-success").addClass("text-danger");
                    lc();
                }
            );
        }

        //to remove all double-quotes and trim whitespace
        function sanitizeName(raw) {
            return raw.replace(/"/g, '').trim(); //replace function is used double ("") replaced with then trimed to remove the trailing
        }

    function defineFields(fieldName, fieldType, lc) {
    var ctx = SP.ClientContext.get_current();
    var web = ctx.get_web();
    
    // Clean field name
    var internalName = sanitizeName(fieldName);
    if (!/[A-Za-z_]/.test(fieldName)) {
        fieldName = 'F' + fieldName;
    }

    // Create field at site level
    var fieldXml = '<Field Type="' + fieldType + '" ' +
                   'Name="' + fieldName + '" ' +
                   'DisplayName="' + fieldName + '" ' +
                   'Group="Custom Columns">';
    
    if(fieldName == "uidNo") {
        fieldXml += '<Validation Message="UID must be 5-10 digits">' +
                    'LEN([uidNo])&gt;=5 AND LEN([uidNo])&lt;=10' +
                    '</Validation>';
    }
    
    fieldXml += '</Field>';

    // Add field to site columns
    var field = web.get_fields().addFieldAsXml(fieldXml, true, SP.AddFieldOptions.defaultValue);
    ctx.load(field);
    
    ctx.executeQueryAsync(
        function() {
            $("#listFieldMsg").html(fieldName + " site column created").removeClass("text-danger").addClass("text-success");
            lc();
        },
        function(sender, args) {
            $("#listFieldMsg").html("Field creation failed: " + args.get_message()).removeClass("text-success").addClass("text-danger");
            lc();
        }
    );
}




        function createContentType(name, lc) {
            var ctx = SP.ClientContext.get_current(), 
                web = ctx.get_web(),
                ctype = web.get_contentTypes(), //to get collection of site lvl content types
                info = new SP.ContentTypeCreationInformation(); //new CT definition
                
            info.set_name(name);
            info.set_description("JSOM created CT");
            info.set_group("JSOM CT group");
            info.set_parentContentType(ctype.get_item(0)); //inherit from item -indexed to ist content type item in site collection
            
            ctype.add(info);
            
            ctx.executeQueryAsync(
                function() { 
                    $("#listCtMsg").html(name + " created successfully.").removeClass("text-danger").addClass("text-success"); 
                    lc(); 
                },
                function(sender, args) {
                    $("#listCtMsg").html("Creation CT failed." + args.get_message()).removeClass("text-success").addClass("text-danger"); 
                    lc();
                }
            );
        }

        function findContentTypeByName(ctName, onFound) {
            var ctx = SP.ClientContext.get_current();
            var web = ctx.get_web();
            var cts = web.get_contentTypes();
            
            ctx.load(cts, 'Include(Name, Id)'); //load Name and Id for each CT
            
            ctx.executeQueryAsync(
                function() {
                    var enumCt = cts.getEnumerator();
                    var found = null;
                    
                    while (enumCt.moveNext()) {
                        var current = enumCt.get_current();
                        if (current.get_name() == ctName) {
                            found = current;
                            break;
                        }
                    }
                    
                    onFound(found);
                },
                function(sender, args) {
                    console.error('Error loading content types: ' + args.get_message());
                    onFound(null);
                }
            );
        }

        function addFieldsToCT(ctName, fName, lc) {
    var ctx = SP.ClientContext.get_current();
    var web = ctx.get_web();
    
    findContentTypeByName(ctName, function(ct) {
        if (!ct) {
            console.error("Content Type not found: " + ctName);
            return lc();
        }
        
        // Get the SITE column (not list column)
        var field = web.get_fields().getByInternalNameOrTitle(fName); 
        ctx.load(field);
        
        ctx.executeQueryAsync(
            function() {
                var link = new SP.FieldLinkCreationInformation();
                link.set_field(field); 
                ct.get_fieldLinks().add(link); 
                ct.update(true);
                
                ctx.executeQueryAsync(
                    function() {
                        $("#ctFieldAddMsg").html("Field " + fName + " added to CT").removeClass("text-danger").addClass("text-success");
                        lc();
                    },
                    function(sender, args) {
                        $("#ctFieldAddMsg").html("Failed to add field to CT: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                        lc();
                    }
                );
            },
            function(sender, args) {
                $("#ctFieldAddMsg").html("Failed to load field: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                lc();
            }
        );
    });
}
       function attachCT(listname, ctName, lc) {
    findContentTypeByName(ctName, function(ct) {
        if (!ct) return lc();

        var ctx = SP.ClientContext.get_current();
        var web = ctx.get_web();
        var list = web.get_lists().getByTitle(listname);

        // Remove any existing list columns that conflict with our content type
        try {
            var fields = list.get_fields();
            ctx.load(fields);
            ctx.executeQueryAsync(function() {
                // Remove if fields exist directly on list
                removeFieldIfExists(list, "uidNo", function() {
                    removeFieldIfExists(list, "studName", function() {
                        proceedWithCTAttach();
                    });
                });
            });
        } catch(e) {
            proceedWithCTAttach();
        }

        function proceedWithCTAttach() {
            // Enable content types
            list.set_contentTypesEnabled(true);
            list.update();

            // Add content type to list
            list.get_contentTypes().addExistingContentType(ct);
            
            // Set as default
            var ctCol = list.get_contentTypes();
            ctx.load(ctCol);
            
            ctx.executeQueryAsync(
                function() {
                    $("#attachCTMsg").html("CT attached successfully").removeClass("text-danger").addClass("text-success");
                    lc();
                },
                function(sender, args) {
                    $("#attachCTMsg").html("CT attach failed: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                    lc();
                }
            );
        }
    });
}

function removeFieldIfExists(list, fieldName, callback) {
    var ctx = SP.ClientContext.get_current();
    try {
        var field = list.get_fields().getByInternalNameOrTitle(fieldName);
        field.deleteObject();
        ctx.executeQueryAsync(
            function() { callback(); },
            function() { callback(); } // Continue even if delete fails
        );
    } catch(e) {
        callback();
    }
}
        function verfifyGroup(name, lc) {
            var ctx = SP.ClientContext.get_current();
            var web = ctx.get_web();
            var groups = web.get_siteGroups();
            var group;
            
            try {
                group = groups.getByName(name);
                ctx.load(group);
                
                ctx.executeQueryAsync(
                    function() {
                        $("#verifygrpMsg").html("Group exists").removeClass("text-danger").addClass("text-success"); 
                        console.log("Group already exists."); 
                        lc();
                    }, 
                    function() {
                        createGroup(name, lc); // if not exists
                    }
                );
            } catch (e) {
                createGroup(name, lc);
            }
        }

        function createGroup(name, lc) {
            var ctx = SP.ClientContext.get_current();
            var web = ctx.get_web();
            var groups = web.get_siteGroups();
            var groupCreationInfo = new SP.GroupCreationInformation();
            
            groupCreationInfo.set_title(name);
            groups.add(groupCreationInfo);
            
            ctx.executeQueryAsync(
                function() { 
                    $("#createGrpMsg").html("Group created").removeClass("text-danger").addClass("text-success"); 
                    lc(); 
                },
                function(sender, args) {
                    $("#createGrpMsg").html("Group creation failed: " + args.get_message()).removeClass("text-success").addClass("text-danger"); 
                    lc();
                }
            );
        }

        function assignPermissions(listTitle, grpName, role, lc) {
            var ctx = SP.ClientContext.get_current();
            var web = ctx.get_web();
            var list = web.get_lists().getByTitle(listTitle);
            var group = web.get_siteGroups().getByName(grpName);
            var roleDef = web.get_roleDefinitions().getByType(role);
            var roleBindings = SP.RoleDefinitionBindingCollection.newObject(ctx);
            
            roleBindings.add(roleDef);
            list.breakRoleInheritance(false);
            list.get_roleAssignments().add(group, roleBindings);
            
            ctx.executeQueryAsync(
                function() {
                    $("#createGrpMsg").html("Permission assigned").removeClass("text-danger").addClass("text-success");
                    lc();
                },
                function(sender, args) {
                    $("#createGrpMsg").html("Failed to assign permission: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                    lc();
                }
            );
        }

     function createViews(listname, viewName, lc) {
    var ctx = SP.ClientContext.get_current();
    var list = ctx.get_web().get_lists().getByTitle(listname);
    
    var viewCreInfo = new SP.ViewCreationInformation();
    viewCreInfo.set_title(viewName);
    
    // Use the content type field references
    viewCreInfo.set_viewFields([
        "LinkTitle", // This is the Title field from content type
        "studName",
        "uidNo"
    ]);
    
    list.get_views().add(viewCreInfo);
    
    ctx.executeQueryAsync(
        function() {
            $("#viewMsg").html(viewName + ' view created').removeClass("text-danger").addClass("text-success");
            lc();
        },
        function(sender, args) {
            $("#viewMsg").html("View creation failed: " + args.get_message()).removeClass("text-success").addClass("text-danger");
            lc();
        }
    );
}
        function makeTitleAsOptional(listname, lc) {
            var ctx = SP.ClientContext.get_current();
            var web = ctx.get_web();
            var list = web.get_lists().getByTitle(listname);
            var titleinfo = list.get_fields().getByInternalNameOrTitle("Title");
            
            ctx.load(titleinfo);
            titleinfo.set_required(false);
            titleinfo.set_hidden(true);
            titleinfo.update();
            
            ctx.executeQueryAsync(
                function() {
                    $("#titleMsg").html("Title made optional and hidden").removeClass("text-danger").addClass("text-success");
                    lc();
                },
                function(sender, args) {
                    $("#titleMsg").html("Failed to update title field: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                    lc();
                }
            );
        }
    </script>
</body>
</html>
