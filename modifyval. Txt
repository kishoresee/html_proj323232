<!DOCTYPE html>
<html>
<head>
    <title>Create SharePoint List with Validation</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
</head>

<body class="bg-light">
    <div class="container">
        <h2 class="text-success mb-4">List Provisioning with Validation</h2>
        <button onclick="Provisioneverything()" type="button" id="createBtn" class="btn btn-success">
            Provision List with Validation
        </button>

        <!-- Add Item Form -->
        <div class="card mt-4">
            <div class="card-header bg-primary text-white">
                Add New Item
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label for="studName">Student Name:</label>
                    <input type="text" class="form-control" id="studName">
                </div>
                <div class="form-group mt-2">
                    <label for="uidNo">UID Number (5-10 digits):</label>
                    <input type="number" class="form-control" id="uidNo">
                </div>
                <button onclick="addListItem()" class="btn btn-primary mt-3">Add Item</button>
                <div id="addItemMsg" class="mt-2"></div>
            </div>
        </div>

        <!-- Status Messages -->
        <div id="listCreateMsg" class="mt-3"></div>
        <div id="listFieldMsg" class="mt-3"></div>
        <div id="listCtMsg" class="mt-3"></div>
        <div id="ctFieldAddMsg" class="mt-3"></div>
        <div id="attachCTMsg" class="mt-3"></div>
        <div id="verifygrpMsg" class="mt-3"></div>
        <div id="createGrpMsg" class="mt-3"></div>
        <div id="viewMsg" class="mt-3"></div>
        <div id="titleMsg" class="mt-3"></div>
        <div id="resultMsg" class="mt-3"></div>
    </div>

    <script>
        // [Keep all your existing functions here...]
        
        // Add this new function to add items to the list
        function addListItem() {
            var ctx = SP.ClientContext.get_current();
            var web = ctx.get_web();
            var list = web.get_lists().getByTitle("JSOMListProvision");
            
            var itemCreateInfo = new SP.ListItemCreationInformation();
            var newItem = list.addItem(itemCreateInfo);
            
            // Get values from form
            var studentName = $("#studName").val();
            var uidNumber = $("#uidNo").val();
            
            // Set field values
            newItem.set_item("Title", "Item " + new Date().getTime()); // Required field
            newItem.set_item("studName", studentName);
            newItem.set_item("uidNo", uidNumber);
            
            newItem.update();
            
            ctx.executeQueryAsync(
                function() {
                    $("#addItemMsg").html("Item added successfully!").removeClass("text-danger").addClass("text-success");
                    // Clear form
                    $("#studName").val("");
                    $("#uidNo").val("");
                },
                function(sender, args) {
                    $("#addItemMsg").html("Failed to add item: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                }
            );
        }

        // [Rest of your existing code...]
    </script>
</body>
</html>


if (fieldExists) {
    if(fieldName == "uidNo") {
        var siteField = fields.getByInternalNameOrTitle(fieldName);

        ctx.load(siteField);
        ctx.executeQueryAsync(
            function() {
                var validationFormula = "=AND(ISNUMBER([uidNo]),LEN([uidNo])>=5,LEN([uidNo])<=10)";
                var validationMessage = "UID must be exactly 5-10 digits";

                siteField.set_validationFormula(validationFormula);
                siteField.set_validationMessage(validationMessage);
                siteField.update();

                ctx.executeQueryAsync(
                    function() {
                        $("#listFieldMsg").html(fieldName + " already existed but validation updated").removeClass("text-danger").addClass("text-success");
                        lc();
                    },
                    function(sender, args) {
                        $("#listFieldMsg").html("Failed to update validation for existing field: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                        lc();
                    }
                );
            },
            function(sender, args) {
                $("#listFieldMsg").html("Failed to load existing field: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                lc();
            }
        );
    } else {
        $("#listFieldMsg").html(fieldName + " site column already exists").removeClass("text-danger").addClass("text-warning");
        lc();
    }
}





function defineFields(fieldName, fieldType, lc) {
    var ctx = SP.ClientContext.get_current();
    var web = ctx.get_web();
    
    var internalName = sanitizeName(fieldName);
    if (!/[A-Za-z_]/.test(fieldName)) {
        fieldName = 'F' + fieldName;
    }

    var fields = web.get_fields();
    var fieldExists = false;

    ctx.load(fields);
    ctx.executeQueryAsync(
        function() {
            var fieldEnum = fields.getEnumerator();
            while (fieldEnum.moveNext()) {
                var field = fieldEnum.get_current();
                if (field.get_internalName() == fieldName || field.get_title() == fieldName) {
                    fieldExists = true;
                    break;
                }
            }

            if (fieldExists) {
                $("#listFieldMsg").html(fieldName + " site column already exists").removeClass("text-danger").addClass("text-warning");
                lc();
            } else {
                var fieldXml = '<Field Type="' + fieldType + '" Name="' + fieldName + '" DisplayName="' + fieldName + '"';
                if(fieldName == "uidNo") {
                    fieldXml += ' MaxLength="10" MinLength="5"';
                }
                fieldXml += '/>';

                var field = fields.addFieldAsXml(fieldXml, true, SP.AddFieldOptions.defaultValue);
                ctx.load(field);

                ctx.executeQueryAsync(
                    function() {
                        if(fieldName == "uidNo") {
                            var siteField = fields.getByInternalNameOrTitle(fieldName);
                            
                            var validationFormula = "=AND(ISNUMBER([uidNo]),LEN([uidNo])>=5,LEN([uidNo])<=10)";
                            var validationMessage = "UID must be exactly 5-10 digits";

                            siteField.set_validationFormula(validationFormula);
                            siteField.set_validationMessage(validationMessage);
                            siteField.update();

                            ctx.executeQueryAsync(
                                function() {
                                    $("#listFieldMsg").html("Site column created with validation").removeClass("text-danger").addClass("text-success");
                                    lc();
                                },
                                function(sender, args) {
                                    $("#listFieldMsg").html("Created field but validation failed: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                                    lc();
                                }
                            );
                        } else {
                            $("#listFieldMsg").html(fieldName + " site column created").removeClass("text-danger").addClass("text-success");
                            lc();
                        }
                    },
                    function(sender, args) {
                        $("#listFieldMsg").html("Field creation failed: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                        lc();
                    }
                );
            }
        },
        function(sender, args) {
            $("#listFieldMsg").html("Failed to load fields: " + args.get_message()).removeClass("text-success").addClass("text-danger");
            lc();
        }
    );
}





function addListItem(listname, studName, uidNo) {
    var ctx = SP.ClientContext.get_current();
    var web = ctx.get_web();
    var list = web.get_lists().getByTitle(listname);

    var itemCreateInfo = new SP.ListItemCreationInformation();
    var newItem = list.addItem(itemCreateInfo);

    newItem.set_item('Title', 'Sample Title'); // Title is mandatory unless you made it optional
    newItem.set_item('studName', studName);     // Field you created
    newItem.set_item('uidNo', uidNo);            // Field with validation

    newItem.update();

    ctx.executeQueryAsync(
        function() {
            $("#resultMsg").html("List item added successfully!").removeClass("text-danger").addClass("text-success");
        },
        function(sender, args) {
            $("#resultMsg").html("Failed to add list item: " + args.get_message()).removeClass("text-success").addClass("text-danger");
        }
    );
}


function defineFields(fieldName, fieldType, lc) {
    var ctx = SP.ClientContext.get_current();
    var web = ctx.get_web();
    
    // Clean field name
    var internalName = sanitizeName(fieldName);
    if (!/[A-Za-z_]/.test(fieldName)) {
        fieldName = 'F' + fieldName;
    }

    // Create field XML with validation built-in
    var fieldXml = '<Field Type="' + fieldType + '" ' +
                   'Name="' + fieldName + '" ' +
                   'DisplayName="' + fieldName + '" ' +
                   'Group="Custom Columns" ';
    
    if(fieldName == "uidNo") {
        fieldXml += 'MaxLength="10" MinLength="5">' +
                   '<Validation Message="UID must be 5-10 digits">' +
                   'LEN([uidNo])&gt;=5 AND LEN([uidNo])&lt;=10' +
                   '</Validation>' +
                   '</Field>';
    } else {
        fieldXml += '/>';
    }

    // Add field to site columns
    var field = web.get_fields().addFieldAsXml(fieldXml, true, SP.AddFieldOptions.defaultValue);
    ctx.load(field);
    
    ctx.executeQueryAsync(
        function() {
            // For uidNo, also add programmatic validation to ensure it applies everywhere
            if(fieldName == "uidNo") {
                var siteField = web.get_fields().getByInternalNameOrTitle(fieldName);
                siteField.set_validationFormula("=AND(ISNUMBER([uidNo]),LEN([uidNo])>=5,LEN([uidNo])<=10)");
                siteField.set_validationMessage("UID must be exactly 5-10 digits");
                siteField.update();
                
                ctx.executeQueryAsync(
                    function() {
                        $("#listFieldMsg").html(fieldName + " created with dual validation").removeClass("text-danger").addClass("text-success");
                        lc();
                    },
                    function(sender, args) {
                        $("#listFieldMsg").html("Field created but validation failed: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                        lc();
                    }
                );
            } else {
                $("#listFieldMsg").html(fieldName + " created successfully").removeClass("text-danger").addClass("text-success");
                lc();
            }
        },
        function(sender, args) {
            $("#listFieldMsg").html("Field creation failed: " + args.get_message()).removeClass("text-success").addClass("text-danger");
            lc();
        }
    );
}

function addFieldsToCT(ctName, fName, lc) {
    var ctx = SP.ClientContext.get_current();
    var web = ctx.get_web();
    
    findContentTypeByName(ctName, function(ct) {
        if (!ct) return lc();

        // Get the SITE column with validation
        var field = web.get_fields().getByInternalNameOrTitle(fName);
        ctx.load(field);
        
        ctx.executeQueryAsync(
            function() {
                // Create field link with all properties
                var link = new SP.FieldLinkCreationInformation();
                link.set_field(field);
                
                // For uidNo, explicitly set validation properties
                if(fName == "uidNo") {
                    link.set_validationFormula(field.get_validationFormula());
                    link.set_validationMessage(field.get_validationMessage());
                }
                
                ct.get_fieldLinks().add(link);
                ct.update(true);
                
                ctx.executeQueryAsync(
                    function() {
                        $("#ctFieldAddMsg").html(fName + " added to CT with validation").removeClass("text-danger").addClass("text-success");
                        lc();
                    },
                    function(sender, args) {
                        $("#ctFieldAddMsg").html("Failed to add field to CT: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                        lc();
                    }
                );
            },
            function(sender, args) {
                $("#ctFieldAddMsg").html("Failed to load field: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                lc();
            }
        );
    });
}

function cleanDuplicateFields(listName, fieldName, callback) {
    var ctx = SP.ClientContext.get_current();
    var web = ctx.get_web();
    var list = web.get_lists().getByTitle(listName);
    var fields = list.get_fields();
    
    ctx.load(fields);
    ctx.executeQueryAsync(
        function() {
            var enumerator = fields.getEnumerator();
            var duplicates = [];
            
            while (enumerator.moveNext()) {
                var field = enumerator.get_current();
                if (field.get_internalName() === fieldName || 
                    field.get_title() === fieldName) {
                    duplicates.push(field);
                }
            }
            
            // Keep the newest field (assuming it's the content type one)
            if (duplicates.length > 1) {
                for (var i = 0; i < duplicates.length - 1; i++) {
                    duplicates[i].deleteObject();
                }
                ctx.executeQueryAsync(callback, callback);
            } else {
                callback();
            }
        },
        callback
    );
}
