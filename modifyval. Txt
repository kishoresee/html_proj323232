function addListItem(listname, studName, uidNo) {
    var ctx = SP.ClientContext.get_current();
    var web = ctx.get_web();
    var list = web.get_lists().getByTitle(listname);

    var itemCreateInfo = new SP.ListItemCreationInformation();
    var newItem = list.addItem(itemCreateInfo);

    newItem.set_item('Title', 'Sample Title'); // Title is mandatory unless you made it optional
    newItem.set_item('studName', studName);     // Field you created
    newItem.set_item('uidNo', uidNo);            // Field with validation

    newItem.update();

    ctx.executeQueryAsync(
        function() {
            $("#resultMsg").html("List item added successfully!").removeClass("text-danger").addClass("text-success");
        },
        function(sender, args) {
            $("#resultMsg").html("Failed to add list item: " + args.get_message()).removeClass("text-success").addClass("text-danger");
        }
    );
}


function defineFields(fieldName, fieldType, lc) {
    var ctx = SP.ClientContext.get_current();
    var web = ctx.get_web();
    
    // Clean field name
    var internalName = sanitizeName(fieldName);
    if (!/[A-Za-z_]/.test(fieldName)) {
        fieldName = 'F' + fieldName;
    }

    // Create field XML with validation built-in
    var fieldXml = '<Field Type="' + fieldType + '" ' +
                   'Name="' + fieldName + '" ' +
                   'DisplayName="' + fieldName + '" ' +
                   'Group="Custom Columns" ';
    
    if(fieldName == "uidNo") {
        fieldXml += 'MaxLength="10" MinLength="5">' +
                   '<Validation Message="UID must be 5-10 digits">' +
                   'LEN([uidNo])&gt;=5 AND LEN([uidNo])&lt;=10' +
                   '</Validation>' +
                   '</Field>';
    } else {
        fieldXml += '/>';
    }

    // Add field to site columns
    var field = web.get_fields().addFieldAsXml(fieldXml, true, SP.AddFieldOptions.defaultValue);
    ctx.load(field);
    
    ctx.executeQueryAsync(
        function() {
            // For uidNo, also add programmatic validation to ensure it applies everywhere
            if(fieldName == "uidNo") {
                var siteField = web.get_fields().getByInternalNameOrTitle(fieldName);
                siteField.set_validationFormula("=AND(ISNUMBER([uidNo]),LEN([uidNo])>=5,LEN([uidNo])<=10)");
                siteField.set_validationMessage("UID must be exactly 5-10 digits");
                siteField.update();
                
                ctx.executeQueryAsync(
                    function() {
                        $("#listFieldMsg").html(fieldName + " created with dual validation").removeClass("text-danger").addClass("text-success");
                        lc();
                    },
                    function(sender, args) {
                        $("#listFieldMsg").html("Field created but validation failed: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                        lc();
                    }
                );
            } else {
                $("#listFieldMsg").html(fieldName + " created successfully").removeClass("text-danger").addClass("text-success");
                lc();
            }
        },
        function(sender, args) {
            $("#listFieldMsg").html("Field creation failed: " + args.get_message()).removeClass("text-success").addClass("text-danger");
            lc();
        }
    );
}

function addFieldsToCT(ctName, fName, lc) {
    var ctx = SP.ClientContext.get_current();
    var web = ctx.get_web();
    
    findContentTypeByName(ctName, function(ct) {
        if (!ct) return lc();

        // Get the SITE column with validation
        var field = web.get_fields().getByInternalNameOrTitle(fName);
        ctx.load(field);
        
        ctx.executeQueryAsync(
            function() {
                // Create field link with all properties
                var link = new SP.FieldLinkCreationInformation();
                link.set_field(field);
                
                // For uidNo, explicitly set validation properties
                if(fName == "uidNo") {
                    link.set_validationFormula(field.get_validationFormula());
                    link.set_validationMessage(field.get_validationMessage());
                }
                
                ct.get_fieldLinks().add(link);
                ct.update(true);
                
                ctx.executeQueryAsync(
                    function() {
                        $("#ctFieldAddMsg").html(fName + " added to CT with validation").removeClass("text-danger").addClass("text-success");
                        lc();
                    },
                    function(sender, args) {
                        $("#ctFieldAddMsg").html("Failed to add field to CT: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                        lc();
                    }
                );
            },
            function(sender, args) {
                $("#ctFieldAddMsg").html("Failed to load field: " + args.get_message()).removeClass("text-success").addClass("text-danger");
                lc();
            }
        );
    });
}

function cleanDuplicateFields(listName, fieldName, callback) {
    var ctx = SP.ClientContext.get_current();
    var web = ctx.get_web();
    var list = web.get_lists().getByTitle(listName);
    var fields = list.get_fields();
    
    ctx.load(fields);
    ctx.executeQueryAsync(
        function() {
            var enumerator = fields.getEnumerator();
            var duplicates = [];
            
            while (enumerator.moveNext()) {
                var field = enumerator.get_current();
                if (field.get_internalName() === fieldName || 
                    field.get_title() === fieldName) {
                    duplicates.push(field);
                }
            }
            
            // Keep the newest field (assuming it's the content type one)
            if (duplicates.length > 1) {
                for (var i = 0; i < duplicates.length - 1; i++) {
                    duplicates[i].deleteObject();
                }
                ctx.executeQueryAsync(callback, callback);
            } else {
                callback();
            }
        },
        callback
    );
}
