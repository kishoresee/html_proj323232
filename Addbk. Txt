<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>All Notifications - Book Management</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        .notification-card {
            border-left: 4px solid #0d6efd;
            background-color: #f8f9fa;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container py-4">
        <h2 class="mb-4">All Overdue Book Notifications</h2>
        <div id="allNotifications"></div>
    </div>

    <!-- jQuery & Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- SharePoint JSOM Scripts -->
    <script type="text/javascript">
        function loadAllNotifications() {
            var ctx = SP.ClientContext.get_current();
            var list = ctx.get_web().get_lists().getByTitle("Book Management");
            var query = new SP.CamlQuery();
            var today = new Date().toISOString().split('T')[0];

            query.set_viewXml(`
                <View>
                    <Query>
                        <Where>
                            <Leq>
                                <FieldRef Name='PublicationDate' />
                                <Value Type='DateTime'>${today}</Value>
                            </Leq>
                        </Where>
                    </Query>
                </View>
            `);

            var items = list.getItems(query);
            ctx.load(items);
            ctx.executeQueryAsync(
                function() {
                    var html = "";
                    var enumerator = items.getEnumerator();
                    var count = 0;

                    function loadAuthorsRecursive() {
                        if (!enumerator.moveNext()) {
                            $('#allNotifications').html(html || "<p>No overdue notifications found.</p>");
                            return;
                        }

                        var item = enumerator.get_current();
                        var bookTitle = item.get_item("BookName");
                        var pubDate = new Date(item.get_item("PublicationDate")).toLocaleDateString();
                        var isbn = item.get_item("ISBN");
                        var author = item.get_item("AuthorName");
                        var authorId = author.get_lookupId();

                        var user = ctx.get_web().getUserById(authorId);
                        ctx.load(user);
                        ctx.executeQueryAsync(
                            function() {
                                count++;
                                html += `
                                    <div class="card mb-3 notification-card p-3 shadow-sm">
                                        <h5>${bookTitle}</h5>
                                        <p class="mb-1"><strong>Author:</strong> ${user.get_title()}</p>
                                        <p class="mb-1"><strong>Publication Date:</strong> ${pubDate}</p>
                                        <p class="mb-0"><strong>ISBN:</strong> ${isbn}</p>
                                    </div>
                                `;
                                loadAuthorsRecursive(); // continue recursively
                            },
                            function(sender, args) {
                                console.error("Failed to load user", args.get_message());
                                loadAuthorsRecursive(); // skip and continue
                            }
                        );
                    }

                    loadAuthorsRecursive();
                },
                function(sender, args) {
                    $('#allNotifications').html("<p>Error loading notifications: " + args.get_message() + "</p>");
                }
            );
        }

        ExecuteOrDelayUntilScriptLoaded(function() {
            SP.SOD.executeFunc('sp.js', 'SP.ClientContext', loadAllNotifications);
        }, 'sp.js');
    </script>
</body>
</html>







<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Book Management Dashboard</title>

  <!-- Bootstrap CSS & Font Awesome -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

  <style>
    .notification-dropdown {
      width: 350px;
      max-height: 500px;
      overflow-y: auto;
    }
    .notification-item:hover {
      background-color: #f8f9fa;
    }
    .navbar-custom {
      background-color: #f8f9fa;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .more-link {
      text-align: center;
      padding: 8px;
    }
  </style>
</head>
<body class="bg-light">
  <!-- Navigation Bar -->
  <nav class="navbar navbar-expand-lg navbar-custom fixed-top">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">Book Management</a>
      <div class="dropdown ms-auto">
        <button class="btn btn-link text-dark position-relative" 
                id="notificationDropdown" 
                data-bs-toggle="dropdown" 
                aria-expanded="false">
          <i class="fas fa-bell fa-lg"></i>
          <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="notificationCount">0</span>
        </button>

        <ul class="dropdown-menu dropdown-menu-end notification-dropdown" aria-labelledby="notificationDropdown">
          <li><h6 class="dropdown-header">Overdue Publications</h6></li>
          <li><hr class="dropdown-divider"></li>
          <div id="notificationList"></div>
          <div class="more-link">
            <a href="all-notifications.html" class="text-primary">View All Notifications</a>
          </div>
        </ul>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <div class="container-fluid" style="margin-top: 80px;">
    <div class="row">
      <div class="col-12">
        <div class="card shadow-sm">
          <div class="card-body">
            <h5 class="card-title">Book Management Dashboard</h5>
            <p class="text-muted">View and manage publication status</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

  <!-- SharePoint JSOM -->
  <script>
    var notificationItems = [];

    function loadNotifications() {
      var ctx = SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      var query = new SP.CamlQuery();
      var today = new Date().toISOString().split('T')[0];

      query.set_viewXml(
        `<View>
            <Query>
              <Where>
                <Leq>
                  <FieldRef Name='PublicationDate' />
                  <Value IncludeTimeValue='FALSE' Type='DateTime'>${today}</Value>
                </Leq>
              </Where>
            </Query>
          </View>`
      );

      var items = list.getItems(query);
      ctx.load(items);

      ctx.executeQueryAsync(
        function() {
          var listEnumerator = items.getEnumerator();
          notificationItems = [];

          var promises = [];

          while (listEnumerator.moveNext()) {
            var item = listEnumerator.get_current();
            var authorField = item.get_item("AuthorName");
            var authorId = authorField.get_lookupId();

            var user = ctx.get_web().getUserById(authorId);
            ctx.load(user);

            notificationItems.push({
              title: item.get_item("BookName"),
              dateRaw: new Date(item.get_item("PublicationDate")),
              date: new Date(item.get_item("PublicationDate")).toLocaleDateString(),
              author: user,
              isbn: item.get_item("ISBN")
            });
          }

          ctx.executeQueryAsync(
            function() {
              // Sort by newest first
              notificationItems.sort((a, b) => b.dateRaw - a.dateRaw);

              updateNotificationUI();
              sendEmailNotifications();
            },
            function(sender, args) {
              console.error("Error loading users:", args.get_message());
            }
          );
        },
        function(sender, args) {
          console.error("Error loading items:", args.get_message());
        }
      );
    }

    function updateNotificationUI() {
      var notificationList = $('#notificationList');
      var countSpan = $('#notificationCount');

      notificationList.empty();
      countSpan.text(notificationItems.length);

      var topItems = notificationItems.slice(0, 3);

      topItems.forEach(function(item) {
        var notificationHtml = `
          <li>
            <div class="notification-item px-3 py-2">
              <div class="d-flex justify-content-between">
                <strong class="text-truncate">${item.title}</strong>
                <small class="text-muted">${item.date}</small>
              </div>
              <div class="text-muted text-truncate">
                Author: ${item.author.get_title()}
              </div>
              <small class="text-primary">ISBN: ${item.isbn}</small>
            </div>
          </li>
          <li><hr class="dropdown-divider"></li>
        `;
        notificationList.append(notificationHtml);
      });
    }

    function sendEmailNotifications() {
      notificationItems.forEach(function(item) {
        var emailProps = {
          To: [item.author.get_email()],
          Subject: "Overdue Publication Notification",
          Body: `Dear ${item.author.get_title()},<br><br>
                 The book "<strong>${item.title}</strong>" (ISBN: ${item.isbn}) has passed its publication date.<br>
                 Publication Date: ${item.date}<br><br>
                 Please update the publication information if necessary.`
        };

        try {
          SP.Utilities.Utility.sendEmail(SP.ClientContext.get_current(), emailProps);
          SP.ClientContext.get_current().executeQueryAsync(
            function() {
              console.log("Email sent to:", item.author.get_email());
            },
            function(sender, args) {
              console.error("Failed to send email:", args.get_message());
            }
          );
        } catch (e) {
          console.error("Email API not supported in this environment.");
        }
      });
    }

    ExecuteOrDelayUntilScriptLoaded(function() {
      SP.SOD.executeFunc('sp.js', 'SP.ClientContext', function() {
        SP.SOD.registerSod('sp.userprofiles.js', SP.Utilities.Utility.getLayoutsPageUrl('sp.userprofiles.js'));
        SP.SOD.executeFunc('sp.userprofiles.js', 'SP.Utilities.Utility', loadNotifications);
      });
    }, 'sp.js');
  </script>
</body>
</html>








function sendEmailWithFallback(to, subject, body) {
    return new Promise(function(resolve, reject) {
        // First try the standard method
        if (typeof SP.Utilities.Utility !== 'undefined' && 
            typeof SP.Utilities.Utility.sendEmail === 'function') {
            
            var emailProperties = new SP.Utilities.EmailProperties();
            emailProperties.set_to(to);
            emailProperties.set_subject(subject);
            emailProperties.set_body(body);
            
            SP.Utilities.Utility.sendEmail(
                SP.ClientContext.get_current(), 
                emailProperties
            );
            
            SP.ClientContext.get_current().executeQueryAsync(
                function() { resolve(true); },
                function(sender, args) { reject(args.get_message()); }
            );
        } 
        // Fallback to REST API if JSOM fails
        else {
            sendEmailViaREST(to, subject, body)
                .then(resolve)
                .catch(reject);
        }
    });
}

// REST API fallback
function sendEmailViaREST(to, subject, body) {
    var endpoint = _spPageContextInfo.webAbsoluteUrl + 
                  "/_api/SP.Utilities.Utility.SendEmail";
    
    return $.ajax({
        url: endpoint,
        type: "POST",
        data: JSON.stringify({
            'properties': {
                '__metadata': { 'type': 'SP.Utilities.EmailProperties' },
                'To': { 'results': [to] },
                'Subject': subject,
                'Body': body
            }
        }),
        headers: {
            "Accept": "application/json;odata=verbose",
            "Content-Type": "application/json;odata=verbose",
            "X-RequestDigest": $("#__REQUESTDIGEST").val()
        }
    });
}








function sendEmailNotifications() {
    // Ensure SP utilities are loaded first
    SP.SOD.executeFunc('sp.js', 'SP.ClientContext', function() {
        SP.SOD.executeFunc('sp.js', 'SP.Utilities.Utility', function() {
            notificationItems.forEach(function(item) {
                try {
                    var emailProperties = new SP.Utilities.EmailProperties();
                    emailProperties.set_to(item.author.get_email());
                    emailProperties.set_subject("Overdue Publication Notification");
                    emailProperties.set_body(
                        `Dear ${item.author.get_title()},<br><br>
                        The book "${item.title}" (ISBN: ${item.isbn}) has passed its publication date.<br>
                        Publication Date: ${item.date}<br><br>
                        Please update the publication information if necessary.`
                    );

                    SP.Utilities.Utility.sendEmail(
                        SP.ClientContext.get_current(), 
                        emailProperties
                    );
                    
                    SP.ClientContext.get_current().executeQueryAsync(
                        function() {
                            console.log("Email sent to:", item.author.get_email());
                        },
                        function(sender, args) {
                            console.error("Failed to send email:", args.get_message());
                        }
                    );
                } catch (e) {
                    console.error("Email error:", e);
                }
            });
        });
    });
}




<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Book Management – Update & Delete</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

  <!-- SharePoint JSOM + People Picker -->
  <script src="/_layouts/15/sp.runtime.js" type="text/javascript"></script>
  <script src="/_layouts/15/sp.js" type="text/javascript"></script>
  <script src="/_layouts/15/clienttemplates.js" type="text/javascript"></script>
  <script src="/_layouts/15/clientforms.js" type="text/javascript"></script>
  <script src="/_layouts/15/clientpeoplepicker.js" type="text/javascript"></script>
  <script src="/_layouts/15/autofill.js" type="text/javascript"></script>
</head>
<body class="bg-light p-4">
  <div class="container">
    <h2 class="mb-4 text-center text-primary">Book Management</h2>

    <!-- table of books -->
    <div class="table-responsive mb-5">
      <table class="table table-bordered table-striped text-center" id="bookTable">
        <thead class="table-dark">
          <tr>
            <th>Actions</th>
            <th>Book Name</th>
            <th>Publication Date</th>
            <th>Author</th>
            <th>ISBN</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>

    <!-- update card -->
    <div class="card shadow">
      <div class="card-header bg-primary text-white">
        <h4 class="mb-0">Update Book Details</h4>
      </div>
      <div class="card-body">
        <div class="row g-3">
          <div class="col-md-6">
            <label class="form-label">Book Name</label>
            <input id="bookName" class="form-control" />
          </div>
          <div class="col-md-6">
            <label class="form-label">Publication Date</label>
            <input id="pubDate" type="date" class="form-control" />
          </div>
          <div class="col-md-6">
            <label class="form-label">Author (People Picker)</label>
            <div id="peoplePickerAuthor"></div>
          </div>
          <div class="col-md-6">
            <label class="form-label">ISBN</label>
            <input id="isbn" class="form-control" />
          </div>
        </div>
        <input type="hidden" id="itemId" />
        <div class="mt-4 text-end">
          <button class="btn btn-success" onclick="updateItem()">Update Book</button>
        </div>
      </div>
    </div>
  </div>

  <script type="text/javascript">
    // Initialize People Picker & then load items
    ExecuteOrDelayUntilScriptLoaded(function() {
      initPeoplePicker("peoplePickerAuthor");
      loadItems();
    }, "sp.js");

    function initPeoplePicker(domId) {
      var schema = {
        PrincipalAccountType: 'User,DL,SecGroup,SPGroup',
        SearchPrincipalSource: 15,
        ResolvePrincipalSource: 15,
        AllowMultipleValues: false,
        MaximumEntitySuggestions: 50,
        Width: '100%'
      };
      SPClientPeoplePicker_InitStandaloneControlWrapper(domId, null, schema);
    }

    function getSelectedUserKey() {
      var pp = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
      var users = pp.GetAllUserInfo();
      return (users.length>0)? users[0].Key : null;
    }

    function loadItems() {
      var ctx = SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      var items = list.getItems(new SP.CamlQuery());
      // include only the exact internal names
      ctx.load(items, 'Include(Id, BookName, Publication_x0020_date, AuthorName, ISBN)');
      ctx.executeQueryAsync(function() {
        var tbody = document.querySelector("#bookTable tbody");
        tbody.innerHTML = '';
        var enumItems = items.getEnumerator();
        while(enumItems.moveNext()) {
          var it = enumItems.get_current();
          var authorField = it.get_item("AuthorName");
          var authorText = authorField? authorField.get_lookupValue() : '';
          var dateVal = it.get_item("Publication_x0020_date");
          var dateStr = dateVal? new Date(dateVal).toISOString().split('T')[0] : '';
          tbody.innerHTML += `
            <tr>
              <td>
                <button class="btn btn-sm btn-outline-primary" onclick="editItem(${it.get_id()})">Select</button>
                <button class="btn btn-sm btn-outline-danger ms-2" onclick="deleteItem(${it.get_id()})">Delete</button>
              </td>
              <td>${it.get_item("BookName")||''}</td>
              <td>${dateStr}</td>
              <td>${authorText}</td>
              <td>${it.get_item("ISBN")||''}</td>
            </tr>`;
        }
      }, function(s,a){
        alert("Load failed: " + a.get_message());
      });
    }

    function editItem(id) {
      var ctx = SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      var it = list.getItemById(id);
      ctx.load(it, 'BookName, Publication_x0020_date, AuthorName, ISBN');
      ctx.executeQueryAsync(function(){
        document.getElementById("itemId").value = id;
        document.getElementById("bookName").value = it.get_item("BookName")||'';
        var d = it.get_item("Publication_x0020_date");
        document.getElementById("pubDate").value = d? new Date(d).toISOString().split('T')[0] : '';
        document.getElementById("isbn").value = it.get_item("ISBN")||'';
        // reset people picker
        document.getElementById("peoplePickerAuthor").innerHTML = '';
        initPeoplePicker("peoplePickerAuthor");
        setTimeout(function(){
          var auth = it.get_item("AuthorName");
          if(auth) {
            SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan.AddUserKeys(auth.get_lookupValue());
          }
        }, 500);
      }, function(s,a){
        alert("Edit load failed: "+a.get_message());
      });
    }

    function updateItem() {
      var id = document.getElementById("itemId").value;
      var name = document.getElementById("bookName").value.trim();
      var isbn = document.getElementById("isbn").value.trim();
      var date = document.getElementById("pubDate").value;
      var authKey = getSelectedUserKey();
      if(!id || !name || !isbn || !date || !authKey) {
        return alert("All fields including Author are required");
      }

      var ctx = SP.ClientContext.get_current();
      var web = ctx.get_web();
      var list = web.get_lists().getByTitle("Book Management");
      var it = list.getItemById(id);

      var user = web.ensureUser(authKey);
      ctx.load(user);
      ctx.executeQueryAsync(function(){
        var uv = SP.FieldUserValue.fromUser(user.get_loginName());
        it.set_item("BookName", name);
        it.set_item("Publication_x0020_date", new Date(date));
        it.set_item("ISBN", isbn);
        it.set_item("AuthorName", uv);
        it.update();
        ctx.executeQueryAsync(function(){
          alert("Book updated!");
          loadItems();
          // clear form
          document.getElementById("itemId").value='';
          document.getElementById("bookName").value='';
          document.getElementById("isbn").value='';
          document.getElementById("pubDate").value='';
          document.getElementById("peoplePickerAuthor").innerHTML='';
          initPeoplePicker("peoplePickerAuthor");
        }, function(s,a){
          alert("Update failed: "+a.get_message());
        });
      }, function(s,a){
        alert("Author lookup failed: "+a.get_message());
      });
    }

    function deleteItem(id) {
      if(!confirm("Delete this book?")) return;
      var ctx = SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      list.getItemById(id).deleteObject();
      ctx.executeQueryAsync(function(){
        alert("Deleted.");
        loadItems();
      }, function(s,a){
        alert("Delete failed: "+a.get_message());
      });
    }
  </script>
</body>
</html>





<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Add Book Details</title>
  <!-- Bootstrap 5 CDN -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #495057;
    }
    .card {
      border-radius: 15px;
    }
    .form-label {
      color: #fff;
    }
  </style>
</head>
<body>

  <div class="container py-5">
    <div class="row justify-content-center">
      <div class="col-md-6">
        <div class="card shadow-lg p-4">
          <h4 class="text-center mb-4">Add Book Details</h4>
          <form>
            <div class="mb-3">
              <label for="bookName" class="form-label">Book Name</label>
              <input type="text" class="form-control" id="bookName" placeholder="Enter book name">
            </div>
            <div class="mb-3">
              <label for="authorName" class="form-label">Author Name</label>
              <input type="text" class="form-control" id="authorName" placeholder="Enter author name">
            </div>
            <div class="mb-3">
              <label for="isbn" class="form-label">ISBN</label>
              <input type="text" class="form-control" id="isbn" placeholder="Enter ISBN">
            </div>
            <div class="mb-3">
              <label for="publicationDate" class="form-label">Publication Date</label>
              <input type="date" class="form-control" id="publicationDate">
            </div>
            <button type="submit" class="btn btn-primary w-100">Add Book</button>
          </form>
        </div>
      </div>
    </div>
  </div>

</body>
</html>
