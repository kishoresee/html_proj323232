<!DOCTYPE html>
<html>
<head>
    <title>Custom Ribbon Creator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
        }
        button {
            background-color: #0078d4;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-bottom: 20px;
        }
        #status {
            padding: 10px;
            margin-top: 20px;
            border: 1px solid #ddd;
            border-radius: 4px;
            min-height: 20px;
        }
        .success {
            color: green;
        }
        .error {
            color: red;
        }
    </style>
</head>
<body>
    <h1>Custom Ribbon Creator</h1>
    <button onclick="createCustomRibbon()">Create Custom Ribbon</button>
    <div id="status">Click the button to create a custom ribbon tab.</div>

    <script>
        // Main function triggered by button click
        function createCustomRibbon() {
            document.getElementById('status').innerHTML = "Loading SharePoint libraries...";
            
            // Load required SharePoint libraries dynamically
            loadSharePointScripts()
                .then(() => {
                    document.getElementById('status').innerHTML = "Creating ribbon customization...";
                    return registerCustomRibbon();
                })
                .then(() => {
                    document.getElementById('status').innerHTML = 
                        '<span class="success">Custom ribbon created successfully! Refreshing page...</span>';
                    setTimeout(() => location.reload(), 2000);
                })
                .catch(error => {
                    document.getElementById('status').innerHTML = 
                        '<span class="error">Error: ' + error.message + '</span>';
                    console.error(error);
                });
        }

        // Function to load SharePoint scripts sequentially
        function loadSharePointScripts() {
            return new Promise((resolve, reject) => {
                const scripts = [
                    '/_layouts/15/init.js',
                    '/_layouts/15/MicrosoftAjax.js',
                    '/_layouts/15/SP.Runtime.js',
                    '/_layouts/15/SP.js',
                    '/_layouts/15/SP.Ribbon.js'
                ];

                function loadScript(index) {
                    if (index >= scripts.length) {
                        resolve();
                        return;
                    }

                    const script = document.createElement('script');
                    script.src = scripts[index];
                    script.onload = () => loadScript(index + 1);
                    script.onerror = () => reject(new Error('Failed to load ' + scripts[index]));
                    document.head.appendChild(script);
                }

                loadScript(0);
            });
        }

        // Function to register the custom ribbon (SharePoint 2016 version)
        function registerCustomRibbon() {
            return new Promise((resolve, reject) => {
                try {
                    // Define our ribbon XML
                    const ribbonXml = `
                        <CommandUIExtension xmlns="http://schemas.microsoft.com/sharepoint/">
                            <CommandUIDefinitions>
                                <CommandUIDefinition Location="Ribbon.Tabs._children">
                                    <Tab Id="Ribbon.CustomTab" 
                                         Title="Book Management" 
                                         Sequence="100">
                                        <Scaling Id="Ribbon.CustomTab.Scaling">
                                            <MaxSize Id="Ribbon.CustomTab.MaxSize" 
                                                     GroupId="Ribbon.CustomTab.Group1" 
                                                     Size="OneLargeTwoMedium"/>
                                            <Scale Id="Ribbon.CustomTab.Scaling.Group1" 
                                                   GroupId="Ribbon.CustomTab.Group1" 
                                                   Size="OneLargeTwoMedium"/>
                                        </Scaling>
                                        <Groups Id="Ribbon.CustomTab.Groups">
                                            <Group Id="Ribbon.CustomTab.Group1" 
                                                   Title="Book Actions" 
                                                   Description="Custom book management actions" 
                                                   Sequence="100" 
                                                   Template="Ribbon.Templates.Flexible2">
                                                <Controls Id="Ribbon.CustomTab.Group1.Controls">
                                                    <Button Id="Ribbon.CustomTab.Group1.Button1" 
                                                            Command="Custom_AddBook" 
                                                            Sequence="100" 
                                                            Image16by16="/_layouts/15/images/formatmap16x16.png" 
                                                            Image16by16Top="-144" 
                                                            Image16by16Left="-288" 
                                                            Image32by32="/_layouts/15/images/formatmap32x32.png" 
                                                            Image32by32Top="-192" 
                                                            Image32by32Left="-288" 
                                                            LabelText="Add Book" 
                                                            Description="Add a new book to the library" 
                                                            TemplateAlias="o1"/>
                                                </Controls>
                                            </Group>
                                        </Groups>
                                    </Tab>
                                </CommandUIDefinition>
                            </CommandUIDefinitions>
                            <CommandUIHandlers>
                                <CommandUIHandler Command="Custom_AddBook" 
                                                CommandAction="javascript:alert('Add Book clicked!');" 
                                                EnabledScript="javascript:true;"/>
                            </CommandUIHandlers>
                        </CommandUIExtension>
                    `;

                    // SharePoint 2016 specific implementation
                    ExecuteOrDelayUntilScriptLoaded(function() {
                        // Get the ribbon manager
                        var ribbonManager = SP.Ribbon.PageManager.get_instance();
                        
                        // SharePoint 2016 doesn't use addCommandHandler the same way
                        // Instead, we'll register our ribbon XML directly
                        
                        // Create a custom page component
                        var ribbonComponent = {
                            id: 'CustomRibbonComponent',
                            getGlobalCommands: function() { return []; },
                            getFocusedCommands: function() { return []; },
                            isFocusable: function() { return false; },
                            receiveFocus: function() { return false; },
                            canHandleCommand: function() { return false; },
                            handleCommand: function() { return false; },
                            getMarkup: function() { return ribbonXml; }
                        };
                        
                        // Add the component to the ribbon
                        ribbonManager.addPageComponent(ribbonComponent);
                        
                        // Make the tab visible
                        ribbonManager.add_ribbonInited(function() {
                            SetRibbonTabVisible("Ribbon.CustomTab", true);
                        });
                        
                        resolve();
                    }, 'sp.ribbon.js');
                } catch (error) {
                    reject(error);
                }
            });
        }
    </script>
</body>
</html>








<!DOCTYPE html>
<html>
<head>
  <title>Custom Ribbon Tab</title>
  <meta charset="utf-8">
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
    }
    button {
      padding: 10px 20px;
      font-size: 16px;
      background-color: #0078d4;
      color: white;
      border: none;
      cursor: pointer;
    }
    #status {
      margin-top: 20px;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <h2>Create Custom Ribbon</h2>
  <button onclick="createRibbon()">Create Ribbon</button>
  <div id="status"></div>

  <script type="text/javascript">
    function createRibbon() {
      document.getElementById('status').innerText = 'Creating ribbon customization...';

      SP.SOD.executeFunc('sp.ribbon.js', 'SP.Ribbon.PageManager', function () {
        var ribbonManager = SP.Ribbon.PageManager.get_instance();

        ribbonManager.add_ribbonInited(function () {
          var ribbonXml = '<CommandUIExtension xmlns="http://schemas.microsoft.com/sharepoint/">' +
            '<CommandUIDefinitions>' +
            '<CommandUIDefinition Location="Ribbon.Tabs._children">' +
            '<Tab Id="Ribbon.CustomTab" Title="My Custom Tab" Sequence="501" Description="Custom tab">' +
            '<Scaling Id="Ribbon.CustomTab.Scaling">' +
            '<MaxSize Id="Ribbon.CustomTab.MaxSize" GroupId="Ribbon.CustomTab.Group1" Size="LargeLarge"/>' +
            '</Scaling>' +
            '<Groups Id="Ribbon.CustomTab.Groups">' +
            '<Group Id="Ribbon.CustomTab.Group1" Title="My Actions" Template="Ribbon.Templates.Flexible2">' +
            '<Controls Id="Ribbon.CustomTab.Group1.Controls">' +
            '<Button Id="Ribbon.CustomTab.Group1.Button1" Command="MyCommand1" LabelText="Hello" ' +
            'Image16by16="/_layouts/15/images/formatmap16x16.png" Image32by32="/_layouts/15/images/formatmap32x32.png" ' +
            'TemplateAlias="o1" />' +
            '</Controls>' +
            '</Group>' +
            '</Groups>' +
            '</Tab>' +
            '</CommandUIDefinition>' +
            '</CommandUIDefinitions>' +
            '<CommandUIHandlers>' +
            '<CommandUIHandler Command="MyCommand1" CommandAction="javascript:alert(\'Hello from ribbon!\');" EnabledScript="javascript:true;" />' +
            '</CommandUIHandlers>' +
            '</CommandUIExtension>';

          var ribbon = ribbonManager.get_ribbon();
          if (ribbon) {
            ribbon.importRibbonXml(ribbonXml);
            ribbon.refreshRibbon();
            ribbon.setSelectedTab('Ribbon.CustomTab');
            document.getElementById('status').innerText = 'Ribbon created successfully!';
          } else {
            document.getElementById('status').innerText = 'Ribbon not available.';
          }
        });
      });
    }
  </script>
</body>
</html>






<!DOCTYPE html>
<html>
<head>
    <title>Custom Ribbon Creator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
        }
        button {
            background-color: #0078d4;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-bottom: 20px;
        }
        #status {
            padding: 10px;
            margin-top: 20px;
            border: 1px solid #ddd;
            border-radius: 4px;
            min-height: 20px;
        }
        .success {
            color: green;
        }
        .error {
            color: red;
        }
    </style>
</head>
<body>
    <h1>Custom Ribbon Creator</h1>
    <button onclick="createCustomRibbon()">Create Custom Ribbon</button>
    <div id="status">Click the button to create a custom ribbon tab.</div>

    <script type="text/javascript">
        function createCustomRibbon() {
            document.getElementById('status').innerHTML = "Loading SharePoint libraries...";

            loadSharePointScripts()
                .then(() => {
                    document.getElementById('status').innerHTML = "Creating ribbon customization...";
                    return registerCustomRibbon();
                })
                .then(() => {
                    document.getElementById('status').innerHTML = 
                        '<span class="success">Custom ribbon created successfully! Refreshing page...</span>';
                    setTimeout(() => location.reload(), 2000);
                })
                .catch(error => {
                    document.getElementById('status').innerHTML = 
                        '<span class="error">Error: ' + error.message + '</span>';
                    console.error(error);
                });
        }

        function loadSharePointScripts() {
            return new Promise((resolve, reject) => {
                const scripts = [
                    '/_layouts/15/init.js',
                    '/_layouts/15/MicrosoftAjax.js',
                    '/_layouts/15/SP.Runtime.js',
                    '/_layouts/15/SP.js',
                    '/_layouts/15/SP.Ribbon.js'
                ];

                function loadScript(index) {
                    if (index >= scripts.length) {
                        resolve();
                        return;
                    }

                    const script = document.createElement('script');
                    script.src = scripts[index];
                    script.onload = () => loadScript(index + 1);
                    script.onerror = () => reject(new Error('Failed to load ' + scripts[index]));
                    document.head.appendChild(script);
                }

                loadScript(0);
            });
        }

        function registerCustomRibbon() {
            return new Promise((resolve, reject) => {
                try {
                    const ribbonXml = `
                        <CommandUIExtension xmlns="http://schemas.microsoft.com/sharepoint/">
                            <CommandUIDefinitions>
                                <CommandUIDefinition Location="Ribbon.Tabs._children">
                                    <Tab Id="Ribbon.CustomTab" Title="Book Management" Sequence="100">
                                        <Scaling Id="Ribbon.CustomTab.Scaling">
                                            <MaxSize Id="Ribbon.CustomTab.MaxSize" GroupId="Ribbon.CustomTab.Group1" Size="OneLargeTwoMedium"/>
                                            <Scale Id="Ribbon.CustomTab.Scaling.Group1" GroupId="Ribbon.CustomTab.Group1" Size="OneLargeTwoMedium"/>
                                        </Scaling>
                                        <Groups Id="Ribbon.CustomTab.Groups">
                                            <Group Id="Ribbon.CustomTab.Group1" Title="Book Actions" Description="Custom book management actions" Sequence="100" Template="Ribbon.Templates.Flexible2">
                                                <Controls Id="Ribbon.CustomTab.Group1.Controls">
                                                    <Button Id="Ribbon.CustomTab.Group1.Button1" Command="Custom_AddBook" Sequence="100" Image16by16="/_layouts/15/images/formatmap16x16.png" Image16by16Top="-144" Image16by16Left="-288" Image32by32="/_layouts/15/images/formatmap32x32.png" Image32by32Top="-192" Image32by32Left="-288" LabelText="Add Book" Description="Add a new book to the library" TemplateAlias="o1"/>
                                                    <Button Id="Ribbon.CustomTab.Group1.Button2" Command="Custom_ViewReports" Sequence="200" Image16by16="/_layouts/15/images/formatmap16x16.png" Image16by16Top="-144" Image16by16Left="-432" Image32by32="/_layouts/15/images/formatmap32x32.png" Image32by32Top="-192" Image32by32Left="-432" LabelText="View Reports" Description="View book reports" TemplateAlias="o1"/>
                                                </Controls>
                                            </Group>
                                        </Groups>
                                    </Tab>
                                </CommandUIDefinition>
                            </CommandUIDefinitions>
                            <CommandUIHandlers>
                                <CommandUIHandler Command="Custom_AddBook" CommandAction="javascript:alert('Add Book clicked! Replace this with your function.');" EnabledScript="javascript: true;"/>
                                <CommandUIHandler Command="Custom_ViewReports" CommandAction="javascript:alert('View Reports clicked! Replace this with your function.');" EnabledScript="javascript: true;"/>
                            </CommandUIHandlers>
                        </CommandUIExtension>
                    `;

                    ExecuteOrDelayUntilScriptLoaded(function() {
                        SP.SOD.executeFunc('sp.ribbon.js', 'SP.Ribbon.PageManager', function() {
                            const ribbonManager = SP.Ribbon.PageManager.get_instance();

                            ribbonManager.add_ribbonInited(function() {
                                const ribbon = ribbonManager.get_ribbon();
                                if (ribbon) {
                                    ribbon.importRibbonXml(ribbonXml);
                                    ribbon.refreshRibbon();
                                    ribbon.setSelectedTab('Ribbon.CustomTab');
                                    resolve();
                                } else {
                                    reject(new Error('Ribbon not available.'));
                                }
                            });
                        });
                    }, 'sp.ribbon.js');
                } catch (error) {
                    reject(error);
                }
            });
        }
    </script>
</body>
</html>









<!DOCTYPE html>
<html>
<head>
  <title>Custom Ribbon - SharePoint 2016</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
    }
    button {
      background-color: #0078d4;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      font-size: 16px;
      cursor: pointer;
      margin-bottom: 20px;
    }
    #status {
      padding: 10px;
      border: 1px solid #ccc;
      margin-top: 20px;
      border-radius: 4px;
      color: #333;
    }
    .success { color: green; }
    .error { color: red; }
  </style>
</head>
<body>
  <h2>Create Custom Ribbon</h2>
  <button onclick="createCustomRibbon()">Create Ribbon Tab</button>
  <div id="status">Click to add the Book Management tab to the Ribbon.</div>

  <script>
    function createCustomRibbon() {
      document.getElementById('status').textContent = "Loading SharePoint libraries...";

      loadScriptsSequentially([
        '/_layouts/15/init.js',
        '/_layouts/15/MicrosoftAjax.js',
        '/_layouts/15/SP.Runtime.js',
        '/_layouts/15/SP.js',
        '/_layouts/15/SP.Ribbon.js'
      ]).then(() => {
        document.getElementById('status').textContent = "Creating Ribbon...";
        addCustomRibbon();
      }).catch(err => {
        document.getElementById('status').innerHTML = '<span class="error">Error: ' + err.message + '</span>';
      });
    }

    function loadScriptsSequentially(scripts) {
      return new Promise((resolve, reject) => {
        let index = 0;
        function loadNext() {
          if (index >= scripts.length) return resolve();
          let script = document.createElement('script');
          script.src = scripts[index++];
          script.onload = loadNext;
          script.onerror = () => reject(new Error("Failed to load " + script.src));
          document.head.appendChild(script);
        }
        loadNext();
      });
    }

    function addCustomRibbon() {
      ExecuteOrDelayUntilScriptLoaded(() => {
        SP.SOD.executeFunc('sp.ribbon.js', 'SP.Ribbon.PageManager', () => {
          const ribbonXml = `
            <CommandUIExtension xmlns="http://schemas.microsoft.com/sharepoint/">
              <CommandUIDefinitions>
                <CommandUIDefinition Location="Ribbon.Tabs._children">
                  <Tab Id="Ribbon.CustomTab" Title="Book Management" Sequence="10000" 
                       Description="Manage books">
                    <Scaling Id="Ribbon.CustomTab.Scaling">
                      <MaxSize Id="Ribbon.CustomTab.MaxSize" GroupId="Ribbon.CustomTab.Group1" Size="LargeLarge" />
                      <Scale Id="Ribbon.CustomTab.Scale" GroupId="Ribbon.CustomTab.Group1" Size="LargeLarge" />
                    </Scaling>
                    <Groups Id="Ribbon.CustomTab.Groups">
                      <Group Id="Ribbon.CustomTab.Group1" Title="Actions" Sequence="10" Template="Ribbon.Templates.Flexible2">
                        <Controls Id="Ribbon.CustomTab.Group1.Controls">
                          <Button Id="Ribbon.CustomTab.Group1.Button1"
                                  Command="Custom_AddBook"
                                  Sequence="10"
                                  Image16by16="/_layouts/15/images/formatmap16x16.png"
                                  Image16by16Top="-144" Image16by16Left="-288"
                                  Image32by32="/_layouts/15/images/formatmap32x32.png"
                                  Image32by32Top="-192" Image32by32Left="-288"
                                  LabelText="Add Book"
                                  TemplateAlias="o1"
                                  Description="Add a new book to the library"/>
                          <Button Id="Ribbon.CustomTab.Group1.Button2"
                                  Command="Custom_ViewReports"
                                  Sequence="20"
                                  Image16by16="/_layouts/15/images/formatmap16x16.png"
                                  Image16by16Top="-144" Image16by16Left="-432"
                                  Image32by32="/_layouts/15/images/formatmap32x32.png"
                                  Image32by32Top="-192" Image32by32Left="-432"
                                  LabelText="View Reports"
                                  TemplateAlias="o1"
                                  Description="View reports for books"/>
                        </Controls>
                      </Group>
                    </Groups>
                  </Tab>
                </CommandUIDefinition>
              </CommandUIDefinitions>
              <CommandUIHandlers>
                <CommandUIHandler Command="Custom_AddBook" 
                                  CommandAction="javascript:alert('Add Book clicked!');"
                                  EnabledScript="javascript:true;" />
                <CommandUIHandler Command="Custom_ViewReports" 
                                  CommandAction="javascript:alert('View Reports clicked!');"
                                  EnabledScript="javascript:true;" />
              </CommandUIHandlers>
            </CommandUIExtension>
          `;

          const ribbonManager = SP.Ribbon.PageManager.get_instance();
          const componentId = "CustomRibbonComponent_" + new Date().getTime();

          const customComponent = {
            getId: function () { return componentId; },
            init: function () { return true; },
            dispose: function () { },
            getFocusedCommands: function () { return []; },
            getGlobalCommands: function () { return ["Custom_AddBook", "Custom_ViewReports"]; },
            canHandleCommand: function (commandId) {
              return commandId === "Custom_AddBook" || commandId === "Custom_ViewReports";
            },
            handleCommand: function (commandId) {
              if (commandId === "Custom_AddBook") {
                alert("Add Book clicked!");
              } else if (commandId === "Custom_ViewReports") {
                alert("View Reports clicked!");
              }
            }
          };

          ribbonManager.addPageComponent(customComponent);

          const ribbonExtension = Sys.Serialization.JavaScriptSerializer.deserialize(ribbonXml);
          SP.Ribbon.PageManager.get_instance().loadRibbonExtensions([ribbonExtension]);

          SetRibbonTabVisible("Ribbon.CustomTab", true);
          document.getElementById('status').innerHTML = '<span class="success">Ribbon created successfully!</span>';
        });
      }, 'sp.ribbon.js');
    }
  </script>
</body>
</html>






<!DOCTYPE html>
<html>
<head>
    <title>Custom Ribbon Creator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
        }
        button {
            background-color: #0078d4;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-bottom: 20px;
        }
        #status {
            padding: 10px;
            margin-top: 20px;
            border: 1px solid #ddd;
            border-radius: 4px;
            min-height: 20px;
        }
        .success {
            color: green;
        }
        .error {
            color: red;
        }
    </style>
</head>
<body>
    <h1>Custom Ribbon Creator</h1>
    <button onclick="createCustomRibbon()">Create Custom Ribbon</button>
    <div id="status">Click the button to create a custom ribbon tab.</div>

    <script>
        // Main function triggered by button click
        function createCustomRibbon() {
            document.getElementById('status').innerHTML = "Loading SharePoint libraries...";
            
            // Load required SharePoint libraries dynamically
            loadSharePointScripts()
                .then(() => {
                    document.getElementById('status').innerHTML = "Creating ribbon customization...";
                    return registerCustomRibbon();
                })
                .then(() => {
                    document.getElementById('status').innerHTML = 
                        '<span class="success">Custom ribbon created successfully! Refreshing page...</span>';
                    setTimeout(() => location.reload(), 2000);
                })
                .catch(error => {
                    document.getElementById('status').innerHTML = 
                        '<span class="error">Error: ' + error.message + '</span>';
                    console.error(error);
                });
        }

        // Function to load SharePoint scripts sequentially
        function loadSharePointScripts() {
            return new Promise((resolve, reject) => {
                const scripts = [
                    '/_layouts/15/init.js',
                    '/_layouts/15/MicrosoftAjax.js',
                    '/_layouts/15/SP.Runtime.js',
                    '/_layouts/15/SP.js',
                    '/_layouts/15/SP.Ribbon.js'
                ];

                function loadScript(index) {
                    if (index >= scripts.length) {
                        resolve();
                        return;
                    }

                    const script = document.createElement('script');
                    script.src = scripts[index];
                    script.onload = () => loadScript(index + 1);
                    script.onerror = () => reject(new Error('Failed to load ' + scripts[index]));
                    document.head.appendChild(script);
                }

                loadScript(0);
            });
        }

        // Function to register the custom ribbon
        function registerCustomRibbon() {
            return new Promise((resolve, reject) => {
                try {
                    // Define our ribbon XML
                    const ribbonXml = `
                        <CommandUIExtension xmlns="http://schemas.microsoft.com/sharepoint/">
                            <CommandUIDefinitions>
                                <CommandUIDefinition Location="Ribbon.Tabs._children">
                                    <Tab Id="Ribbon.CustomTab" 
                                         Title="Book Management" 
                                         Sequence="100">
                                        <Scaling Id="Ribbon.CustomTab.Scaling">
                                            <MaxSize Id="Ribbon.CustomTab.MaxSize" 
                                                     GroupId="Ribbon.CustomTab.Group1" 
                                                     Size="OneLargeTwoMedium"/>
                                            <Scale Id="Ribbon.CustomTab.Scaling.Group1" 
                                                   GroupId="Ribbon.CustomTab.Group1" 
                                                   Size="OneLargeTwoMedium"/>
                                        </Scaling>
                                        <Groups Id="Ribbon.CustomTab.Groups">
                                            <Group Id="Ribbon.CustomTab.Group1" 
                                                   Title="Book Actions" 
                                                   Description="Custom book management actions" 
                                                   Sequence="100" 
                                                   Template="Ribbon.Templates.Flexible2">
                                                <Controls Id="Ribbon.CustomTab.Group1.Controls">
                                                    <Button Id="Ribbon.CustomTab.Group1.Button1" 
                                                            Command="Custom_AddBook" 
                                                            Sequence="100" 
                                                            Image16by16="/_layouts/15/images/formatmap16x16.png" 
                                                            Image16by16Top="-144" 
                                                            Image16by16Left="-288" 
                                                            Image32by32="/_layouts/15/images/formatmap32x32.png" 
                                                            Image32by32Top="-192" 
                                                            Image32by32Left="-288" 
                                                            LabelText="Add Book" 
                                                            Description="Add a new book to the library" 
                                                            TemplateAlias="o1"/>
                                                    <Button Id="Ribbon.CustomTab.Group1.Button2" 
                                                            Command="Custom_ViewReports" 
                                                            Sequence="200" 
                                                            Image16by16="/_layouts/15/images/formatmap16x16.png" 
                                                            Image16by16Top="-144" 
                                                            Image16by16Left="-432" 
                                                            Image32by32="/_layouts/15/images/formatmap32x32.png" 
                                                            Image32by32Top="-192" 
                                                            Image32by32Left="-432" 
                                                            LabelText="View Reports" 
                                                            Description="View book reports" 
                                                            TemplateAlias="o1"/>
                                                </Controls>
                                            </Group>
                                        </Groups>
                                    </Tab>
                                </CommandUIDefinition>
                                <CommandUIDefinition Location="Ribbon.ContextualTabs._children">
                                    <TabGroup Id="Ribbon.CustomTabGroup" 
                                              Command="CustomRibbonTab" 
                                              Title="Book Management" 
                                              Sequence="100"/>
                                </CommandUIDefinition>
                                <CommandUIDefinition Location="Ribbon.ContextualGroups._children">
                                    <ContextualGroup Id="Ribbon.CustomTabGroup" 
                                                    Command="CustomRibbonTab" 
                                                    Title="Book Management" 
                                                    Sequence="100" 
                                                    Color="Yellow"/>
                                </CommandUIDefinition>
                            </CommandUIDefinitions>
                            <CommandUIHandlers>
                                <CommandUIHandler Command="Custom_AddBook" 
                                                CommandAction="javascript:alert('Add Book clicked! Replace this with your function.');" 
                                                EnabledScript="javascript:true;"/>
                                <CommandUIHandler Command="Custom_ViewReports" 
                                                CommandAction="javascript:alert('View Reports clicked! Replace this with your function.');" 
                                                EnabledScript="javascript:true;"/>
                            </CommandUIHandlers>
                        </CommandUIExtension>
                    `;

                    // Register the ribbon customization
                    ExecuteOrDelayUntilScriptLoaded(function() {
                        SP.SOD.executeFunc('sp.ribbon.js', 'SP.Ribbon.PageManager', function() {
                            const ribbonManager = SP.Ribbon.PageManager.get_instance();
                            
                            // Add command handler
                            ribbonManager.addCommandHandler({
                                id: 'CustomRibbonTab',
                                handler: function() { return true; }
                            });
                            
                            // Add our ribbon XML
                            ribbonManager.addPageComponent({
                                id: 'CustomRibbonComponent',
                                markup: ribbonXml
                            });
                            
                            // Make the tab visible
                            ribbonManager.add_ribbonInited(function() {
                                SPRibbon.PageStateHandler.registerPageStateHandler(function() {
                                    SetRibbonTabVisible("Ribbon.CustomTab", true);
                                });
                            });
                            
                            resolve();
                        });
                    }, 'sp.ribbon.js');
                } catch (error) {
                    reject(error);
                }
            });
        }
    </script>
</body>
</html>








<!DOCTYPE html>
<html>
<head>
    <title>Ribbon Deployment</title>
    <!-- Load SharePoint JSOM libraries -->
    <script type="text/javascript" src="/_layouts/15/init.js"></script>
    <script type="text/javascript" src="/_layouts/15/MicrosoftAjax.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.Ribbon.js"></script>
</head>
<body>
    <div id="ribbon-deployment-status">Loading ribbon customization...</div>
    
    <script type="text/javascript">
    // Your deployment code here
    function deployRibbonCustomization() {
        var ctx = new SP.ClientContext.get_current();
        var web = ctx.get_web();
        var userActions = web.get_userCustomActions();
        ctx.load(userActions);
        
        var customAction = userActions.add();
        customAction.set_location("ScriptLink");
        customAction.set_scriptSrc("~sitecollection/SiteAssets/custom-ribbon.js");
        customAction.set_sequence(100);
        customAction.set_title("Custom Book Management Ribbon");
        
        customAction.update();
        ctx.executeQueryAsync(
            function() {
                document.getElementById("ribbon-deployment-status").innerHTML = 
                    "Ribbon customization deployed successfully! Page will refresh...";
                setTimeout(function() { window.location.reload(true); }, 2000);
            },
            function(sender, args) {
                document.getElementById("ribbon-deployment-status").innerHTML = 
                    "Failed to deploy ribbon: " + args.get_message();
            }
        );
    }

    // Initialize when SharePoint is ready
    ExecuteOrDelayUntilScriptLoaded(function() {
        SP.SOD.executeFunc('sp.js', 'SP.ClientContext', function() {
            if (window.location.href.indexOf("BookManagement") > -1) {
                deployRibbonCustomization();
            }
        });
    }, 'sp.js');
    </script>
</body>
</html>







# Adding a Custom Ribbon to SharePoint 2016 Using JSOM

Here's a complete step-by-step guide to add a custom ribbon tab with buttons to your SharePoint 2016 page using JavaScript Object Model (JSOM).

## Step 1: Understanding the Components

A SharePoint ribbon consists of:
1. **Tabs** - Top-level containers
2. **Groups** - Sections within tabs
3. **Controls** - Buttons, menus, etc. within groups

## Step 2: Create the JavaScript File

Create a new file named `custom-ribbon.js` and add the following code:

```javascript
// Ensure SharePoint scripts are loaded
ExecuteOrDelayUntilScriptLoaded(initCustomRibbon, "sp.ribbon.js");

function initCustomRibbon() {
    // Wait for the ribbon to be ready
    SP.SOD.executeOrDelayUntilScriptLoaded(function() {
        // Register our ribbon components
        RegisterCustomRibbon();
        
        // Make our tab visible when appropriate
        SPRibbon.PageStateHandler.registerPageStateHandler(function() {
            var currentCommand = GetCurrentRibbonCommand();
            if (currentCommand === "CustomRibbonTab") {
                SetRibbonTabVisible("Ribbon.CustomTab", true);
            }
        });
    }, "sp.ribbon.js");
}

function RegisterCustomRibbon() {
    var ribbonXml = `
        <CommandUIExtension xmlns="http://schemas.microsoft.com/sharepoint/">
            <CommandUIDefinitions>
                <!-- Define a new tab -->
                <CommandUIDefinition Location="Ribbon.Tabs._children">
                    <Tab Id="Ribbon.CustomTab" 
                         Title="Library Tools" 
                         Sequence="100">
                        <Scaling Id="Ribbon.CustomTab.Scaling">
                            <MaxSize Id="Ribbon.CustomTab.MaxSize" 
                                     GroupId="Ribbon.CustomTab.Group1" 
                                     Size="OneLargeTwoMedium"/>
                            <Scale Id="Ribbon.CustomTab.Scaling.Group1" 
                                   GroupId="Ribbon.CustomTab.Group1" 
                                   Size="OneLargeTwoMedium"/>
                        </Scaling>
                        <Groups Id="Ribbon.CustomTab.Groups">
                            <!-- Define a group within the tab -->
                            <Group Id="Ribbon.CustomTab.Group1" 
                                   Title="Book Management" 
                                   Description="Custom book management tools" 
                                   Sequence="100" 
                                   Template="Ribbon.Templates.Flexible2">
                                <Controls Id="Ribbon.CustomTab.Group1.Controls">
                                    <!-- Add a button -->
                                    <Button Id="Ribbon.CustomTab.Group1.Button1" 
                                            Command="Custom_Button1" 
                                            Sequence="100" 
                                            Image16by16="/_layouts/15/images/formatmap16x16.png" 
                                            Image16by16Top="-144" 
                                            Image16by16Left="-288" 
                                            Image32by32="/_layouts/15/images/formatmap32x32.png" 
                                            Image32by32Top="-192" 
                                            Image32by32Left="-288" 
                                            LabelText="Add Book" 
                                            Description="Add a new book to the library" 
                                            TemplateAlias="o1"/>
                                </Controls>
                            </Group>
                        </Groups>
                    </Tab>
                </CommandUIDefinition>
                
                <!-- Define the contextual tab group -->
                <CommandUIDefinition Location="Ribbon.ContextualTabs._children">
                    <TabGroup Id="Ribbon.CustomTabGroup" 
                              Command="CustomRibbonTab" 
                              Title="Library Tools" 
                              Sequence="100"/>
                </CommandUIDefinition>
                
                <!-- Define when to show the tab -->
                <CommandUIDefinition Location="Ribbon.ContextualGroups._children">
                    <ContextualGroup Id="Ribbon.CustomTabGroup" 
                                    Command="CustomRibbonTab" 
                                    Title="Library Tools" 
                                    Sequence="100" 
                                    Color="Yellow"/>
                </CommandUIDefinition>
            </CommandUIDefinitions>
            
            <!-- Define button actions -->
            <CommandUIHandlers>
                <CommandUIHandler Command="Custom_Button1" 
                                  CommandAction="javascript:AddNewBook();" 
                                  EnabledScript="javascript:true;"/>
            </CommandUIHandlers>
        </CommandUIExtension>
    `;
    
    // Register the ribbon customization
    var ribbon = SP.Ribbon.PageManager.get_instance();
    ribbon.add_ribbonInited(function() {
        SP.Ribbon.PageManager.get_instance().addCommandHandler(
            { 
                id: 'CustomRibbonTab',
                handler: new Function('return true;')
            }
        );
    });
    
    // Add our ribbon XML to the page
    SP.Ribbon.PageManager.get_instance().addPageComponent(
        new SP.Ribbon.PageComponent('CustomRibbonComponent', ribbonXml)
    );
}

// Function to be called by our ribbon button
function AddNewBook() {
    // Open the new form dialog
    var options = {
        url: _spPageContextInfo.webServerRelativeUrl + 
             "/Lists/BookManagement/NewForm.aspx",
        title: "Add New Book",
        width: 800,
        height: 600
    };
    SP.UI.ModalDialog.showModalDialog(options);
}
```

## Step 3: Create a Custom Action to Deploy the Ribbon

Create another file named `deploy-ribbon.js`:

```javascript
// Function to deploy our ribbon customization
function deployRibbonCustomization() {
    var ctx = new SP.ClientContext.get_current();
    var web = ctx.get_web();
    
    // Get the User Custom Actions collection
    var userActions = web.get_userCustomActions();
    ctx.load(userActions);
    
    // Create a new custom action
    var customAction = userActions.add();
    customAction.set_location("ScriptLink");
    customAction.set_scriptSrc("~sitecollection/SiteAssets/custom-ribbon.js");
    customAction.set_sequence(100);
    customAction.set_title("Custom Book Management Ribbon");
    
    customAction.update();
    ctx.executeQueryAsync(
        function() {
            console.log("Ribbon customization deployed successfully");
            // Refresh the page to see changes
            window.location.reload(true);
        },
        function(sender, args) {
            console.log("Failed to deploy ribbon customization: " + args.get_message());
        }
    );
}

// Ensure SharePoint is loaded
ExecuteOrDelayUntilScriptLoaded(function() {
    SP.SOD.executeFunc('sp.js', 'SP.ClientContext', function() {
        // Check if we're on the correct page
        if (window.location.href.indexOf("BookManagement") > -1) {
            deployRibbonCustomization();
        }
    });
}, 'sp.js');
```

## Step 4: Deployment Steps

1. **Upload the files**:
   - Upload both `custom-ribbon.js` and `deploy-ribbon.js` to your Site Assets library
   - Path: `/SiteAssets/custom-ribbon.js` and `/SiteAssets/deploy-ribbon.js`

2. **Add a Content Editor Web Part**:
   - Edit your book management page
   - Add a Content Editor Web Part
   - Set its content link to `/SiteAssets/deploy-ribbon.js`
   - This will execute the deployment script

3. **Test the ribbon**:
   - Navigate to your book management list
   - You should see a new "Library Tools" tab in the ribbon
   - Click the "Add Book" button to test functionality

## Key Components Explained

1. **Ribbon XML Structure**:
   - `CommandUIDefinitions`: Defines the visual elements
   - `CommandUIHandlers`: Defines what happens when buttons are clicked

2. **Custom Action**:
   - Deploys our JavaScript to all pages in the site
   - Runs our ribbon initialization code

3. **Button Actions**:
   - The `CommandAction` specifies JavaScript to execute
   - We're calling a modal dialog to add a new book

## Customization Options

1. **Change button icons**:
   - Modify the `Image16by16` and `Image32by32` attributes
   - SharePoint provides standard icons in `/_layouts/15/images/`

2. **Add more buttons**:
   - Duplicate the `Button` element in the XML
   - Give each a unique ID and Command

3. **Change when the tab appears**:
   - Modify the `RegisterPageStateHandler` logic
   - Can be list-specific or content-type specific

## Troubleshooting

1. **If ribbon doesn't appear**:
   - Check browser console for errors
   - Verify the JS files loaded (F12 Network tab)
   - Ensure the custom action was created (Site Settings > User Custom Actions)

2. **If buttons don't work**:
   - Verify the JavaScript functions exist
   - Check for permission issues
   - Test the functions independently first

This implementation gives you complete control over the ribbon while using standard SharePoint 2016 JSOM techniques. The ribbon will only appear when viewing your book management list.














<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-grid.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-theme-alpine.css">



Thanks for the update — if the AG Grid is still breaking on the right and bottom, even with card styling, the most likely causes are:

⸻

🔍 Root Causes:
	1.	The grid height or width is overflowing the parent container, or not properly constrained.
	2.	ag-grid CSS theme is missing or incorrectly applied.
	3.	Your parent container or page is using height: 100% without proper structure, causing overflow.

⸻

✅ Clean Fix: Step-by-Step to Fully Solve

1. ✅ Ensure the correct theme CSS is imported in angular.json or styles.scss:

If using SCSS (recommended after migration):

In styles.scss:

@import "~ag-grid-community/styles/ag-grid.css";
@import "~ag-grid-community/styles/ag-theme-alpine.css";

If still using angular.json, add:

"styles": [
  "src/styles.scss",
  "node_modules/ag-grid-community/styles/ag-grid.css",
  "node_modules/ag-grid-community/styles/ag-theme-alpine.css"
]


⸻

2. ✅ Fix app.component.css completely

Replace it with this tested clean layout:

html, body {
  height: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Segoe UI', sans-serif;
  background-color: #f5f5f5;
  overflow: hidden; /* Prevent scroll overflow */
}

.grid-wrapper {
  height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
}

.grid-container {
  height: 500px;
  width: 100%;
  max-width: 900px;
}

.ag-theme-alpine {
  height: 100%;
  width: 100%;
  border-radius: 8px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}


⸻

3. ✅ Update app.component.html

Keep it neat and constrained:

<div class="grid-wrapper">
  <h2>Car Inventory Table</h2>

  <div class="grid-container ag-theme-alpine">
    <ag-grid-angular
      [rowData]="rowData"
      [columnDefs]="columnDefs"
      [defaultColDef]="defaultColDef"
      [rowSelection]="rowSelection"
      (gridReady)="onGridReady($event)">
    </ag-grid-angular>
  </div>
</div>


⸻

4. ✅ Optional (but useful) in onGridReady:

Add this line to fit columns properly:

params.api.sizeColumnsToFit();


⸻

✅ Result:
	•	Table won’t break on the right or bottom.
	•	Stays inside a card-like view with good styling.
	•	Works well on any screen size.

⸻

If this still doesn’t solve it, please upload your current app.component.html, app.component.css, and screenshot of your styles.scss or angular.json, and I’ll pinpoint the exact issue.







Thanks for the image! It clearly shows that:
	•	The AG Grid is not properly centered or styled.
	•	There’s extra space on the right and bottom.
	•	The layout is breaking, possibly due to improper width or height settings.

Let’s fix it cleanly so it appears sharp and centered like a professional data grid.

⸻

✅ Step-by-Step Fix: Clean Layout & Styling

🔧 app.component.html

Replace your current HTML with:

<div class="grid-wrapper">
  <h2>Editable Car Table</h2>

  <div class="toolbar">
    <button (click)="addRow()">Add Row</button>
    <button (click)="deleteSelectedRow()">Delete Selected Row</button>
  </div>

  <div class="ag-theme-alpine grid-container">
    <ag-grid-angular
      [rowData]="rowData"
      [columnDefs]="columnDefs"
      [defaultColDef]="defaultColDef"
      [rowSelection]="rowSelection"
      (gridReady)="onGridReady($event)"
      style="width: 100%; height: 100%;">
    </ag-grid-angular>
  </div>
</div>


⸻

🎨 app.component.css

Add this styling:

html, body {
  height: 100%;
  margin: 0;
  padding: 0;
  background-color: #f2f2f2;
  font-family: Arial, sans-serif;
}

.grid-wrapper {
  max-width: 900px;
  margin: 40px auto;
  padding: 20px;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 3px 10px rgba(0,0,0,0.1);
}

.grid-container {
  height: 400px;
  width: 100%;
  margin-top: 20px;
}

.toolbar {
  display: flex;
  gap: 10px;
  margin-bottom: 10px;
}

button {
  padding: 6px 14px;
  background-color: #1976d2;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button:hover {
  background-color: #145ea8;
}


⸻

⚙️ app.component.ts – Add Missing Pieces for Add/Delete

Update your component like this:

import { Component } from '@angular/core';
import { ColDef, GridReadyEvent, GridApi } from 'ag-grid-community';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  columnDefs: ColDef[] = [
    { field: 'make', editable: true },
    { field: 'model', editable: true },
    { field: 'price', editable: true }
  ];

  defaultColDef: ColDef = {
    sortable: true,
    filter: true,
    resizable: true,
    flex: 1,
    minWidth: 120
  };

  rowData = [
    { make: 'Toyota', model: 'Celica', price: 35000 },
    { make: 'Ford', model: 'Mondeo', price: 32000 },
    { make: 'Porsche', model: 'Boxster', price: 72000 }
  ];

  rowSelection = 'single';
  private gridApi!: GridApi;

  onGridReady(params: GridReadyEvent) {
    this.gridApi = params.api;
    params.api.sizeColumnsToFit(); // Adjust to fit screen
  }

  addRow() {
    const newItem = { make: '', model: '', price: 0 };
    this.gridApi.applyTransaction({ add: [newItem] });
  }

  deleteSelectedRow() {
    const selectedRows = this.gridApi.getSelectedRows();
    if (selectedRows.length > 0) {
      this.gridApi.applyTransaction({ remove: selectedRows });
    } else {
      alert('Please select a row to delete.');
    }
  }
}


⸻

✅ Result:
	•	Grid looks neat and centered.
	•	Responsive width.
	•	No scrollbars unless content overflows.
	•	Add/Delete works.
	•	Styled buttons.

Let me know if you also want:
	•	Search/filter toolbar
	•	Export to Excel/CSV
	•	Pagination








Great! Since the grid is now visible, but not styled properly or not looking good, here’s how to make it look professional, clean, and responsive using the AG Grid Alpine theme:

⸻

✅ Final Touch: Making the AG Grid Look Good

1. 🧽 Add Padding and Better Layout in app.component.html

<div style="padding: 20px;">
  <div class="ag-theme-alpine" style="height: 500px; width: 100%; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.15);">
    <ag-grid-angular
      style="width: 100%; height: 100%;"
      [rowData]="rowData"
      [columnDefs]="columnDefs"
      [defaultColDef]="defaultColDef"
      [animateRows]="true"
      [rowSelection]="{ type: 'single' }"
      (gridReady)="onGridReady($event)">
    </ag-grid-angular>
  </div>
</div>


⸻

2. 🎨 Add Styling in app.component.css

html, body {
  height: 100%;
  margin: 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background-color: #f4f6f9;
}

.ag-theme-alpine {
  border-radius: 8px;
  font-size: 14px;
  font-family: 'Segoe UI', sans-serif;
}

/* Optional: Zebra striping for rows */
.ag-row:nth-child(even) {
  background-color: #f9f9f9 !important;
}


⸻

3. 🧠 Optional Configs in app.component.ts for Better UX

defaultColDef: ColDef = {
  sortable: true,
  filter: true,
  resizable: true,
  minWidth: 150,
  flex: 1
};

This makes sure columns stretch to fill the available width and look balanced.

⸻

✅ Optional: Use a Custom Theme (e.g., AG Grid Quartz)

If you’re using AG Grid v33+, try this:

import 'ag-grid-community/styles/themes/ag-theme-quartz.css';

Then update the theme class in your HTML:

<div class="ag-theme-quartz" style="height: 500px; width: 100%;">


⸻

Would you like me to add buttons to add/delete rows next for full CRUD functionality?








Thanks for the update. Since your AG Grid is still not visible, even after fixing theming errors, let’s quickly walk through a complete minimal working setup to ensure visibility.

⸻

✅ Step-by-Step Full Working AG Grid Example (No SCSS)

1. ✅ Install AG Grid Angular packages (if not yet)

npm install ag-grid-community ag-grid-angular


⸻

2. ✅ app.component.ts

import { Component } from '@angular/core';
import { ColDef, GridReadyEvent, ModuleRegistry } from 'ag-grid-community';
import { AllCommunityModules } from '@ag-grid-community/all-modules'; // ✅ use this if using modules

import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/themes/ag-theme-alpine.css';

ModuleRegistry.registerModules(AllCommunityModules);

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  columnDefs: ColDef[] = [
    { field: 'make', editable: true },
    { field: 'model', editable: true },
    { field: 'price', editable: true }
  ];

  rowData = [
    { make: 'Toyota', model: 'Celica', price: 35000 },
    { make: 'Ford', model: 'Mondeo', price: 32000 },
    { make: 'Porsche', model: 'Boxster', price: 72000 }
  ];

  defaultColDef: ColDef = {
    sortable: true,
    filter: true,
    resizable: true
  };

  onGridReady(params: GridReadyEvent) {
    params.api.sizeColumnsToFit();
  }
}


⸻

3. ✅ app.component.html

<div class="ag-theme-alpine" style="height: 400px; width: 100%;">
  <ag-grid-angular
    style="width: 100%; height: 100%;"
    [rowData]="rowData"
    [columnDefs]="columnDefs"
    [defaultColDef]="defaultColDef"
    class="ag-theme-alpine"
    [animateRows]="true"
    [rowSelection]="{ type: 'single' }"
    (gridReady)="onGridReady($event)">
  </ag-grid-angular>
</div>


⸻

4. ✅ app.component.css

html, body {
  height: 100%;
  margin: 0;
  padding: 0;
}

.ag-theme-alpine {
  height: 100%;
  width: 100%;
}


⸻

5. ✅ app.module.ts (if not standalone app)

If you’re not using a standalone app, ensure AgGridModule is imported:

import { AgGridModule } from 'ag-grid-angular';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, AgGridModule],
  bootstrap: [AppComponent]
})
export class AppModule { }


⸻

🛠 Still not visible?

Please double-check:
	•	ag-theme-alpine is added to the div.
	•	Stylesheets are correctly imported.
	•	Grid has a height — AG Grid won’t show if height is 0.
	•	Try wrapping with a div with fixed height like style="height: 400px;".

⸻

Would you like a live StackBlitz or GitHub repo to compare? I can also add Add/Delete buttons if needed.






Great! Since you’re not using SCSS, and want to continue using regular .css, here’s how to fix the AG Grid v33 error using .css only, without migrating to SCSS.

⸻

✅ Fix for AG Grid v33+ using .css

✅ Step 1: Use the new Theming CSS file

Instead of importing ag-theme-alpine.css (legacy), use the new path:

// ✅ Use new Theming API CSS file
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/themes/ag-theme-alpine.css'; // ✅ updated path

⚠️ This matches AG Grid’s v33+ theme structure.

⸻

✅ Step 2: Use theme correctly in HTML

In your app.component.html, wrap your grid with the correct theme class:

<div class="ag-theme-alpine" style="height: 400px; width: 600px;">
  <ag-grid-angular
    [rowData]="rowData"
    [columnDefs]="columnDefs"
    [defaultColDef]="defaultColDef"
    [animateRows]="true"
    [rowSelection]="{ type: 'single' }" <!-- ✅ new format -->
    (gridReady)="onGridReady($event)">
  </ag-grid-angular>
</div>


⸻

✅ Step 3: Add defaultColDef and onGridReady (optional but good practice)

In your app.component.ts:

defaultColDef: ColDef = {
  sortable: true,
  filter: true,
  resizable: true
};

onGridReady(params: GridReadyEvent) {
  params.api.sizeColumnsToFit();
}

Don’t forget to import:

import { GridReadyEvent } from 'ag-grid-community';


⸻

✅ Result

Your grid will now:
	•	✅ Work without SCSS
	•	✅ Use the latest AG Grid theming structure
	•	✅ Avoid warning error #239

⸻

Let me know if you want Add/Delete/Update row buttons — I can give the full working example for that too.





Thanks for the image — it clearly shows AG Grid v33+ breaking changes, especially:

⸻

❌ Error Recap:

AG Grid: error #239 Theming API and CSS file themes are both used in the same page...

This happens because you’re using old CSS (ag-theme-alpine.css) with AG Grid v33+, which now uses a new theming API.

⸻

✅ Fix the Issue Step-by-Step

✅ Step 1: Remove old CSS import

Go to your app.component.ts and remove this line:

// ❌ REMOVE THIS
import 'ag-grid-community/styles/ag-theme-alpine.css';


⸻

✅ Step 2: Use new theme API in global styles.css (or styles.scss)

In your src/styles.css (or src/styles.scss), replace old CSS with:

@use "ag-grid-community/styles" as ag;

@include ag.grid-core();
@include ag.theme-alpine(); /* or any theme you prefer */

✅ You need to make sure your project supports SCSS if using @use syntax.

If you’re not using SCSS yet, rename styles.css → styles.scss, then update angular.json to reflect that under styles.

⸻

✅ Step 3: Update Row Selection (no more string values)

In your app.component.ts, change:

// ❌ Old style (deprecated)
rowSelection="single"

To:

[rowSelection]="{ type: 'single' }"

Also:

// ❌ DEPRECATED: checkboxSelection: true
{ field: 'make', editable: true, checkboxSelection: true }

Change to:

{
  field: 'make',
  editable: true,
  headerCheckboxSelection: true,
  checkboxSelection: true
}

⚠️ But still be aware: checkbox selection support also changed in v33, and AG Grid recommends using new config format for multi-selection.

⸻

🔁 Summary of Updated Fixes
	•	✅ Migrate to SCSS and use AG Grid’s @use theming syntax
	•	✅ Avoid ag-theme-alpine.css import in TS
	•	✅ Use object format for row selection
	•	✅ Use updated grid configuration for checkbox selection

⸻

👇 Need help updating angular.json, styles.scss, or theming?

Let me know if:
	•	You want to continue using CSS (then we disable new theme API)
	•	Or you want help converting the project to SCSS
	•	Or want to use a specific theme (like theme-balham, theme-material)

I’ll guide you based on what you’re using.






Thanks! Based on your previous image and the error shown:

⸻

🔴 Error Recap:

"ag-grid-community" has no exported member named 'AllCommunityModules'. Did you mean 'AllCommunityModule'?

But now even when you use AllCommunityModule, you’re still getting an error after fixing that? Let’s correctly configure the entire AG Grid integration for Angular 17.

⸻

✅ Clean Full Working Code with AG Grid + Add/Delete/Update (Angular 17+)

1. Install Required Packages

Make sure you’ve installed AG Grid for Angular:

npm install ag-grid-community ag-grid-angular


⸻

2. app.component.ts

import { Component } from '@angular/core';
import { ColDef, GridApi, GridReadyEvent } from 'ag-grid-community';
import { AgGridModule } from 'ag-grid-angular';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [AgGridModule],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  private gridApi!: GridApi;

  columnDefs: ColDef[] = [
    { field: 'make', editable: true, checkboxSelection: true },
    { field: 'model', editable: true },
    { field: 'price', editable: true }
  ];

  rowData = [
    { make: 'Toyota', model: 'Celica', price: 35000 },
    { make: 'Ford', model: 'Mondeo', price: 32000 },
    { make: 'Porsche', model: 'Boxster', price: 72000 }
  ];

  onGridReady(params: GridReadyEvent) {
    this.gridApi = params.api;
  }

  addRow() {
    const newItem = { make: '', model: '', price: 0 };
    this.gridApi.applyTransaction({ add: [newItem] });
  }

  deleteSelectedRow() {
    const selectedRows = this.gridApi.getSelectedRows();
    if (selectedRows.length > 0) {
      this.gridApi.applyTransaction({ remove: selectedRows });
    } else {
      alert('Please select a row to delete.');
    }
  }
}


⸻

3. app.component.html

<div style="margin-bottom: 10px;">
  <button (click)="addRow()">Add Row</button>
  <button (click)="deleteSelectedRow()">Delete Selected Row</button>
</div>

<div class="ag-theme-alpine" style="height: 400px; width: 600px;">
  <ag-grid-angular
    [rowData]="rowData"
    [columnDefs]="columnDefs"
    rowSelection="single"
    (gridReady)="onGridReady($event)">
  </ag-grid-angular>
</div>


⸻

4. app.component.css

button {
  margin-right: 10px;
}


⸻

🚫 Remove These Unused Imports

Remove this from your code (you don’t need it for Angular 17+ standalone):

// ❌ NOT NEEDED
// import { ModuleRegistry } from 'ag-grid-community';
// import { AllCommunityModules } from 'ag-grid-community';
// ModuleRegistry.registerModules([AllCommunityModule]);


⸻

Let Me Know:
	•	If you’re still using a module.ts setup instead of standalone components.
	•	If you want the user to multi-select rows.
	•	If you’re using strict types and need interfaces.

Let’s get your AG Grid fully working step-by-step.




To enable Add, Edit, and Delete functionality in your AG Grid within the same AppComponent (Angular 17), here’s how you can update your code.

⸻

✅ Goal
	•	Editable cells ✅
	•	Add new row ➕
	•	Delete selected row ❌
	•	Update values automatically (already supported with [editable: true]) ✅

⸻

✅ Modified app.component.ts

import { Component } from '@angular/core';
import { ColDef, GridApi, ModuleRegistry } from 'ag-grid-community';
import { AllCommunityModules } from 'ag-grid-community';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

ModuleRegistry.registerModules(AllCommunityModules);

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {
  private gridApi!: GridApi;

  columnDefs: ColDef[] = [
    { field: 'make', editable: true },
    { field: 'model', editable: true },
    { field: 'price', editable: true }
  ];

  rowData = [
    { make: 'Toyota', model: 'Celica', price: 35000 },
    { make: 'Ford', model: 'Mondeo', price: 32000 },
    { make: 'Porsche', model: 'Boxster', price: 72000 }
  ];

  onGridReady(params: any) {
    this.gridApi = params.api;
  }

  addRow() {
    const newItem = { make: '', model: '', price: 0 };
    this.gridApi.applyTransaction({ add: [newItem] });
  }

  deleteSelectedRow() {
    const selectedRows = this.gridApi.getSelectedRows();
    if (selectedRows.length > 0) {
      this.gridApi.applyTransaction({ remove: selectedRows });
    } else {
      alert('Please select a row to delete.');
    }
  }
}


⸻

✅ Modified app.component.html

<div style="margin-bottom: 10px;">
  <button (click)="addRow()">Add Row</button>
  <button (click)="deleteSelectedRow()">Delete Selected Row</button>
</div>

<ag-grid-angular
  class="ag-theme-alpine"
  style="width: 100%; height: 500px;"
  [rowData]="rowData"
  [columnDefs]="columnDefs"
  [rowSelection]="'single'"
  (gridReady)="onGridReady($event)">
</ag-grid-angular>


⸻

✅ Modified app.component.css (optional)

:host {
  display: block;
  height: 100%;
  padding: 10px;
}


⸻

🔁 Summary

Feature	Status
Add row	✅ Yes
Delete row	✅ Yes
Edit row cells	✅ Yes
Live update	✅ Yes


⸻

Let me know if you want:
	•	Multi-row delete
	•	Validation (e.g. no empty make/model)
	•	Sorting/filtering
	•	Save to local storage or Firebase backend







import { Component } from '@angular/core';
import { AgGridModule } from 'ag-grid-angular';
import { CommonModule } from '@angular/common';
import { ColDef } from 'ag-grid-community';

interface Car {
  make: string;
  model: string;
  price: number;
}

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, AgGridModule],
  template: `
    <h2>AG Grid Example</h2>
    <ag-grid-angular
      class="ag-theme-alpine"
      style="width: 100%; height: 400px;"
      [rowData]="rowData"
      [columnDefs]="columnDefs">
    </ag-grid-angular>
  `
})
export class AppComponent {
  columnDefs: ColDef<Car>[] = [
    { field: 'make', editable: true },
    { field: 'model', editable: true },
    { field: 'price', editable: true }
  ];

  rowData: Car[] = [
    { make: 'Toyota', model: 'Celica', price: 35000 },
    { make: 'Ford', model: 'Mondeo', price: 32000 },
    { make: 'Porsche', model: 'Boxster', price: 72000 }
  ];
}








The error:

❌ TypeError: Cannot read properties of undefined (reading 'hasDecoratorInputTransform')

usually means that there’s an issue with the Angular build system, often caused by one of these:

⸻

🔍 Common Causes

Cause	Fix
🔸 You’re using a wrong Angular version with incompatible packages	Ensure you’re using the correct versions of AG-Grid + Angular
🔸 Your Angular app is missing @angular/compiler or it’s outdated	Install it: npm install @angular/compiler
🔸 You installed AG-Grid packages not compatible with Angular 17	Use the latest AG-Grid that supports Angular 17
🔸 Your component is not using standalone: true properly	Make sure it’s declared correctly


⸻

✅ Step-by-Step: FIX This Error (Start from Scratch)

I’ll now guide you step by step — from ng new to working AG-Grid inside AppComponent using Angular 17 (standalone setup only).

⸻

✅ 1. Create New Angular 17 App with Standalone API

ng new aggrid-app --standalone
cd aggrid-app

Choose:
	•	✅ Standalone API
	•	❌ Do not enable SSR
	•	✅ CSS as style

⸻

✅ 2. Install AG-Grid Packages

npm install ag-grid-angular ag-grid-community


⸻

✅ 3. Replace These Files

🔸 src/app/app.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AgGridModule } from 'ag-grid-angular';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, AgGridModule],
  template: `
    <h2>AG Grid Basic Demo</h2>
    <ag-grid-angular
      class="ag-theme-alpine"
      style="width: 100%; height: 400px;"
      [rowData]="rowData"
      [columnDefs]="columnDefs"
      [defaultColDef]="defaultColDef"
      (gridReady)="onGridReady($event)">
    </ag-grid-angular>
  `
})
export class AppComponent {
  columnDefs = [
    { field: 'make', editable: true },
    { field: 'model', editable: true },
    { field: 'price', editable: true }
  ];

  defaultColDef = {
    sortable: true,
    filter: true,
    resizable: true
  };

  rowData = [
    { make: 'Toyota', model: 'Celica', price: 35000 },
    { make: 'Ford', model: 'Mondeo', price: 32000 },
    { make: 'Porsche', model: 'Boxster', price: 72000 }
  ];

  onGridReady(params: any) {
    params.api.sizeColumnsToFit();
  }
}


⸻

🔸 src/styles.css

@import "ag-grid-community/styles/ag-grid.css";
@import "ag-grid-community/styles/ag-theme-alpine.css";


⸻

🔸 src/main.ts

Make sure it looks like this:

import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent)
  .catch(err => console.error(err));


⸻

✅ 4. Serve the App

ng serve

You should now see a working editable AG Grid table inside your AppComponent. You can edit any cell directly.

⸻

🧪 Final Note

If you’re still getting:

TypeError: Cannot read properties of undefined (reading 'hasDecoratorInputTransform')

Then do the following:

npm install @angular/compiler --save

Or ensure your Angular version is correctly synced:

npm install @angular/core@17 @angular/compiler@17 @angular/common@17 @angular/platform-browser@17


⸻

Do you want me to give you a GitHub link or a zip file of this working demo?







Great — we’ll start from scratch, use only AppComponent (no separate grid component), and show exactly how to integrate AG-Grid in Angular without getting the window is not defined error, assuming you’re not using Angular Universal (SSR).

⸻

✅ Complete Guide — AG-Grid in AppComponent (No Separate Grid Component)

We’ll use:
	•	Angular 17+
	•	AG-Grid
	•	No SSR
	•	No separate component
	•	Just AppComponent

⸻

🔧 Step 1: Create a New Angular Project

ng new ag-grid-app --standalone
cd ag-grid-app

✅ Choose “No” when asked for routing
✅ Choose CSS for styling (or SCSS if you prefer)

⸻

📦 Step 2: Install AG-Grid Packages

npm install ag-grid-angular ag-grid-community


⸻

🎨 Step 3: Add AG-Grid CSS in src/styles.css

@import "ag-grid-community/styles/ag-grid.css";
@import "ag-grid-community/styles/ag-theme-alpine.css";


⸻

🧠 Step 4: Update app.component.ts

File: src/app/app.component.ts

import { Component } from '@angular/core';
import { AgGridModule } from 'ag-grid-angular';
import { ColDef, GridReadyEvent, GridApi } from 'ag-grid-community';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [AgGridModule],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'ag-grid-app';

  private gridApi!: GridApi;

  columnDefs: ColDef[] = [
    { field: 'make' },
    { field: 'model' },
    { field: 'price' }
  ];

  rowData = [
    { make: 'Toyota', model: 'Celica', price: 35000 },
    { make: 'Ford', model: 'Mondeo', price: 32000 },
    { make: 'Porsche', model: 'Boxster', price: 72000 }
  ];

  onGridReady(params: GridReadyEvent) {
    this.gridApi = params.api;
    this.gridApi.sizeColumnsToFit();
  }
}


⸻

🧾 Step 5: Update app.component.html

File: src/app/app.component.html

<h2>AG Grid in AppComponent</h2>

<ag-grid-angular
  style="width: 100%; height: 400px;"
  class="ag-theme-alpine"
  [rowData]="rowData"
  [columnDefs]="columnDefs"
  (gridReady)="onGridReady($event)">
</ag-grid-angular>


⸻

🎨 Step 6: Add Optional Styling (Optional)

File: src/app/app.component.css

:host {
  display: block;
  padding: 20px;
}


⸻

⚙️ Step 7: Confirm angular.json has correct entries

File: angular.json

Find this section under projects > ag-grid-app > architect > build > options:

"options": {
  "outputPath": "dist/ag-grid-app",
  "index": "src/index.html",
  "main": "src/main.ts",         ✅ must exist
  "polyfills": "src/polyfills.ts", ✅ must exist
  "tsConfig": "tsconfig.app.json",
  "assets": [
    "src/favicon.ico",
    "src/assets"
  ],
  "styles": [
    "src/styles.css"
  ],
  "scripts": []
}


⸻

▶️ Step 8: Run the App

ng serve


⸻

✅ Output

You should now see an AG-Grid table with rows and columns in the browser.

⸻

❗ If You’re Still Seeing window is not defined

That would only happen if you’re using SSR (Angular Universal).

If so, you must guard AG-Grid code using this check:

import { Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';

constructor(@Inject(PLATFORM_ID) private platformId: Object) {}

ngOnInit() {
  if (isPlatformBrowser(this.platformId)) {
    // Initialize AG-Grid here
  }
}

But since you’re using only AppComponent and not SSR — you do not need this.

⸻

✅ Summary

Step	Done?
New Angular app created	✅
AG-Grid installed	✅
CSS added to styles.css	✅
AG-Grid code in AppComponent	✅
Used only AppComponent	✅
No SSR/Universal used	✅


⸻

If you follow these steps exactly and still get the error:

Please send:
	•	Your full angular.json
	•	Screenshot of full error
	•	Output of ng version
	•	Confirm whether you added SSR (@nguniversal/...)

I’ll debug it line by line for you.








Thanks for the detailed update. You’re facing a "window is not defined" error with AG-Grid in Angular, likely due to Server-Side Rendering (SSR) or improper placement of browser-only code.

Let’s walk through a complete step-by-step setup to integrate AG-Grid correctly in Angular without causing window errors, even in SSR environments.

⸻

✅ Step-by-Step Guide: AG-Grid in Angular Without window is not defined Error

⸻

🔧 Step 1: Install Required Packages

npm install ag-grid-angular ag-grid-community


⸻

📁 Step 2: File Structure Overview

src/
 └── app/
      ├── grid/
      │    ├── grid.component.ts
      │    ├── grid.component.html
      │    └── grid.component.css
      └── app.config.ts
      └── app.component.ts
      └── app.component.html
      └── main.ts
styles.css
angular.json


⸻

📦 Step 3: Add AG-Grid CSS to styles.css

File: src/styles.css

@import "ag-grid-community/styles/ag-grid.css";
@import "ag-grid-community/styles/ag-theme-alpine.css";


⸻

📄 Step 4: Create Grid Component Safely (Browser Check)

File: src/app/grid/grid.component.ts

import { Component, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { ColDef, GridApi, GridReadyEvent } from 'ag-grid-community';
import { AgGridModule } from 'ag-grid-angular';

@Component({
  selector: 'app-grid',
  standalone: true,
  imports: [AgGridModule],
  templateUrl: './grid.component.html',
  styleUrls: ['./grid.component.css']
})
export class GridComponent {
  isBrowser = false;
  private gridApi!: GridApi;

  columnDefs: ColDef[] = [
    { field: 'make' },
    { field: 'model' },
    { field: 'price' }
  ];

  rowData = [
    { make: 'Toyota', model: 'Celica', price: 35000 },
    { make: 'Ford', model: 'Mondeo', price: 32000 },
    { make: 'Porsche', model: 'Boxster', price: 72000 }
  ];

  constructor(@Inject(PLATFORM_ID) private platformId: Object) {
    this.isBrowser = isPlatformBrowser(platformId);
  }

  onGridReady(params: GridReadyEvent) {
    if (this.isBrowser) {
      this.gridApi = params.api;
      this.gridApi.sizeColumnsToFit();
    }
  }
}


⸻

🧾 File: grid.component.html

<ag-grid-angular
  *ngIf="isBrowser"
  style="width: 100%; height: 500px;"
  class="ag-theme-alpine"
  [rowData]="rowData"
  [columnDefs]="columnDefs"
  (gridReady)="onGridReady($event)">
</ag-grid-angular>


⸻

🧾 File: grid.component.css

/* Optional grid styling */


⸻

🧩 Step 5: Add GridComponent in Routes or AppComponent

Option A: Add via routing

File: app.routes.ts (Angular v17+)

import { Routes } from '@angular/router';

export const routes: Routes = [
  {
    path: '',
    loadComponent: () =>
      import('./grid/grid.component').then((m) => m.GridComponent),
  },
];

Option B: Add directly to app.component.html

<app-grid></app-grid>

And add this to app.component.ts:

import { Component } from '@angular/core';
import { GridComponent } from './grid/grid.component';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [GridComponent],
  templateUrl: './app.component.html',
})
export class AppComponent {}


⸻

⚙️ Step 6: Verify angular.json → Make sure "main" is defined

File: angular.json

Find this part under projects > your-app-name > architect > build > options:

"options": {
  "outputPath": "dist/project-name",
  "index": "src/index.html",
  "main": "src/main.ts",              // ✅ REQUIRED
  "polyfills": "src/polyfills.ts",    // ✅ REQUIRED
  "tsConfig": "tsconfig.app.json",
  "assets": [
    "src/favicon.ico",
    "src/assets"
  ],
  "styles": [
    "src/styles.css"
  ],
  "scripts": []
}

✅ If main or polyfills are missing — add them!

⸻

🧪 Step 7: Run and Test

ng serve

	•	Make sure src/main.ts and src/polyfills.ts exist
	•	If using SSR (ng add @nguniversal/express-engine), this setup still works due to the isPlatformBrowser guard

⸻

❗ Common Mistake Recap

Issue	Fix
window is not defined	Use isPlatformBrowser to avoid SSR-side rendering
Missing main in angular.json	Add "main": "src/main.ts" inside "build > options"
AG-Grid CSS not loading	Import in styles.css as shown above
AG-Grid trying to render early	Use *ngIf="isBrowser" on <ag-grid-angular>


⸻

💡 Bonus: Confirm Environment

Run this to confirm Angular version:

ng version


⸻

If you still face issues, send:
	•	Your angular.json
	•	Your main.ts and polyfills.ts
	•	Whether you are using SSR (Universal)
	•	The full updated error message

I’ll debug and rewrite the entire structure for you.









# Understanding and Fixing the "Window is not defined" Error in Angular with AG-Grid

Based on your image and error message, I'll help you resolve the "Window is not defined" error that commonly occurs when using AG-Grid in Angular applications, especially with server-side rendering (SSR) or incorrect imports.

## Root Cause of the Error

The "Window is not defined" error typically occurs because:
1. AG-Grid tries to access browser-specific APIs (like `window`) during server-side rendering
2. There might be incorrect imports or configuration in your component
3. The component might be trying to render before the browser environment is ready

## Correct Implementation

Here's the proper way to implement AG-Grid in Angular 17:

### 1. First, ensure proper installation:
```bash
npm install ag-grid-angular ag-grid-community
```

### 2. Create a proper component structure:

**File:** `grid.component.ts`
```typescript
import { Component, OnInit } from '@angular/core';
import { ColDef, GridApi, GridReadyEvent } from 'ag-grid-community';
import { AgGridModule } from 'ag-grid-angular';

@Component({
  selector: 'app-grid',
  standalone: true,
  imports: [AgGridModule],
  templateUrl: './grid.component.html',
  styleUrls: ['./grid.component.css']
})
export class GridComponent implements OnInit {
  private gridApi!: GridApi;

  // Column Definitions
  columnDefs: ColDef[] = [
    { field: 'make' },
    { field: 'model' },
    { field: 'price' }
  ];

  // Row Data
  rowData = [
    { make: 'Toyota', model: 'Celica', price: 35000 },
    { make: 'Ford', model: 'Mondeo', price: 32000 },
    { make: 'Porsche', model: 'Boxster', price: 72000 }
  ];

  ngOnInit() {
    // Component initialization logic
  }

  onGridReady(params: GridReadyEvent) {
    this.gridApi = params.api;
    this.gridApi.sizeColumnsToFit();
  }
}
```

### 3. Template file:

**File:** `grid.component.html`
```html
<ag-grid-angular
  style="width: 100%; height: 500px;"
  class="ag-theme-alpine"
  [rowData]="rowData"
  [columnDefs]="columnDefs"
  (gridReady)="onGridReady($event)">
</ag-grid-angular>
```

### 4. Styles:

**File:** `grid.component.css`
```css
/* Custom grid styles if needed */
```

### 5. Global styles (styles.css or styles.scss):
```css
@import "ag-grid-community/styles/ag-grid.css";
@import "ag-grid-community/styles/ag-theme-alpine.css";
```

## Solutions for "Window not defined" Error

### Solution 1: Check if running in browser (for SSR)
```typescript
import { isPlatformBrowser } from '@angular/common';
import { PLATFORM_ID } from '@angular/core';

// In your constructor:
constructor(@Inject(PLATFORM_ID) private platformId: Object) {}

ngOnInit() {
  if (isPlatformBrowser(this.platformId)) {
    // AG-Grid specific code here
  }
}
```

### Solution 2: Lazy load the component (if using SSR)
```typescript
// In your routes:
{
  path: 'grid',
  loadComponent: () => import('./grid/grid.component').then(m => m.GridComponent)
}
```

### Solution 3: Ensure proper imports
Make sure you're not accidentally importing server-side packages or using incorrect import syntax.

## Key Differences from Your Original Code

1. **Correct Import Syntax**:
   - Your code shows `import ( "categorical")` which is invalid TypeScript syntax
   - Use standard import statements: `import { Component } from '@angular/core'`

2. **Proper Component Structure**:
   - Your code shows non-standard Angular decorator properties (`allocopen`, `localize`, etc.)
   - Use standard `@Component` decorator with valid properties

3. **Avoid Invalid Syntax**:
   - The long sequence of numbers in your code appears to be invalid
   - Stick to standard Angular/TypeScript syntax

4. **Proper AG-Grid Initialization**:
   - Ensure grid initialization happens in browser context
   - Use proper lifecycle hooks (ngOnInit, onGridReady)

If you're still seeing the error after these corrections, please share:
1. Your exact Angular version (`ng version`)
2. Whether you're using server-side rendering (SSR)
3. The complete error message with stack trace
4. Your current environment configuration

This will help provide more targeted solutions to your specific situation.








# AG-Grid Setup in Angular 17 (Corrected Approach)

The error occurs because `provideAgGrid()` is not the correct way to import AG-Grid in Angular 17 standalone applications. Here's the corrected step-by-step guide:

## Corrected Step 2: Import AG-Grid Modules

For Angular 17 standalone components, you don't need to modify `app.config.ts`. Instead, you import `AgGridModule` directly in your component.

### 1. First, ensure you have installed AG-Grid correctly:
```bash
npm install ag-grid-angular ag-grid-community
```

### 2. Create a new component (if you haven't already):
```bash
ng generate component grid --standalone
```

### 3. Here's the complete corrected component file:

**File:** `grid.component.ts`

```typescript
import { Component } from '@angular/core';
import { AgGridModule } from 'ag-grid-angular';
import { ColDef, GridApi, GridReadyEvent, CellValueChangedEvent } from 'ag-grid-community';

@Component({
  selector: 'app-grid',
  standalone: true,
  imports: [AgGridModule], // This is the crucial import
  templateUrl: './grid.component.html',
  styleUrls: ['./grid.component.css']
})
export class GridComponent {
  private gridApi!: GridApi;
  
  // Column Definitions
  colDefs: ColDef[] = [
    { field: 'id', headerName: 'ID', editable: false },
    { field: 'make', headerName: 'Make', editable: true },
    { field: 'model', headerName: 'Model', editable: true },
    { 
      field: 'price', 
      headerName: 'Price', 
      editable: true, 
      valueFormatter: params => params.value.toLocaleString() 
    },
    { 
      field: 'actions',
      headerName: 'Actions',
      cellRenderer: () => `
        <button class="btn btn-sm btn-danger delete-btn">Delete</button>
      `,
      onCellClicked: (params) => {
        if ((params.event?.target as HTMLElement).classList.contains('delete-btn')) {
          this.deleteRow(params.node.data.id);
        }
      }
    }
  ];

  // Default column definitions
  defaultColDef: ColDef = {
    sortable: true,
    filter: true,
    resizable: true,
    flex: 1
  };

  // Row data
  rowData = [
    { id: 1, make: 'Toyota', model: 'Celica', price: 35000 },
    { id: 2, make: 'Ford', model: 'Mondeo', price: 32000 },
    { id: 3, make: 'Porsche', model: 'Boxster', price: 72000 }
  ];

  // Grid ready event
  onGridReady(params: GridReadyEvent) {
    this.gridApi = params.api;
    this.gridApi.sizeColumnsToFit();
  }

  // Cell value changed event
  onCellValueChanged(event: CellValueChangedEvent) {
    console.log('Data after change:', this.rowData);
  }

  // Add new row
  addRow() {
    const newId = this.rowData.length > 0 
      ? Math.max(...this.rowData.map(row => row.id)) + 1 
      : 1;
    
    const newRow = {
      id: newId,
      make: '',
      model: '',
      price: 0
    };
    
    this.rowData = [...this.rowData, newRow];
    this.gridApi.setGridOption('rowData', this.rowData);
    
    // Scroll to and focus the new row
    const rowIndex = this.rowData.length - 1;
    this.gridApi.ensureIndexVisible(rowIndex);
    this.gridApi.setFocusedCell(rowIndex, 'make');
    this.gridApi.startEditingCell({
      rowIndex,
      colKey: 'make'
    });
  }

  // Delete row
  deleteRow(id: number) {
    this.rowData = this.rowData.filter(row => row.id !== id);
    this.gridApi.setGridOption('rowData', this.rowData);
  }
}
```

### 4. Template file:

**File:** `grid.component.html`

```html
<div class="grid-container">
  <div class="grid-actions">
    <button (click)="addRow()" class="btn btn-primary">Add New Row</button>
  </div>
  
  <ag-grid-angular
    style="width: 100%; height: 500px;"
    class="ag-theme-alpine"
    [rowData]="rowData"
    [columnDefs]="colDefs"
    [defaultColDef]="defaultColDef"
    (gridReady)="onGridReady($event)"
    (cellValueChanged)="onCellValueChanged($event)"
    [animateRows]="true"
    [rowSelection]="'single'">
  </ag-grid-angular>
</div>
```

### 5. Styles file:

**File:** `grid.component.css`

```css
.grid-container {
  padding: 20px;
  height: 100%;
  display: flex;
  flex-direction: column;
}

.grid-actions {
  margin-bottom: 15px;
}

.ag-theme-alpine {
  --ag-grid-size: 5px;
  --ag-list-item-height: 30px;
  --ag-font-size: 14px;
}

.delete-btn {
  padding: 2px 8px;
}
```

### 6. Global styles:

Add this to your `styles.css` or `styles.scss` at the project root:

```css
@import "ag-grid-community/styles/ag-grid.css";
@import "ag-grid-community/styles/ag-theme-alpine.css";
```

### 7. Usage in your app:

Add the grid component to your `app.component.html`:

```html
<app-grid></app-grid>
```

And make sure your `app.component.ts` has the grid component imported if it's standalone:

```typescript
import { Component } from '@angular/core';
import { GridComponent } from './grid/grid.component';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [GridComponent],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'ag-grid-demo';
}
```

## Key Differences from Original Instructions:

1. **No need for `provideAgGrid()`** - This was removed in newer versions
2. **Standalone component approach** - Uses `standalone: true` and imports `AgGridModule` directly in the component
3. **Simplified setup** - No need to modify `app.config.ts`

This approach will work perfectly with Angular 17.3.17 and the latest version of AG-Grid.









# Setting Up AG-Grid in Angular 17 with CRUD Operations

Here's a step-by-step guide to implement AG-Grid in your Angular 17 application with full CRUD (Create, Read, Update, Delete) functionality using dummy data.

## Step 1: Install AG-Grid Packages

First, install the necessary AG-Grid packages:

```bash
npm install ag-grid-angular ag-grid-community
```

## Step 2: Import AG-Grid Modules

Open `app.config.ts` (or your module file in Angular 17) and add:

```typescript
import { ApplicationConfig } from '@angular/core';
import { provideAgGrid } from 'ag-grid-angular';

export const appConfig: ApplicationConfig = {
  providers: [
    provideAgGrid()
  ]
};
```

## Step 3: Create a Component for the Grid

Generate a new component:
```bash
ng generate component grid
```

## Step 4: Set Up the Grid Component

Edit `grid.component.ts`:

```typescript
import { Component } from '@angular/core';
import { ColDef, GridApi, GridReadyEvent, CellValueChangedEvent, RowSelectedEvent } from 'ag-grid-community';

@Component({
  selector: 'app-grid',
  templateUrl: './grid.component.html',
  styleUrls: ['./grid.component.css']
})
export class GridComponent {
  private gridApi!: GridApi;
  
  // Dummy data
  rowData: any[] = [
    { id: 1, make: 'Toyota', model: 'Celica', price: 35000 },
    { id: 2, make: 'Ford', model: 'Mondeo', price: 32000 },
    { id: 3, make: 'Porsche', model: 'Boxster', price: 72000 }
  ];

  // Column definitions
  colDefs: ColDef[] = [
    { field: 'make', editable: true },
    { field: 'model', editable: true },
    { field: 'price', editable: true, valueFormatter: params => params.value.toLocaleString() },
    { 
      field: 'actions',
      cellRenderer: () => `
        <button class="btn btn-sm btn-danger delete-btn">Delete</button>
      `,
      onCellClicked: (params) => {
        if ((params.event?.target as HTMLElement).classList.contains('delete-btn')) {
          this.deleteRow(params.node.data.id);
        }
      }
    }
  ];

  defaultColDef: ColDef = {
    sortable: true,
    filter: true,
    flex: 1
  };

  // Initialize grid
  onGridReady(params: GridReadyEvent) {
    this.gridApi = params.api;
    this.gridApi.sizeColumnsToFit();
  }

  // Handle cell value changes
  onCellValueChanged(event: CellValueChangedEvent) {
    console.log('Data after change:', this.rowData);
  }

  // Add new row
  addRow() {
    const newId = this.rowData.length > 0 
      ? Math.max(...this.rowData.map(row => row.id)) + 1 
      : 1;
    
    const newRow = {
      id: newId,
      make: '',
      model: '',
      price: 0
    };
    
    this.rowData = [...this.rowData, newRow];
    this.gridApi.setGridOption('rowData', this.rowData);
    
    // Scroll to and focus the new row
    const rowIndex = this.rowData.length - 1;
    this.gridApi.ensureIndexVisible(rowIndex);
    this.gridApi.setFocusedCell(rowIndex, 'make');
    this.gridApi.startEditingCell({
      rowIndex,
      colKey: 'make'
    });
  }

  // Delete row
  deleteRow(id: number) {
    this.rowData = this.rowData.filter(row => row.id !== id);
    this.gridApi.setGridOption('rowData', this.rowData);
  }
}
```

## Step 5: Create the Template

Edit `grid.component.html`:

```html
<div class="grid-container">
  <div class="grid-actions">
    <button (click)="addRow()" class="btn btn-primary">Add New Row</button>
  </div>
  
  <ag-grid-angular
    style="width: 100%; height: 500px;"
    class="ag-theme-alpine"
    [rowData]="rowData"
    [columnDefs]="colDefs"
    [defaultColDef]="defaultColDef"
    (gridReady)="onGridReady($event)"
    (cellValueChanged)="onCellValueChanged($event)"
    [animateRows]="true"
    [rowSelection]="'single'">
  </ag-grid-angular>
</div>
```

## Step 6: Add Styles

Edit `grid.component.css`:

```css
.grid-container {
  padding: 20px;
  height: 100%;
  display: flex;
  flex-direction: column;
}

.grid-actions {
  margin-bottom: 15px;
}

.ag-theme-alpine {
  --ag-grid-size: 5px;
  --ag-list-item-height: 30px;
  --ag-font-size: 14px;
}

.delete-btn {
  padding: 2px 8px;
}
```

## Step 7: Update App Component

Edit `app.component.html` to include your grid:

```html
<app-grid></app-grid>
```

## Step 8: Add AG-Grid Styles

Add the AG-Grid theme to your `styles.css` or `styles.scss`:

```css
@import "ag-grid-community/styles/ag-grid.css";
@import "ag-grid-community/styles/ag-theme-alpine.css";
```

## Step 9: Run Your Application

Start your Angular development server:

```bash
ng serve
```

Now you should see a fully functional AG-Grid with:
- Display of dummy data
- Editable cells
- Add new row functionality
- Delete row functionality
- Sorting and filtering capabilities

## Additional Features You Might Want to Add

1. **Server-side operations**: Replace the dummy data with API calls
2. **Validation**: Add cell value validation
3. **Pagination**: Enable pagination in the grid
4. **Excel Export**: Add export to Excel functionality
5. **State Persistence**: Save grid state to localStorage

Would you like me to elaborate on any of these additional features or any part of the implementation?






<ag-grid-angular
  style="width: 100%; height: 300px;"
  class="ag-theme-alpine"
  [rowData]="rowData"
  [columnDefs]="columnDefs"
  [defaultColDef]="defaultColDef"
  rowSelection="single"
  (gridReady)="onGridReady($event)"
  (cellValueChanged)="onCellValueChanged($event)">
</ag-grid-angular>

<br />

<button (click)="addRow()">Add Row</button>
<button (click)="deleteSelectedRow()">Delete Selected Row</button>



import { Component } from '@angular/core';
import { AgGridModule } from 'ag-grid-angular';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [AgGridModule],  // ✅ Important for standalone Angular
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  columnDefs = [
    { headerName: 'ID', field: 'id', editable: true },
    { headerName: 'Name', field: 'name', editable: true },
    { headerName: 'Age', field: 'age', editable: true }
  ];

  defaultColDef = {
    sortable: true,
    filter: true,
    resizable: true
  };

  rowData = [
    { id: 1, name: 'John Doe', age: 25 },
    { id: 2, name: 'Jane Smith', age: 30 }
  ];

  gridApi: any;

  onGridReady(params: any) {
    this.gridApi = params.api;
  }

  onCellValueChanged(event: any) {
    console.log('Cell updated:', event.data);
  }

  addRow() {
    const newItem = { id: this.rowData.length + 1, name: '', age: 0 };
    this.rowData = [...this.rowData, newItem];
  }

  deleteSelectedRow() {
    const selectedRows = this.gridApi?.getSelectedRows();
    if (selectedRows?.length) {
      this.rowData = this.rowData.filter(row => row !== selectedRows[0]);
    }
  }
}







Perfect! Let’s walk step-by-step from your fresh Angular app angularapp1 to building an editable AG Grid with add, delete, and modify functionality. You’re starting from ng new angularapp1, so here’s what you do next:

⸻

✅ Step 1: Install AG Grid in Your Angular App

Navigate to your app folder and install AG Grid packages:

cd angularapp1
npm install --save ag-grid-community ag-grid-angular


⸻

✅ Step 2: Import AG Grid Module

Open app.module.ts and import AgGridModule:

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { AgGridModule } from 'ag-grid-angular';

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
    AgGridModule.withComponents([]) // 👈 Add this
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}


⸻

✅ Step 3: Use AG Grid in app.component.html

Replace everything in app.component.html with this:

<h2>Editable AG Grid Example</h2>

<ag-grid-angular
  style="width: 100%; height: 300px;"
  class="ag-theme-alpine"
  [rowData]="rowData"
  [columnDefs]="columnDefs"
  [defaultColDef]="defaultColDef"
  rowSelection="single"
  (gridReady)="onGridReady($event)"
  (cellValueChanged)="onCellValueChanged($event)">
</ag-grid-angular>

<br />

<button (click)="addRow()">Add Row</button>
<button (click)="deleteSelectedRow()">Delete Selected Row</button>


⸻

✅ Step 4: Add AG Grid Logic in app.component.ts

Open app.component.ts and replace it with:

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  columnDefs = [
    { headerName: 'ID', field: 'id', editable: true },
    { headerName: 'Name', field: 'name', editable: true },
    { headerName: 'Age', field: 'age', editable: true }
  ];

  defaultColDef = {
    sortable: true,
    filter: true,
    resizable: true
  };

  rowData = [
    { id: 1, name: 'John Doe', age: 25 },
    { id: 2, name: 'Jane Smith', age: 30 }
  ];

  private gridApi: any;

  onGridReady(params: any) {
    this.gridApi = params.api;
  }

  onCellValueChanged(event: any) {
    console.log('Updated Row:', event.data);
  }

  addRow() {
    const newItem = {
      id: this.rowData.length + 1,
      name: '',
      age: 0
    };
    this.rowData = [...this.rowData, newItem];
  }

  deleteSelectedRow() {
    const selectedRows = this.gridApi.getSelectedRows();
    if (selectedRows.length > 0) {
      const selectedRow = selectedRows[0];
      this.rowData = this.rowData.filter(row => row !== selectedRow);
    }
  }
}


⸻

✅ Step 5: Apply AG Grid Theme

Add the theme in angular.json. Find "styles" array and add:

"node_modules/ag-grid-community/styles/ag-grid.css",
"node_modules/ag-grid-community/styles/ag-theme-alpine.css"

Example:

"styles": [
  "src/styles.css",
  "node_modules/ag-grid-community/styles/ag-grid.css",
  "node_modules/ag-grid-community/styles/ag-theme-alpine.css"
]


⸻

✅ Step 6: Run Your App

ng serve

Open your browser at http://localhost:4200 – you’ll see the editable AG Grid with “Add Row” and “Delete Selected Row” buttons.

⸻

Once you complete this step, I’ll guide you to:
	•	Make a row editable via a popup (optional).
	•	Connect to a backend (Firebase or Express).
	•	Add inline form validations.

Just let me know when you’re ready!







.backdrop {
  background-color: rgba(0, 0, 0, 0.9);
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
}

dialog {
  width: 90%;
  max-width: 30rem;
  background-color: #433352;
  border-radius: 6px;
  border: none;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.4);
  overflow: hidden;
  padding: 1rem;
  top: 5rem;
}

h2 {
  margin: 0;
  color: #d0c2e1;
}

label {
  display: block;
  font-weight: bold;
  font-size: 0.85rem;
  color: #ab9ac0;
}

input,
textarea {
  width: 100%;
  font: inherit;
  padding: 0.15rem 0.25rem;
  border-radius: 4px;
  border: 1px solid #ab9ac0;
  background-color: #d0c2e1;
}

.actions {
  margin: 1rem 0 0;
  display: flex;
  justify-content: flex-end;
  gap: 0.25rem;
}

button {
  font: inherit;
  cursor: pointer;
  border: none;
  padding: 0.35rem 1.25rem;
  border-radius: 4px;
  background-color: transparent;
}

button[type="button"] {
  color: #bdadcf;
}

button[type="button"]:hover,
button[type="button"]:active {
  color: #d0c2e1;
}

button[type="submit"] {
  background-color: #9c73ca;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
  transition: all 0.3s ease;
}

button[type="submit"]:hover,
button[type="submit"]:active {
  background-color: #895cce;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.3);
}

@media (min-width: 768px) {
  dialog {
    padding: 2rem;
  }
}




<div class="backdrop"></div>
<dialog open>
  <h2>Add Task</h2>
  <form>
    <p>
      <label for="title">Title</label>
      <input type="text" id="title" name="title" />
    </p>

    <p>
      <label for="summary">Summary</label>
      <textarea id="summary" rows="5" name="summary"></textarea>
    </p>

    <p>
      <label for="due-date">Due Date</label>
      <input type="date" id="due-date" name="due-date" />
    </p>

    <p class="actions">
      <button type="button">Cancel</button>
      <button type="submit">Create</button>
    </p>
  </form>
</dialog>






https://github.com/mschwarzmueller/angular-complete-guide-course-resources/blob/main/attachments/02-essentials/styles.css




It looks like you're encountering the error **"Rf is not recognized"** when trying to run cleanup commands. This typically happens on Windows because the `rm -rf` command is a Unix/Linux command that doesn't work directly in Windows Command Prompt. Here's how to fix this:

---

### **Solution for Windows Users**

#### **1. Use Windows-Specific Cleanup Commands**
Replace the Unix commands with their Windows equivalents:

```cmd
:: Remove node_modules and lock files
rd /s /q node_modules
del package-lock.json

:: Clear npm cache
npm cache clean --force
```

#### **2. Alternative Using PowerShell**
If you're using PowerShell (recommended for Angular development on Windows), you can use:

```powershell
# Remove node_modules and lock files
Remove-Item -Recurse -Force node_modules
Remove-Item -Force package-lock.json

# Clear npm cache
npm cache clean --force
```

#### **3. Reinstall Dependencies**
After cleaning up:

```cmd
npm install
```

---

### **If You Prefer Unix Commands on Windows**
1. **Use Git Bash** (comes with Git for Windows)  
   - It supports `rm -rf` and other Unix commands.

2. **Use Windows Subsystem for Linux (WSL)**  
   - Install WSL from Microsoft Store  
   - Then use real Linux commands.

---

### **Complete Step-by-Step Fix**
1. **Open Command Prompt or PowerShell as Administrator**
2. **Run the Windows cleanup commands** (from above)
3. **Reinstall Angular CLI globally** (if needed):
   ```cmd
   npm install -g @angular/cli@latest
   ```
4. **Reinstall project dependencies**:
   ```cmd
   npm install
   ```

---

### **Still Having Issues?**
If you get other errors after these steps:
1. Check your Node.js version (`node -v`) - should be v18+ for Angular 18
2. Try deleting the `.angular` cache folder manually
3. Post the exact error message you're seeing now

Let me know which step you get stuck on and I'll help further!







# Solution for "No Matching Version Found for @babel/generator" Error

Based on your screenshot and error message, you're encountering version installation issues with Babel packages. Here's how to fix this:

## The Problem
- You're trying to install `@babel/generator07.24.0` (incorrect syntax)
- The correct package name is `@babel/generator@7.24.0`
- There appears to be a version mismatch in your Angular environment

## Correct Solution

### 1. Fix the Installation Command
Use the correct npm package syntax:
```bash
npm install @babel/core@7.24.0 @babel/generator@7.24.0 @babel/traverse@7.24.0 --save-dev
```

### 2. Clean Your Installation First
```bash
rm -rf node_modules package-lock.json
npm cache clean --force
```

### 3. Verify Available Versions
Check what versions actually exist:
```bash
npm view @babel/generator versions
```

### 4. Alternative Version Installation
If 7.24.0 isn't available, try:
```bash
npm install @babel/core@latest @babel/generator@latest @babel/traverse@latest --save-dev
```

### 5. Reinstall Angular Dependencies
```bash
npm install
```

## Additional Checks

1. **Verify your Angular CLI version**:
   ```bash
   ng version
   ```

2. **Check for version conflicts**:
   ```bash
   npm ls @babel/core @babel/generator
   ```

3. **If using Yarn**:
   ```bash
   yarn add @babel/core @babel/generator @babel/traverse
   ```

## Why This Happened
- The `07.24.0` syntax is invalid (should be `@7.24.0`)
- There might be network/cache issues preventing package resolution
- Your project might have conflicting version requirements

Let me know if you still encounter issues after trying these steps!









# Solving "Babel Generator Not Found" Error in Angular

This error typically occurs when there's a mismatch between Babel-related packages in your Angular project. Here's how to fix it permanently:

## Root Cause
- Incomplete or corrupted Babel installation
- Version conflicts between `@babel/core`, `@babel/generator`, and other Babel packages
- Angular CLI's internal Babel configuration mismatch

## Complete Solution

### 1. First, Clean Your Project
```bash
rm -rf node_modules package-lock.json .angular/cache
npm cache clean --force
```

### 2. Install Required Babel Packages
```bash
npm install @babel/core@7.24.0 @babel/generator@7.24.0 @babel/traverse@7.24.0 --save-dev
```

### 3. Update Angular CLI and Compiler
```bash
npm install @angular/cli@18.2.0 @angular/compiler-cli@18.2.0 --save-dev
```

### 4. Reinstall All Dependencies
```bash
npm install --legacy-peer-deps
```

### 5. Verify Babel Installation
```bash
npm ls @babel/core @babel/generator @babel/traverse
```

## Additional Troubleshooting

### If the Error Persists:
1. **Check for Duplicate Babel Versions**:
   ```bash
   npm ls @babel/core
   ```
   - Remove duplicate versions with:
     ```bash
     npm uninstall @babel/core
     npm install @babel/core@7.24.0 --save-dev
     ```

2. **Update Webpack Configuration** (if using custom webpack):
   ```javascript
   // webpack.config.js
   module.exports = {
     resolve: {
       alias: {
         '@babel/generator$': require.resolve('@babel/generator')
       }
     }
   };
   ```

3. **Check Angular Builder Configuration**:
   In `angular.json`, ensure:
   ```json
   "builder": "@angular-devkit/build-angular:browser"
   ```

## Final Verification
```bash
ng build --prod
```
- The build should complete without Babel errors

## Prevention for Future
- Always use consistent Babel package versions
- Avoid manually adding Babel plugins unless absolutely necessary
- Let Angular CLI manage most of the compilation process

Let me know if you still see the error and I'll help debug further!






# Remove global Angular CLI
npm uninstall -g @angular/cli

# Clear npm cache
npm cache clean --force

# Reinstall Angular CLI globally
npm install -g @angular/cli@18.2.19







<button onclick="openNewItemDialog()">Add New Book</button>

<script type="text/javascript">
  function openNewItemDialog() {
    var options = {
      title: "Add New Book",
      url: "/sites/YourSite/Lists/BookManagement/NewForm.aspx", // Replace with your actual URL
      width: 800,
      height: 600,
      dialogReturnValueCallback: function (result, returnValue) {
        if (result === SP.UI.DialogResult.OK) {
          alert("Book added successfully!");
          location.reload();
        }
      }
    };

    SP.UI.ModalDialog.showModalDialog(options);

    // Use delay and retry mechanism
    setTimeout(function modifyIframeContents() {
      var iframe = document.querySelector("iframe[title='Add New Book']");
      if (!iframe || !iframe.contentWindow || !iframe.contentDocument) {
        setTimeout(modifyIframeContents, 500);
        return;
      }

      var iframeDoc = iframe.contentDocument;

      if (iframeDoc.readyState !== "complete") {
        setTimeout(modifyIframeContents, 500);
        return;
      }

      try {
        // ✅ Hide SITE ADMINISTRATION tab
        const tabs = iframeDoc.querySelectorAll(".ms-cui-tabContainer .ms-cui-tab");
        tabs.forEach(tab => {
          if (tab.innerText.trim().includes("SITE ADMINISTRATION")) {
            tab.style.display = "none";
          }
        });

        // ✅ Hide "Spelling" button
        const buttons = iframeDoc.querySelectorAll(".ms-cui-tt-a[title='Spelling']");
        buttons.forEach(btn => btn.style.display = "none");

        // ✅ Optionally add a custom button to ribbon
        const ribbonBar = iframeDoc.querySelector(".ms-cui-topBar2");
        if (ribbonBar) {
          const customBtn = iframeDoc.createElement("button");
          customBtn.innerText = "📚 Custom Ribbon Action";
          customBtn.style.marginLeft = "20px";
          customBtn.style.padding = "5px 10px";
          customBtn.onclick = function () {
            alert("Custom ribbon action clicked!");
          };
          ribbonBar.appendChild(customBtn);
        }
      } catch (e) {
        console.error("Error modifying iframe:", e);
        setTimeout(modifyIframeContents, 500);
      }
    }, 1500);
  }
</script>








<!DOCTYPE html>
<html>
<head>
    <title>Book Management</title>
    <!-- SharePoint required scripts -->
    <script type="text/javascript" src="/_layouts/15/init.js"></script>
    <script type="text/javascript" src="/_layouts/15/MicrosoftAjax.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.UI.Dialog.js"></script>
    
    <style>
        /* Style for our trigger button */
        .launch-button {
            background-color: #0078d4;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
    </style>
</head>
<body>
    <button class="launch-button" onclick="openCleanFormDialog()">Add New Book</button>

    <script type="text/javascript">
        function openCleanFormDialog() {
            // 1. Create a custom page URL that hides all unnecessary elements
            var formUrl = _spPageContextInfo.webAbsoluteUrl + 
                         "/Lists/BookManagement/NewForm.aspx?IsDlg=1";
            
            // 2. Configure dialog options
            var options = {
                title: "Add New Book",
                url: formUrl,
                width: 800,
                height: 600,
                dialogReturnValueCallback: function(result, returnValue) {
                    if (result === SP.UI.DialogResult.OK) {
                        SP.UI.Notify.addNotification("Book added successfully!", false);
                        location.reload(); // Refresh the page if needed
                    }
                }
            };
            
            // 3. Open the dialog
            var dialog = SP.UI.ModalDialog.showModalDialog(options);
            
            // 4. Hide unwanted elements after dialog loads
            setTimeout(function hideUnwantedElements() {
                try {
                    var iframe = document.querySelector("iframe[title='Add New Book']");
                    if (iframe && iframe.contentDocument) {
                        var doc = iframe.contentDocument;
                        
                        // Hide calendar and other elements
                        var elementsToHide = [
                            "#Ribbon\\.EditingTools\\.CPEditTab\\.RichText\\.Spelling", // Spelling
                            "#Ribbon\\.SiteActions", // Site Administration
                            "#Ribbon\\.CalendarTab", // Calendar
                            "#datepicker\\.trigger", // Date picker trigger
                            "a[title='Calendar']", // Calendar link
                            ".ms-dtinput", // Date input controls
                            ".ms-dttimeinput" // Time input controls
                        ];
                        
                        // Inject CSS to hide elements
                        var style = doc.createElement("style");
                        style.type = "text/css";
                        style.innerHTML = elementsToHide.map(selector => 
                            `${selector} { display: none !important; }`
                        ).join("\n");
                        doc.head.appendChild(style);
                        
                        // Alternatively hide via JavaScript if CSS doesn't work
                        elementsToHide.forEach(selector => {
                            var elements = doc.querySelectorAll(selector);
                            elements.forEach(el => el.style.display = "none");
                        });
                    }
                } catch(e) {
                    console.log("Error modifying dialog content:", e);
                }
            }, 2000); // Wait 2 seconds for iframe to load
        }
    </script>
</body>
</html>






<!DOCTYPE html>
<html>
<head>
    <title>Book Management</title>
    <!-- SharePoint required scripts -->
    <script type="text/javascript" src="/_layouts/15/init.js"></script>
    <script type="text/javascript" src="/_layouts/15/MicrosoftAjax.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.UI.Dialog.js"></script>
    
    <style>
        /* Style for our trigger button */
        .custom-button {
            background-color: #0078d4;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 2px;
            cursor: pointer;
            font-size: 14px;
            margin: 10px;
        }
    </style>
</head>
<body>
    <button class="custom-button" onclick="openCustomizedForm()">Add New Book</button>

    <script type="text/javascript">
        function openCustomizedForm() {
            // Use the complete URL to your NewForm.aspx
            var fullFormUrl = "https://yourdomain.sharepoint.com/sites/yoursite/Lists/BookManagement/NewForm.aspx";
            
            // Add our custom CSS to hide elements
            var cssToInject = `
                <style type="text/css">
                    /* Hide spelling option */
                    #Ribbon\.EditingTools\.CPEditTab\.RichText\.Spelling,
                    a[title="Spelling"] {
                        display: none !important;
                    }
                    
                    /* Hide Site Administration */
                    #Ribbon\.SiteActions,
                    li[title="SITE ADMINISTRATION"] {
                        display: none !important;
                    }
                    
                    /* Hide other ribbon elements if needed */
                    .ms-cui-topBar2 {
                        display: none !important;
                    }
                </style>
            `;
            
            // Create a custom page URL that will inject our CSS
            var customUrl = "/_layouts/15/iframe.aspx?";
            customUrl += "url=" + encodeURIComponent(fullFormUrl);
            customUrl += "&isDlg=1";
            
            var options = {
                title: "Add New Book",
                url: customUrl,
                width: 800,
                height: 600,
                dialogReturnValueCallback: function(result, returnValue) {
                    if (result === SP.UI.DialogResult.OK) {
                        SP.UI.Notify.addNotification("Book added successfully!", false);
                    }
                }
            };
            
            // Open the dialog
            var dialog = SP.UI.ModalDialog.showModalDialog(options);
            
            // Alternative method - inject CSS after dialog loads
            setTimeout(function() {
                var iframe = document.querySelector("iframe[title='Add New Book']");
                if (iframe && iframe.contentDocument) {
                    var style = iframe.contentDocument.createElement("style");
                    style.innerHTML = cssToInject;
                    iframe.contentDocument.head.appendChild(style);
                }
            }, 2000);
        }
    </script>
</body>
</html>







<!DOCTYPE html>
<html>
<head>
    <title>Add New Book</title>
    <!-- SharePoint required scripts -->
    <script type="text/javascript" src="/_layouts/15/init.js"></script>
    <script type="text/javascript" src="/_layouts/15/MicrosoftAjax.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.UI.Dialog.js"></script>
    
    <style type="text/css">
        /* Pre-defined styles to hide elements */
        .hide-spelling #Ribbon\.EditingTools\.CPEditTab\.RichText\.Spelling {
            display: none !important;
        }
        .hide-siteadmin #Ribbon\.SiteActions {
            display: none !important;
        }
        .hide-siteadmin #SiteAdminMenu {
            display: none !important;
        }
    </style>
</head>
<body>
    <button onclick="openCustomNewForm()" class="ms-Button">
        <span class="ms-Button-label">Add New Book</span>
    </button>

    <script type="text/javascript">
        function openCustomNewForm() {
            // Create a custom page that inherits SharePoint styles but hides unwanted elements
            var customFormUrl = "/_layouts/15/iframe.aspx?";
            customFormUrl += "url=" + encodeURIComponent("/sites/YourSite/Lists/BookManagement/NewForm.aspx");
            customFormUrl += "&hideSpelling=true";
            customFormUrl += "&hideSiteAdmin=true";
            
            var options = {
                title: "Add New Book",
                url: customFormUrl,
                width: 800,
                height: 600,
                dialogReturnValueCallback: function(result, returnValue) {
                    if (result === SP.UI.DialogResult.OK) {
                        SP.UI.Notify.addNotification("Book added successfully!");
                    }
                }
            };
            
            SP.UI.ModalDialog.showModalDialog(options);
        }
        
        // Alternative approach using query string parameters
        function modifyNewFormPage() {
            var newFormUrl = "/sites/YourSite/Lists/BookManagement/NewForm.aspx";
            newFormUrl += "?HideSpelling=true&HideSiteAdmin=true";
            
            var options = {
                title: "Add New Book",
                url: newFormUrl,
                width: 800,
                height: 600
            };
            
            var dialog = SP.UI.ModalDialog.showModalDialog(options);
            
            // This approach requires corresponding JavaScript on the NewForm.aspx page
            // that reads these parameters and hides the elements
        }
    </script>
</body>
</html>









<!DOCTYPE html>
<html>
<head>
  <title>Add New Book</title>
  <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
  <script type="text/javascript" src="/_layouts/15/SP.js"></script>
  <script type="text/javascript" src="/_layouts/15/SP.UI.Dialog.js"></script>
</head>
<body>

  <!-- Trigger Button -->
  <button onclick="openNewItemDialog()">Add New Book</button>

  <script type="text/javascript">
    function openNewItemDialog() {
      var options = {
        title: "Add New Book",
        url: "/sites/YourSite/Lists/BookManagement/NewForm.aspx", // 🔁 Replace accordingly
        width: 800,
        height: 600,
        dialogReturnValueCallback: function (result, returnValue) {
          if (result === SP.UI.DialogResult.OK) {
            alert("Book added successfully!");
            location.reload();
          }
        }
      };

      SP.UI.ModalDialog.showModalDialog(options);

      setTimeout(function waitForIframe() {
        var iframe = document.querySelector("iframe[title='Add New Book']"); // adjust if different title
        if (iframe && iframe.contentDocument && iframe.contentDocument.readyState === "complete") {
          var iframeDoc = iframe.contentDocument;

          // 1. 🔒 Hide "Spelling" button
          const spelling = iframeDoc.querySelector("a[title='Spelling']");
          if (spelling) spelling.style.display = "none";

          // 2. 🔒 Hide "SITE ADMINISTRATION" tab
          const siteAdminTab = iframeDoc.querySelector("li[title='SITE ADMINISTRATION']");
          if (siteAdminTab) siteAdminTab.style.display = "none";

          // Also hide the ribbon group if needed
          const siteAdminRibbonGroup = iframeDoc.querySelector("#Ribbon.SiteActions");
          if (siteAdminRibbonGroup) siteAdminRibbonGroup.style.display = "none";

        } else {
          // Retry if iframe not yet loaded
          setTimeout(waitForIframe, 500);
        }
      }, 1500);
    }
  </script>

</body>
</html>





<!DOCTYPE html>
<html>
<head>
  <title>Add New Book</title>
  <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
  <script type="text/javascript" src="/_layouts/15/SP.js"></script>
  <script type="text/javascript" src="/_layouts/15/SP.UI.Dialog.js"></script>
  <style>
    button {
      padding: 10px 16px;
      font-size: 14px;
      border-radius: 4px;
      border: none;
      background-color: #0078d7;
      color: white;
      cursor: pointer;
    }
    button:hover {
      background-color: #005a9e;
    }
  </style>
</head>
<body>

  <!-- Trigger Button -->
  <button onclick="openNewItemDialog()">Add New Book</button>

  <script type="text/javascript">
    function openNewItemDialog() {
      var options = {
        title: "Add New Book",
        url: "/sites/YourSite/Lists/BookManagement/NewForm.aspx", // 🔁 Replace with your site URL and list name
        width: 800,
        height: 600,
        dialogReturnValueCallback: function (result, returnValue) {
          if (result === SP.UI.DialogResult.OK) {
            alert("Book added successfully!");
            location.reload();
          }
        }
      };

      SP.UI.ModalDialog.showModalDialog(options);

      // Inject button after iframe loads
      setTimeout(function injectCustomButton() {
        var iframe = document.querySelector("iframe[title='Add New Book']"); // Match the form title shown in popup
        if (iframe && iframe.contentDocument && iframe.contentDocument.readyState === "complete") {
          var iframeDoc = iframe.contentDocument;

          // Hide the "Spelling" button if it exists
          var spellingBtn = iframeDoc.querySelector("a[title='Spelling']");
          if (spellingBtn) spellingBtn.style.display = "none";

          // Add custom button inside the ribbon
          var ribbonBar = iframeDoc.querySelector(".ms-cui-topBar2");
          if (ribbonBar) {
            var myButton = iframeDoc.createElement("button");
            myButton.innerText = "📝 Custom Action";
            myButton.style.marginLeft = "20px";
            myButton.onclick = function () {
              alert("Custom action inside modal popup clicked!");
              // You can trigger form functions here if needed
            };
            ribbonBar.appendChild(myButton);
          }
        } else {
          // Retry if iframe not yet loaded
          setTimeout(injectCustomButton, 500);
        }
      }, 1500);
    }
  </script>

</body>
</html>





$env:NODE_OPTIONS="--openssl-legacy-provider"
ng serve



<!-- AddBook.html - SharePoint Integrated Approach -->
<!DOCTYPE html>
<html>
<head>
    <title>Add Book</title>
    <!-- Reference SharePoint styles -->
    <link rel="stylesheet" href="/_layouts/15/defaultcss.ashx">
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
    <script type="text/javascript" src="/_layouts/15/ClientPeoplePicker.js"></script>
    <script type="text/javascript" src="/_layouts/15/init.js"></script>
    <script type="text/javascript" src="/_layouts/15/ClientForms.js"></script>
    <style>
        .sp-label { font-weight: bold; margin-top: 8px; display: block; }
        .sp-input { width: 100%; padding: 6px; margin-top: 4px; }
        .container { max-width: 500px; margin: 0 auto; padding: 20px; }
        .btn { margin-top: 10px; }
    </style>
</head>
<body>
    <div class="container">
        <h2>Add New Book</h2>
        
        <label class="sp-label" for="bookName">Book Name</label>
        <input type="text" id="bookName" class="sp-input">

        <label class="sp-label" for="isbn">ISBN</label>
        <input type="number" id="isbn" class="sp-input" min="10000" max="99999" readonly>

        <label class="sp-label" for="publicationDate">Publication Date</label>
        <input type="date" id="publicationDate" class="sp-input">

        <label class="sp-label" for="bookCount">Number of Copies</label>
        <input type="number" id="bookCount" class="sp-input" min="1">

        <label class="sp-label">Author</label>
        <div id="peoplePickerDiv"></div>

        <button class="btn btn-primary" onclick="submitBook()">Submit Book</button>
    </div>

    <script>
        // Set today's date as max date for publication
        document.addEventListener("DOMContentLoaded", function () {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById("publicationDate").setAttribute("max", today);

            // Set auto-generated ISBN
            document.getElementById("isbn").value = Math.floor(10000 + Math.random() * 90000);

            initializePeoplePicker(); // init SharePoint people picker
        });

        // Function to initialize the SPClientPeoplePicker
        function initializePeoplePicker() {
            var schema = {};
            schema.PrincipalAccountType = 'User';
            schema.SearchPrincipalSource = 15;
            schema.ResolvePrincipalSource = 15;
            schema.AllowMultipleValues = false;
            schema.MaximumEntitySuggestions = 50;
            schema.Width = '100%';

            SPClientPeoplePicker_InitStandaloneControlWrapper("peoplePickerDiv", null, schema);
        }

        // Function to submit the book to SharePoint List
        function submitBook() {
            var bookName = document.getElementById("bookName").value.trim();
            var isbn = document.getElementById("isbn").value.trim();
            var pubDate = document.getElementById("publicationDate").value.trim();
            var bookCount = document.getElementById("bookCount").value.trim();

            var peoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerDiv_TopSpan;
            var users = peoplePicker.GetAllUserInfo();

            if (!bookName || !pubDate || !bookCount || users.length === 0) {
                alert("Please fill all fields and select an author.");
                return;
            }

            var loginName = users[0].Key;

            var ctx = new SP.ClientContext.get_current();
            var web = ctx.get_web();
            var user = web.ensureUser(loginName);

            ctx.load(user);
            ctx.executeQueryAsync(function () {
                var list = web.get_lists().getByTitle("Book Management");

                var itemCreateInfo = new SP.ListItemCreationInformation();
                var newItem = list.addItem(itemCreateInfo);

                newItem.set_item("BookName", bookName);
                newItem.set_item("ISBN", parseInt(isbn));
                newItem.set_item("numberof_books", parseInt(bookCount));
                newItem.set_item("AuthorName", user);
                newItem.set_item("PublicationDate", new Date(pubDate));
                newItem.update();

                ctx.executeQueryAsync(function () {
                    alert("Book added successfully!");
                    window.location.href = "/sites/yoursite/Lists/BookManagement"; // Redirect to list
                }, function (sender, args) {
                    alert("Error adding book: " + args.get_message());
                });

            }, function (sender, args) {
                alert("Error resolving user: " + args.get_message());
            });
        }
    </script>
</body>
</html>










<!DOCTYPE html>
<html>
<head>
    <title>Library Management</title>
    <!-- SharePoint styles -->
    <link rel="stylesheet" href="/_layouts/15/defaultcss.ashx" />
    <script src="/_layouts/15/init.js"></script>
    <script src="/_layouts/15/MicrosoftAjax.js"></script>
    <script src="/_layouts/15/SP.Runtime.js"></script>
    <script src="/_layouts/15/SP.js"></script>
    <script src="/_layouts/15/SP.UI.Controls.js"></script>
</head>
<body>
    <div id="chrome_ctrl_placeholder"></div>
    <div id="main-content" style="padding:20px;">
        <h2>Library Management Dashboard</h2>
        
        <button onclick="openSharePointNewForm()" class="ms-Button">
            <span class="ms-Button-label">Add New Book</span>
        </button>
        
        <button onclick="openSharePointUpload()" class="ms-Button">
            <span class="ms-Button-label">Upload Documents</span>
        </button>
        
        <h3>Book Inventory</h3>
        <iframe src="/Lists/BookManagement/AllItems.aspx?IsDlg=1" 
                style="width:100%; height:500px; border:none;"></iframe>
    </div>

    <script>
    // Initialize SharePoint UI
    ExecuteOrDelayUntilScriptLoaded(function() {
        SP.SOD.executeFunc('sp.js', 'SP.UI.Controls.Navigation', function() {
            var topNav = new SP.UI.Controls.Navigation(
                "chrome_ctrl_placeholder",
                {
                    appTitle: "Library Management",
                    appHelpPageUrl: "Help.aspx",
                    appIconUrl: "/_layouts/images/issuetracker.png",
                    appTitleIconUrl: "/_layouts/images/issuetracker.png",
                    appWebUrl: "/",
                    settingsLinks: [
                        new SP.UI.Controls.NavigationSettingsLink("Settings", "../Lists/BookManagement/AllItems.aspx")
                    ]
                }
            );
        });
        
        // Load your custom functionality
        SP.SOD.executeFunc('sp.js', 'SP.ClientContext', initCustomFeatures);
    }, 'sp.js');
    
    function initCustomFeatures() {
        // Only custom code that SharePoint can't do
        checkOverdueBooks();
    }
    
    function openSharePointNewForm() {
        var options = {
            url: _spPageContextInfo.webAbsoluteUrl + '/Lists/BookManagement/NewForm.aspx',
            title: 'Add New Book',
            allowMaximize: true,
            showClose: true,
            width: 800,
            height: 600
        };
        SP.UI.ModalDialog.showModalDialog(options);
    }
    
    function openSharePointUpload() {
        var options = {
            url: _spPageContextInfo.webAbsoluteUrl + '/_layouts/15/Upload.aspx?List={YOUR-LIST-ID}',
            title: 'Upload Document',
            allowMaximize: true,
            showClose: true,
            width: 800,
            height: 600
        };
        SP.UI.ModalDialog.showModalDialog(options);
    }
    
    function checkOverdueBooks() {
        // Your existing notification logic
        // This is one of the few custom parts you keep
    }
    </script>
</body>
</html>









<View>
  <Query>
    <Where>
      <And>
        <Eq>
          <FieldRef Name='Track_returnofbook' />
          <Value Type='Choice'>Issued</Value>
        </Eq>
        <Lt>
          <FieldRef Name='IssueDate' />
          <Value Type='DateTime' IncludeTimeValue='FALSE'>
            <Today OffsetDays='-15' />
          </Value>
        </Lt>
      </And>
    </Where>
  </Query>
</View>




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Library Notifications</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            padding: 20px;
        }
        .notification-container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
        }
        .notification-header {
            border-bottom: 2px solid #dee2e6;
            padding-bottom: 15px;
            margin-bottom: 20px;
        }
        .notification-item {
            padding: 15px;
            border-bottom: 1px solid #eee;
            transition: background-color 0.2s;
        }
        .notification-item:hover {
            background-color: #f8f9fa;
        }
        .overdue-badge {
            background-color: #dc3545;
            color: white;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
        }
        .no-notifications {
            text-align: center;
            padding: 40px;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="notification-container">
        <div class="notification-header d-flex justify-content-between align-items-center">
            <h2><i class="fas fa-bell me-2"></i> Overdue Books Notifications</h2>
            <span class="badge bg-danger" id="notificationCount">0</span>
        </div>
        
        <div id="notificationList">
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading notifications...</p>
            </div>
        </div>
    </div>

    <!-- Bootstrap & jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- SharePoint JSOM -->
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>

    <script type="text/javascript">
        // Main function to load notifications
        function loadAllNotifications() {
            const ctx = new SP.ClientContext.get_current();
            const list = ctx.get_web().get_lists().getByTitle("Issuance and Returns");
            const today = new Date();
            
            const camlQuery = new SP.CamlQuery();
            camlQuery.set_viewXml(`
                <View>
                    <Query>
                        <Where>
                            <And>
                                <IsNotNull>
                                    <FieldRef Name='IssueDate' />
                                </IsNotNull>
                                <IsNotNull>
                                    <FieldRef Name='ReturnDate' />
                                </IsNotNull>
                                <Lt>
                                    <FieldRef Name='ReturnDate' />
                                    <Value Type='DateTime'><Today /></Value>
                                </Lt>
                                <Eq>
                                    <FieldRef Name='Track_returnofbook' />
                                    <Value Type='Choice'>Issued</Value>
                                </Eq>
                            </And>
                        </Where>
                    </Query>
                </View>
            `);

            const items = list.getItems(camlQuery);
            ctx.load(items, 'Include(BookLookup,MemberLookup,IssueDate,ReturnDate,Track_returnofbook)');
            
            ctx.executeQueryAsync(
                function() {
                    const overdueBooks = [];
                    const enumerator = items.getEnumerator();
                    
                    while (enumerator.moveNext()) {
                        const item = enumerator.get_current();
                        const issueDate = new Date(item.get_item("IssueDate"));
                        const returnDate = new Date(item.get_item("ReturnDate"));
                        const daysOverdue = Math.floor((today - returnDate) / (1000 * 60 * 60 * 24));
                        
                        // Check if book is overdue by more than 15 days and still issued
                        if (daysOverdue > 15 && item.get_item("Track_returnofbook") === "Issued") {
                            const bookLookup = item.get_item("BookLookup");
                            const memberLookup = item.get_item("MemberLookup");
                            
                            overdueBooks.push({
                                bookTitle: bookLookup.get_lookupValue(),
                                memberName: memberLookup.get_lookupValue(),
                                issueDate: issueDate.toLocaleDateString(),
                                returnDate: returnDate.toLocaleDateString(),
                                daysOverdue: daysOverdue,
                                itemId: item.get_id()
                            });
                        }
                    }
                    
                    updateNotificationUI(overdueBooks);
                },
                function(sender, args) {
                    console.error("Error loading notifications:", args.get_message());
                    document.getElementById("notificationList").innerHTML = 
                        `<div class="alert alert-danger">Error loading overdue books: ${args.get_message()}</div>`;
                }
            );
        }

        // Update the UI with notifications
        function updateNotificationUI(overdueBooks) {
            const notificationList = document.getElementById("notificationList");
            const countSpan = document.getElementById("notificationCount");
            
            notificationList.innerHTML = "";
            countSpan.textContent = overdueBooks.length;

            if (overdueBooks.length === 0) {
                notificationList.innerHTML = `
                    <div class="no-notifications">
                        <i class="fas fa-check-circle fa-3x text-success mb-3"></i>
                        <h4>No overdue books found</h4>
                        <p class="text-muted">All books have been returned on time</p>
                    </div>
                `;
                return;
            }

            overdueBooks.forEach(book => {
                const notificationHtml = `
                    <div class="notification-item">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h5 class="mb-0">${escapeHTML(book.bookTitle)}</h5>
                            <span class="overdue-badge">${book.daysOverdue} days overdue</span>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <p class="mb-1"><strong>Issued to:</strong> ${escapeHTML(book.memberName)}</p>
                                <p class="mb-1 text-muted"><small>Issued: ${book.issueDate}</small></p>
                            </div>
                            <div class="col-md-6">
                                <p class="mb-1"><strong>Due date:</strong> ${book.returnDate}</p>
                                <button class="btn btn-sm btn-outline-primary mt-1" onclick="sendReminder(${book.itemId})">
                                    <i class="fas fa-envelope me-1"></i> Send Reminder
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                notificationList.innerHTML += notificationHtml;
            });
        }

        // Helper function to send reminder (placeholder)
        function sendReminder(itemId) {
            alert(`Reminder would be sent for item ID: ${itemId}`);
            // Implement actual reminder logic here
        }

        // Helper function for safe HTML rendering
        function escapeHTML(str) {
            if (!str) return "";
            return str.toString()
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Load notifications when SharePoint scripts are ready
        ExecuteOrDelayUntilScriptLoaded(function() {
            SP.SOD.executeFunc('sp.js', 'SP.ClientContext', loadAllNotifications);
        });
    </script>
</body>
</html>








function renderAvailableBooks() {
    const ctx = new SP.ClientContext.get_current();
    const container = document.getElementById("availableBooks");
    container.innerHTML = "Loading books...";

    // Load all books
    const bookList = ctx.get_web().get_lists().getByTitle("Book Management");
    const bookItems = bookList.getItems(new SP.CamlQuery());
    ctx.load(bookItems);

    // Load issued books count
    const issuanceList = ctx.get_web().get_lists().getByTitle("Issuance and Returns");
    const issuedQuery = new SP.CamlQuery();
    issuedQuery.set_viewXml(`
        <View>
            <Query>
                <Where>
                    <Eq>
                        <FieldRef Name='Track_returnofbook' />
                        <Value Type='Choice'>Issued</Value>
                    </Eq>
                </Where>
            </Query>
        </View>
    `);
    const issuedItems = issuanceList.getItems(issuedQuery);
    ctx.load(issuedItems);

    ctx.executeQueryAsync(
        function() {
            try {
                // Process book items
                const bookEnumerator = bookItems.getEnumerator();
                let totalBooks = 0;
                let booksHTML = "";
                
                while (bookEnumerator.moveNext()) {
                    const item = bookEnumerator.get_current();
                    booksHTML += generateBookCardHTML(item);
                    totalBooks++;
                }

                // Calculate available books
                const issuedCount = issuedItems.get_count();
                const availableCount = totalBooks - issuedCount;

                // Update UI
                container.innerHTML = booksHTML;
                document.getElementById("availableCount").innerText = availableCount;
                document.getElementById("borrowedCount").innerText = issuedCount;
            } catch (e) {
                console.error("Error processing books:", e);
                container.innerHTML = "<div class='alert alert-danger'>Error loading books</div>";
            }
        },
        function(sender, args) {
            console.error("Query failed:", args.get_message());
            container.innerHTML = `<div class='alert alert-danger'>${args.get_message()}</div>`;
        }
    );
}





function renderAvailableBooks(listItems) {
    const container = document.getElementById("availableBooks");
    container.innerHTML = "";

    // First get count of issued books from Issuance and Returns list
    const ctx = new SP.ClientContext.get_current();
    const issuanceList = ctx.get_web().get_lists().getByTitle("Issuance and Returns");
    const issuedQuery = new SP.CamlQuery();
    
    issuedQuery.set_viewXml(`
        <View>
            <Query>
                <Where>
                    <Eq>
                        <FieldRef Name='Track_returnofbook' />
                        <Value Type='Choice'>Issued</Value>
                    </Eq>
                </Where>
            </Query>
        </View>
    `);
    
    const issuedItems = issuanceList.getItems(issuedQuery);
    ctx.load(issuedItems);
    
    // Then process the books
    const enumerator = listItems.getEnumerator();
    let totalBooks = 0;
    let booksHTML = "";
    
    while (enumerator.moveNext()) {
        const item = enumerator.get_current();
        booksHTML += generateBookCardHTML(item);
        totalBooks++;
    }
    
    ctx.executeQueryAsync(
        function() {
            const issuedCount = issuedItems.get_count();
            const availableCount = totalBooks - issuedCount;
            
            container.innerHTML = booksHTML;
            document.getElementById("availableCount").innerText = availableCount;
            document.getElementById("borrowedCount").innerText = issuedCount;
        },
        function(sender, args) {
            console.error("Error loading issued books count:", args.get_message());
            // Fallback - just show all books as available if we can't get issued count
            container.innerHTML = booksHTML;
            document.getElementById("availableCount").innerText = totalBooks;
            document.getElementById("borrowedCount").innerText = "N/A";
        }
    );
}








<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Library Management System</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <style>
    body, html {
      background-color: #f0f4f8;
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      overflow: hidden;
    }
    .sidebar {
      height: 100vh;
      background-color: #343a40;
      color: white;
      padding-top: 20px;
      position: absolute;
      width: 250px;
      overflow-y: auto;
    }
    .sidebar a {
      color: white;
      display: block;
      padding: 10px 20px;
      text-decoration: none;
    }
    .sidebar a:hover {
      background-color: #495057;
    }
    .submenu {
      padding-left: 30px;
      background-color: #3e454d;
    }
    .content {
      margin-left: 260px;
      padding: 20px;
    }
    .footer-stats {
      background-color: white;
      padding: 20px;
      border-top: 2px solid #007bff;
      text-align: center;
      position: fixed;
      bottom: 0;
      width: calc(100% - 260px);
      margin-left: 260px;
    }
    .book-card {
      cursor: pointer;
      transition: transform 0.2s, box-shadow 0.2s;
      height: 100%;
    }
    .book-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    .scrollable-div {
      max-height: calc(100vh - 300px);
      overflow-y: auto;
      padding-right: 10px;
    }
    #s4-workspace, #s4-bodyContainer, #contentBox {
      margin: 0 !important;
      padding: 0 !important;
      width: 100% !important;
      height: 100% !important;
      position: relative !important;
      top: 0 !important;
    }
    #customContentWrapper {
      width: 100%;
      height: 100vh;
      overflow-y: auto;
      padding: 0;
      margin: 0;
    }
    /* Hide SharePoint UI elements */
    #sideNavBox, #suiteBarTop, #titleAreaBox, #DeltaPlaceHolderPageTitleInTitleArea,
    #DeltaPlaceHolderPageDescription, #SiteHeader, #s4-titlerow, #TurnOnAccessibility,
    #globalNavBox, .ms-cui-topBar2, .ms-core-pageTitle, .ms-core-commandBar,
    .ms-core-navigation, .ms-quicklaunch {
      display: none !important;
      height: 0 !important;
      overflow: hidden !important;
    }
  </style>
</head>
<body>

<!-- Sidebar Menu -->
<div class="sidebar">
  <h4 class="text-center mb-4">Library Menu</h4>
  <a data-toggle="collapse" href="#bookMenu" role="button">
    <i class="fas fa-book"></i> Book Management
  </a>
  <div class="collapse submenu" id="bookMenu">
    <a href="#">Add New Book</a>
    <a href="#">Update Book</a>
    <a href="#">Remove Book</a>
    <a href="#">Search Book</a>
  </div>
  <a data-toggle="collapse" href="#memberMenu" role="button">
    <i class="fas fa-users"></i> Member Management
  </a>
  <div class="collapse submenu" id="memberMenu">
    <a href="#">Add Member</a>
    <a href="#">Update Member</a>
    <a href="#">Delete Member</a>
    <a href="#">Search Member</a>
  </div>
  <a data-toggle="collapse" href="#issueMenu" role="button">
    <i class="fas fa-book-reader"></i> Book Issuance
  </a>
  <div class="collapse submenu" id="issueMenu">
    <a href="#">Issue Book</a>
    <a href="#">Return Book</a>
    <a href="#">Check Overdue</a>
  </div>
</div>

<!-- Main Content -->
<div class="content">
  <div class="dashboard-header d-flex justify-content-between align-items-center mb-4">
    <h2 class="text-dark">Library Management Dashboard</h2>
    <div class="dropdown ms-auto">
      <button class="btn btn-link text-dark position-relative"
              type="button"
              id="notificationDropdown"
              data-bs-toggle="dropdown"
              aria-expanded="false">
        <i class="fas fa-bell fa-lg"></i>
        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="notificationCount"></span>
      </button>
      <ul class="dropdown-menu dropdown-menu-end notification-dropdown" aria-labelledby="notificationDropdown">
        <li><h6 class="dropdown-header">Overdue Publications</h6></li>
        <li><hr class="dropdown-divider"></li>
        <div id="notificationList"></div>
        <div class="more-link">
          <a href="#" class="text-primary">All notifications</a>
        </div>
      </ul>
    </div>
  </div>

  <!-- Search Box -->
  <div class="input-group mb-3">
    <input type="text" id="booksearch" placeholder="Search by Book Name, ISBN or Author Name" class="form-control" />
    <div class="input-group-append">
      <button type="button" class="btn btn-primary" onclick="searchBooks()">
        <i class="fas fa-search"></i>
      </button>
    </div>
  </div>

  <!-- Search Results -->
  <div id="searchResults" class="row row-cols-1 row-cols-md-3 g-4 mt-4"></div>

  <!-- Available Books Section -->
  <div class="scrollable-div">
    <div class="mt-5">
      <h4 class="mb-3">Available Books</h4>
      <div id="availableBooks" class="row row-cols-1 row-cols-md-3 g-4"></div>
    </div>
  </div>
</div>

<!-- Footer Stats -->
<div class="footer-stats">
  <div class="row">
    <div class="col-md-6">
      <h5>Total Borrowed Books:</h5>
      <p id="borrowedCount">--</p>
    </div>
    <div class="col-md-6">
      <h5>Total Available Books:</h5>
      <p id="availableCount">--</p>
    </div>
  </div>
</div>

<!-- Book Details Modal -->
<div class="modal fade" id="bookDetailsModal" tabindex="-1" aria-labelledby="bookDetailsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="bookDetailsModalLabel">Book Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="bookDetailsContent">
        <!-- Content will be loaded dynamically -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" onclick="issueBook()">Issue Book</button>
        <button type="button" class="btn btn-info" onclick="showMoreOptions()">More Options</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- More Options Modal -->
<div class="modal fade" id="moreOptionsModal" tabindex="-1" aria-labelledby="moreOptionsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="moreOptionsModalLabel">Book Management</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="d-grid gap-2">
          <button type="button" class="btn btn-warning" onclick="openEditModal()">Update Book</button>
          <button type="button" class="btn btn-danger" onclick="deleteBook()">Delete Book</button>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Book Modal -->
<div class="modal fade" id="editBookModal" tabindex="-1" aria-labelledby="editBookModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editBookModalLabel">Edit Book</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="editBookName" class="form-label">Book Name</label>
          <input type="text" class="form-control" id="editBookName">
        </div>
        <div class="mb-3">
          <label for="editISBN" class="form-label">ISBN</label>
          <input type="number" class="form-control" id="editISBN">
        </div>
        <div class="mb-3">
          <label for="editAuthor" class="form-label">Author</label>
          <input type="text" class="form-control" id="editAuthor">
        </div>
        <div class="mb-3">
          <label for="editPubDate" class="form-label">Publication Date</label>
          <input type="date" class="form-control" id="editPubDate">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="saveBookChanges()">Save Changes</button>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">
  // Global variables
  let currentBookId = null;
  let currentBookDetails = null;
  let notificationItems = [];

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", function() {
    loadAvailableBooks();
    loadNotifications();
  });

  // Load all available books
  function loadAvailableBooks() {
    const clientContext = new SP.ClientContext.get_current();
    const list = clientContext.get_web().get_lists().getByTitle("Book Management");
    const camlQuery = new SP.CamlQuery();
    const listItems = list.getItems(camlQuery);

    clientContext.load(listItems);
    clientContext.executeQueryAsync(
      function() {
        renderAvailableBooks(listItems);
        document.getElementById("availableCount").innerText = listItems.get_count();
      },
      function(sender, args) {
        console.error("Failed to load available books:", args.get_message());
      }
    );
  }

  // Render available books as clickable cards
  function renderAvailableBooks(listItems) {
    const container = document.getElementById("availableBooks");
    container.innerHTML = "";

    const enumerator = listItems.getEnumerator();
    while (enumerator.moveNext()) {
      const item = enumerator.get_current();
      container.innerHTML += generateBookCardHTML(item);
    }
  }

  // Generate HTML for book card
  function generateBookCardHTML(item) {
    try {
      const id = item.get_id();
      const bookName = item.get_item("BookName") || "";
      const isbn = item.get_item("ISBN") || "";
      const authorField = item.get_item("AuthorName");
      const author = authorField ? authorField.get_lookupValue() : "N/A";
      const pubDate = item.get_item("PublicationDate");
      const formattedDate = pubDate ? new Date(pubDate).toLocaleDateString() : "N/A";

      return `
        <div class="col mb-4">
          <div class="card book-card" onclick="showBookDetails(${id})">
            <div class="card-body text-center">
              <i class="fas fa-book fa-2x text-info mb-2"></i>
              <h5 class="card-title text-primary">${escapeHTML(bookName)}</h5>
              <p class="card-text"><strong>Author:</strong> ${escapeHTML(author)}</p>
              <p class="card-text"><strong>ISBN:</strong> ${escapeHTML(isbn.toString())}</p>
            </div>
          </div>
        </div>
      `;
    } catch (e) {
      console.error("Error generating book card:", e);
      return "";
    }
  }

  // Show book details in modal
  function showBookDetails(itemId) {
    currentBookId = itemId;
    const ctx = new SP.ClientContext.get_current();
    const item = ctx.get_web().get_lists().getByTitle("Book Management").getItemById(itemId);
    
    ctx.load(item);
    ctx.executeQueryAsync(
      function() {
        const bookName = item.get_item("BookName") || "";
        const isbn = item.get_item("ISBN") || "";
        const authorField = item.get_item("AuthorName");
        const author = authorField ? authorField.get_lookupValue() : "N/A";
        const pubDate = item.get_item("PublicationDate");
        const formattedDate = pubDate ? new Date(pubDate).toLocaleDateString() : "N/A";

        currentBookDetails = {
          bookName: bookName,
          isbn: isbn,
          author: author,
          pubDate: formattedDate
        };

        const content = `
          <p><strong>Book Name:</strong> ${escapeHTML(bookName)}</p>
          <p><strong>ISBN:</strong> ${escapeHTML(isbn.toString())}</p>
          <p><strong>Author:</strong> ${escapeHTML(author)}</p>
          <p><strong>Publication Date:</strong> ${formattedDate}</p>
        `;

        document.getElementById("bookDetailsContent").innerHTML = content;
        new bootstrap.Modal(document.getElementById('bookDetailsModal')).show();
      },
      function(sender, args) {
        console.error("Error loading book details:", args.get_message());
      }
    );
  }

  // Show more options modal
  function showMoreOptions() {
    $('#bookDetailsModal').modal('hide');
    new bootstrap.Modal(document.getElementById('moreOptionsModal')).show();
  }

  // Open edit modal
  function openEditModal() {
    $('#moreOptionsModal').modal('hide');
    
    // Pre-fill the edit form
    document.getElementById("editBookName").value = currentBookDetails.bookName;
    document.getElementById("editISBN").value = currentBookDetails.isbn;
    document.getElementById("editAuthor").value = currentBookDetails.author;
    
    // Format date for input field
    if (currentBookDetails.pubDate !== "N/A") {
      const dateObj = new Date(currentBookDetails.pubDate);
      document.getElementById("editPubDate").value = dateObj.toISOString().split('T')[0];
    }
    
    new bootstrap.Modal(document.getElementById('editBookModal')).show();
  }

  // Save book changes
  function saveBookChanges() {
    const ctx = new SP.ClientContext.get_current();
    const list = ctx.get_web().get_lists().getByTitle("Book Management");
    const item = list.getItemById(currentBookId);
    
    // Get user ID for AuthorName
    const userLogin = document.getElementById("editAuthor").value.trim();
    const user = ctx.get_web().ensureUser(userLogin);
    ctx.load(user);
    
    ctx.executeQueryAsync(
      function() {
        // Update item after getting user ID
        item.set_item("BookName", document.getElementById("editBookName").value);
        item.set_item("ISBN", parseInt(document.getElementById("editISBN").value));
        item.set_item("AuthorName", user.get_id());
        item.set_item("PublicationDate", new Date(document.getElementById("editPubDate").value));
        
        item.update();
        
        ctx.executeQueryAsync(
          function() {
            alert("Book updated successfully!");
            $('#editBookModal').modal('hide');
            loadAvailableBooks();
          },
          function(sender, args) {
            alert("Error saving changes: " + args.get_message());
          }
        );
      },
      function(sender, args) {
        alert("Error finding user: " + args.get_message());
      }
    );
  }

  // Delete book
  function deleteBook() {
    if (confirm("Are you sure you want to delete this book?")) {
      const ctx = new SP.ClientContext.get_current();
      const list = ctx.get_web().get_lists().getByTitle("Book Management");
      const item = list.getItemById(currentBookId);
      
      item.deleteObject();
      
      ctx.executeQueryAsync(
        function() {
          alert("Book deleted successfully!");
          $('#moreOptionsModal').modal('hide');
          loadAvailableBooks();
        },
        function(sender, args) {
          alert("Error deleting book: " + args.get_message());
        }
      );
    }
  }

  // Issue book function (placeholder)
  function issueBook() {
    alert("Issuing book with ID: " + currentBookId);
    // Implement your issue book functionality here
    $('#bookDetailsModal').modal('hide');
  }

  // Search books function
  function searchBooks() {
    const searchTerm = document.getElementById("booksearch").value.trim();
    if (!searchTerm) {
      alert("Please enter a search term.");
      return;
    }

    const clientContext = new SP.ClientContext.get_current();
    const list = clientContext.get_web().get_lists().getByTitle("Book Management");
    const camlQuery = new SP.CamlQuery();
    
    camlQuery.set_viewXml(`
      <View>
        <Query>
          <Where>
            <Or>
              <Or>
                <Contains>
                  <FieldRef Name='BookName' />
                  <Value Type='Text'>${SP.Utilities.HttpUtility.htmlEncode(searchTerm)}</Value>
                </Contains>
                <Contains>
                  <FieldRef Name='AuthorName' Lookup='True' />
                  <Value Type='Text'>${SP.Utilities.HttpUtility.htmlEncode(searchTerm)}</Value>
                </Contains>
              </Or>
              <Eq>
                <FieldRef Name='ISBN' />
                <Value Type='Number'>${SP.Utilities.HttpUtility.htmlEncode(searchTerm)}</Value>
              </Eq>
            </Or>
          </Where>
        </Query>
      </View>
    `);

    const listItems = list.getItems(camlQuery);
    clientContext.load(listItems);
    clientContext.executeQueryAsync(
      function() {
        renderSearchResults(listItems);
      },
      function(sender, args) {
        alert("Search failed: " + args.get_message());
      }
    );
  }

  // Render search results
  function renderSearchResults(listItems) {
    const container = document.getElementById("searchResults");
    container.innerHTML = "";

    const enumerator = listItems.getEnumerator();
    if (!enumerator.moveNext()) {
      container.innerHTML = "<div class='col-12 alert alert-warning'>No books found matching your search.</div>";
      return;
    }

    enumerator.reset();
    while (enumerator.moveNext()) {
      const item = enumerator.get_current();
      container.innerHTML += generateBookCardHTML(item);
    }
  }

  // Load notifications
  function loadNotifications() {
    const ctx = new SP.ClientContext.get_current();
    const list = ctx.get_web().get_lists().getByTitle("Book Management");
    const query = new SP.CamlQuery();
    const today = new Date().toISOString().split('T')[0];

    query.set_viewXml(`
      <View>
        <Query>
          <Where>
            <Lt>
              <FieldRef Name='PublicationDate' />
              <Value Type='DateTime'>${today}</Value>
            </Lt>
          </Where>
        </Query>
      </View>
    `);

    const items = list.getItems(query);
    ctx.load(items);
    ctx.executeQueryAsync(
      function() {
        const listEnumerator = items.getEnumerator();
        notificationItems = [];

        while (listEnumerator.moveNext()) {
          const item = listEnumerator.get_current();
          const authorField = item.get_item("AuthorName");
          const authorId = authorField.get_lookupId();
          const user = ctx.get_web().getUserById(authorId);
          
          ctx.load(user);
          notificationItems.push({
            title: item.get_item("BookName"),
            date: new Date(item.get_item("PublicationDate")).toLocaleDateString(),
            author: user,
            isbn: item.get_item("ISBN")
          });
        }

        ctx.executeQueryAsync(
          function() {
            updateNotificationUI();
          },
          function(sender, args) {
            console.error("Error loading users:", args.get_message());
          }
        );
      },
      function(sender, args) {
        console.error("Error loading items:", args.get_message());
      }
    );
  }

  // Update notification UI
  function updateNotificationUI() {
    const notificationList = document.getElementById("notificationList");
    const countSpan = document.getElementById("notificationCount");

    notificationList.innerHTML = "";
    countSpan.textContent = notificationItems.length;

    const topItems = notificationItems.slice(0, 3);
    topItems.forEach(function(item) {
      const notificationHtml = `
        <li>
          <div class="notification-item px-3 py-2">
            <div class="d-flex justify-content-between">
              <strong class="text-truncate">${escapeHTML(item.title)}</strong>
              <small class="text-muted">${item.date}</small>
            </div>
            <div class="text-muted text-truncate">
              Author: ${escapeHTML(item.author.get_title())}
            </div>
            <small class="text-primary">ISBN: ${escapeHTML(item.isbn.toString())}</small>
          </div>
        </li>
        <li><hr class="dropdown-divider"></li>
      `;
      notificationList.innerHTML += notificationHtml;
    });
  }

  // Helper function for safe HTML rendering
  function escapeHTML(str) {
    if (!str) return "";
    return str.toString()
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  // Ensure SharePoint scripts are loaded
  ExecuteOrDelayUntilScriptLoaded(function() {
    SP.SOD.registerSod('sp.userprofiles.js', SP.SOD.executeFunc('sp.userprofiles.js', 'SP.Utilities.Utility', loadNotifications));
    SP.Utilities.Utility.getLayoutsPageUrl('sp.userprofiles.js');
  });

  SP.SOD.executeFunc('sp.js', 'SP.ClientContext', function() {
    // SharePoint context is ready
  });
</script>

<!-- Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>

<!-- SharePoint JSOM -->
<script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
<script type="text/javascript" src="/_layouts/15/SP.js"></script>
<script type="text/javascript" src="/_layouts/15/SP.UserProfiles.js"></script>

</body>
</html>
















/* Hide the Content Editor Web Part wrapper */
.ms-webpart-chrome-title,
.ms-webpart-chrome-vertical,
.ms-webpart-chrome-horizontal {
    display: none !important;
    height: 0 !important;
    margin: 0 !important;
    padding: 0 !important;
    border: none !important;
}

/* Optional: remove extra space where the web part was */
td.ms-WPBody, .ms-webpart-zone {
    padding: 0 !important;
    margin: 0 !important;
}




/* Reset body and html to allow layout and scroll */
html, body {
    margin: 0 !important;
    padding: 0 !important;
    width: 100%;
    height: 100%;
    overflow: hidden; /* prevent scrollbars here */
}

/* Main scrollable content area */
#customContentWrapper {
    width: 100%;
    height: 100vh;
    overflow-y: auto; /* enables vertical scroll */
    padding: 0;
    margin: 0;
}

/* Hide SharePoint UI elements */
#s4-ribbonrow,
#sideNavBox,
#suiteBarTop,
#titleAreaBox,
#DeltaPlaceHolderPageTitleInTitleArea,
#DeltaPlaceHolderPageDescription,
#SiteHeader,
#s4-titlerow,
#TurnOnAccessibility,
#globalNavBox,
.ms-cui-topBar2,
.ms-core-pageTitle,
.ms-core-commandBar,
.ms-core-navigation,
.ms-quicklaunch {
    display: none !important;
    height: 0 !important;
    overflow: hidden !important;
}

/* Prevent leftover spacing */
#s4-bodyContainer, #s4-workspace {
    padding: 0 !important;
    margin: 0 !important;
    top: 0 !important;
    height: 100vh !important;
}








/* Force full-screen layout */
html, body {
    margin: 0 !important;
    padding: 0 !important;
    width: 100%;
    height: 100%;
    overflow: hidden;
}

/* Override SharePoint content layout */
#s4-workspace, #s4-bodyContainer, #contentBox {
    margin: 0 !important;
    padding: 0 !important;
    width: 100% !important;
    height: 100% !important;
    position: relative !important;
    top: 0 !important;
}

/* Expand your content fully */
.container-fluid {
    width: 100% !important;
    height: 100% !important;
    margin: 0 !important;
    padding: 0 !important;
    overflow: auto;
}

/* Hide SharePoint chrome (no layout reserved) */
#s4-ribbonrow,
#sideNavBox,
#suiteBarTop,
#titleAreaBox,
#DeltaPlaceHolderPageTitleInTitleArea,
#DeltaPlaceHolderPageDescription,
#SiteHeader,
#s4-titlerow,
#TurnOnAccessibility,
#globalNavBox,
.ms-cui-topBar2,
.ms-core-pageTitle,
.ms-core-commandBar,
.ms-core-navigation,
.ms-quicklaunch {
    display: none !important;
    height: 0 !important;
    overflow: hidden !important;
}







<!DOCTYPE html>



<html>
<head>
    <title>Apply Publication Date Validation</title>
    <!-- Load SharePoint JSOM Scripts -->
    <script type="text/javascript" src="/_layouts/15/init.js"></script>
    <script type="text/javascript" src="/_layouts/15/MicrosoftAjax.js"></script>
    <script type="text/javascript" src="/_layouts/15/sp.runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/sp.js"></script>
</head>
<body>
    <h2>Apply Validation to Publication Date</h2>
    <button onclick="addValidationToPublicationDate()">Apply Validation</button>

    <script type="text/javascript">
        function addValidationToPublicationDate() {
            var clientContext = new SP.ClientContext.get_current();
            var web = clientContext.get_web();
            var list = web.get_lists().getByTitle("Book Management");

            var field = list.get_fields().getByInternalNameOrTitle("PublicationDate");

            field.set_validationFormula("[PublicationDate] <= TODAY()");
            field.set_validationMessage("Publication date cannot be a future date. Please select today or an earlier date.");

            field.update();
            clientContext.executeQueryAsync(
                function () {
                    alert("✅ Validation successfully applied to 'PublicationDate' column.");
                },
                function (sender, args) {
                    alert("❌ Error: " + args.get_message());
                }
            );
        }
    </script>
</body>
</html>







<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>All Notifications - Book Management</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        .notification-card {
            border-left: 4px solid #0d6efd;
            background-color: #f8f9fa;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container py-4">
        <h2 class="mb-4">All Overdue Book Notifications</h2>
        <div id="allNotifications"></div>
    </div>

    <!-- jQuery & Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- SharePoint JSOM Scripts -->
    <script type="text/javascript">
        function loadAllNotifications() {
            var ctx = SP.ClientContext.get_current();
            var list = ctx.get_web().get_lists().getByTitle("Book Management");
            var query = new SP.CamlQuery();
            var today = new Date().toISOString().split('T')[0];

            query.set_viewXml(`
                <View>
                    <Query>
                        <Where>
                            <Leq>
                                <FieldRef Name='PublicationDate' />
                                <Value Type='DateTime'>${today}</Value>
                            </Leq>
                        </Where>
                    </Query>
                </View>
            `);

            var items = list.getItems(query);
            ctx.load(items);
            ctx.executeQueryAsync(
                function() {
                    var html = "";
                    var enumerator = items.getEnumerator();
                    var count = 0;

                    function loadAuthorsRecursive() {
                        if (!enumerator.moveNext()) {
                            $('#allNotifications').html(html || "<p>No overdue notifications found.</p>");
                            return;
                        }

                        var item = enumerator.get_current();
                        var bookTitle = item.get_item("BookName");
                        var pubDate = new Date(item.get_item("PublicationDate")).toLocaleDateString();
                        var isbn = item.get_item("ISBN");
                        var author = item.get_item("AuthorName");
                        var authorId = author.get_lookupId();

                        var user = ctx.get_web().getUserById(authorId);
                        ctx.load(user);
                        ctx.executeQueryAsync(
                            function() {
                                count++;
                                html += `
                                    <div class="card mb-3 notification-card p-3 shadow-sm">
                                        <h5>${bookTitle}</h5>
                                        <p class="mb-1"><strong>Author:</strong> ${user.get_title()}</p>
                                        <p class="mb-1"><strong>Publication Date:</strong> ${pubDate}</p>
                                        <p class="mb-0"><strong>ISBN:</strong> ${isbn}</p>
                                    </div>
                                `;
                                loadAuthorsRecursive(); // continue recursively
                            },
                            function(sender, args) {
                                console.error("Failed to load user", args.get_message());
                                loadAuthorsRecursive(); // skip and continue
                            }
                        );
                    }

                    loadAuthorsRecursive();
                },
                function(sender, args) {
                    $('#allNotifications').html("<p>Error loading notifications: " + args.get_message() + "</p>");
                }
            );
        }

        ExecuteOrDelayUntilScriptLoaded(function() {
            SP.SOD.executeFunc('sp.js', 'SP.ClientContext', loadAllNotifications);
        }, 'sp.js');
    </script>
</body>
</html>







<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Book Management Dashboard</title>

  <!-- Bootstrap CSS & Font Awesome -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

  <style>
    .notification-dropdown {
      width: 350px;
      max-height: 500px;
      overflow-y: auto;
    }
    .notification-item:hover {
      background-color: #f8f9fa;
    }
    .navbar-custom {
      background-color: #f8f9fa;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .more-link {
      text-align: center;
      padding: 8px;
    }
  </style>
</head>
<body class="bg-light">
  <!-- Navigation Bar -->
  <nav class="navbar navbar-expand-lg navbar-custom fixed-top">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">Book Management</a>
      <div class="dropdown ms-auto">
        <button class="btn btn-link text-dark position-relative" 
                id="notificationDropdown" 
                data-bs-toggle="dropdown" 
                aria-expanded="false">
          <i class="fas fa-bell fa-lg"></i>
          <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="notificationCount">0</span>
        </button>

        <ul class="dropdown-menu dropdown-menu-end notification-dropdown" aria-labelledby="notificationDropdown">
          <li><h6 class="dropdown-header">Overdue Publications</h6></li>
          <li><hr class="dropdown-divider"></li>
          <div id="notificationList"></div>
          <div class="more-link">
            <a href="all-notifications.html" class="text-primary">View All Notifications</a>
          </div>
        </ul>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <div class="container-fluid" style="margin-top: 80px;">
    <div class="row">
      <div class="col-12">
        <div class="card shadow-sm">
          <div class="card-body">
            <h5 class="card-title">Book Management Dashboard</h5>
            <p class="text-muted">View and manage publication status</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

  <!-- SharePoint JSOM -->
  <script>
    var notificationItems = [];

    function loadNotifications() {
      var ctx = SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      var query = new SP.CamlQuery();
      var today = new Date().toISOString().split('T')[0];

      query.set_viewXml(
        `<View>
            <Query>
              <Where>
                <Leq>
                  <FieldRef Name='PublicationDate' />
                  <Value IncludeTimeValue='FALSE' Type='DateTime'>${today}</Value>
                </Leq>
              </Where>
            </Query>
          </View>`
      );

      var items = list.getItems(query);
      ctx.load(items);

      ctx.executeQueryAsync(
        function() {
          var listEnumerator = items.getEnumerator();
          notificationItems = [];

          var promises = [];

          while (listEnumerator.moveNext()) {
            var item = listEnumerator.get_current();
            var authorField = item.get_item("AuthorName");
            var authorId = authorField.get_lookupId();

            var user = ctx.get_web().getUserById(authorId);
            ctx.load(user);

            notificationItems.push({
              title: item.get_item("BookName"),
              dateRaw: new Date(item.get_item("PublicationDate")),
              date: new Date(item.get_item("PublicationDate")).toLocaleDateString(),
              author: user,
              isbn: item.get_item("ISBN")
            });
          }

          ctx.executeQueryAsync(
            function() {
              // Sort by newest first
              notificationItems.sort((a, b) => b.dateRaw - a.dateRaw);

              updateNotificationUI();
              sendEmailNotifications();
            },
            function(sender, args) {
              console.error("Error loading users:", args.get_message());
            }
          );
        },
        function(sender, args) {
          console.error("Error loading items:", args.get_message());
        }
      );
    }

    function updateNotificationUI() {
      var notificationList = $('#notificationList');
      var countSpan = $('#notificationCount');

      notificationList.empty();
      countSpan.text(notificationItems.length);

      var topItems = notificationItems.slice(0, 3);

      topItems.forEach(function(item) {
        var notificationHtml = `
          <li>
            <div class="notification-item px-3 py-2">
              <div class="d-flex justify-content-between">
                <strong class="text-truncate">${item.title}</strong>
                <small class="text-muted">${item.date}</small>
              </div>
              <div class="text-muted text-truncate">
                Author: ${item.author.get_title()}
              </div>
              <small class="text-primary">ISBN: ${item.isbn}</small>
            </div>
          </li>
          <li><hr class="dropdown-divider"></li>
        `;
        notificationList.append(notificationHtml);
      });
    }

    function sendEmailNotifications() {
      notificationItems.forEach(function(item) {
        var emailProps = {
          To: [item.author.get_email()],
          Subject: "Overdue Publication Notification",
          Body: `Dear ${item.author.get_title()},<br><br>
                 The book "<strong>${item.title}</strong>" (ISBN: ${item.isbn}) has passed its publication date.<br>
                 Publication Date: ${item.date}<br><br>
                 Please update the publication information if necessary.`
        };

        try {
          SP.Utilities.Utility.sendEmail(SP.ClientContext.get_current(), emailProps);
          SP.ClientContext.get_current().executeQueryAsync(
            function() {
              console.log("Email sent to:", item.author.get_email());
            },
            function(sender, args) {
              console.error("Failed to send email:", args.get_message());
            }
          );
        } catch (e) {
          console.error("Email API not supported in this environment.");
        }
      });
    }

    ExecuteOrDelayUntilScriptLoaded(function() {
      SP.SOD.executeFunc('sp.js', 'SP.ClientContext', function() {
        SP.SOD.registerSod('sp.userprofiles.js', SP.Utilities.Utility.getLayoutsPageUrl('sp.userprofiles.js'));
        SP.SOD.executeFunc('sp.userprofiles.js', 'SP.Utilities.Utility', loadNotifications);
      });
    }, 'sp.js');
  </script>
</body>
</html>








function sendEmailWithFallback(to, subject, body) {
    return new Promise(function(resolve, reject) {
        // First try the standard method
        if (typeof SP.Utilities.Utility !== 'undefined' && 
            typeof SP.Utilities.Utility.sendEmail === 'function') {
            
            var emailProperties = new SP.Utilities.EmailProperties();
            emailProperties.set_to(to);
            emailProperties.set_subject(subject);
            emailProperties.set_body(body);
            
            SP.Utilities.Utility.sendEmail(
                SP.ClientContext.get_current(), 
                emailProperties
            );
            
            SP.ClientContext.get_current().executeQueryAsync(
                function() { resolve(true); },
                function(sender, args) { reject(args.get_message()); }
            );
        } 
        // Fallback to REST API if JSOM fails
        else {
            sendEmailViaREST(to, subject, body)
                .then(resolve)
                .catch(reject);
        }
    });
}

// REST API fallback
function sendEmailViaREST(to, subject, body) {
    var endpoint = _spPageContextInfo.webAbsoluteUrl + 
                  "/_api/SP.Utilities.Utility.SendEmail";
    
    return $.ajax({
        url: endpoint,
        type: "POST",
        data: JSON.stringify({
            'properties': {
                '__metadata': { 'type': 'SP.Utilities.EmailProperties' },
                'To': { 'results': [to] },
                'Subject': subject,
                'Body': body
            }
        }),
        headers: {
            "Accept": "application/json;odata=verbose",
            "Content-Type": "application/json;odata=verbose",
            "X-RequestDigest": $("#__REQUESTDIGEST").val()
        }
    });
}








function sendEmailNotifications() {
    // Ensure SP utilities are loaded first
    SP.SOD.executeFunc('sp.js', 'SP.ClientContext', function() {
        SP.SOD.executeFunc('sp.js', 'SP.Utilities.Utility', function() {
            notificationItems.forEach(function(item) {
                try {
                    var emailProperties = new SP.Utilities.EmailProperties();
                    emailProperties.set_to(item.author.get_email());
                    emailProperties.set_subject("Overdue Publication Notification");
                    emailProperties.set_body(
                        `Dear ${item.author.get_title()},<br><br>
                        The book "${item.title}" (ISBN: ${item.isbn}) has passed its publication date.<br>
                        Publication Date: ${item.date}<br><br>
                        Please update the publication information if necessary.`
                    );

                    SP.Utilities.Utility.sendEmail(
                        SP.ClientContext.get_current(), 
                        emailProperties
                    );
                    
                    SP.ClientContext.get_current().executeQueryAsync(
                        function() {
                            console.log("Email sent to:", item.author.get_email());
                        },
                        function(sender, args) {
                            console.error("Failed to send email:", args.get_message());
                        }
                    );
                } catch (e) {
                    console.error("Email error:", e);
                }
            });
        });
    });
}




<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Book Management – Update & Delete</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

  <!-- SharePoint JSOM + People Picker -->
  <script src="/_layouts/15/sp.runtime.js" type="text/javascript"></script>
  <script src="/_layouts/15/sp.js" type="text/javascript"></script>
  <script src="/_layouts/15/clienttemplates.js" type="text/javascript"></script>
  <script src="/_layouts/15/clientforms.js" type="text/javascript"></script>
  <script src="/_layouts/15/clientpeoplepicker.js" type="text/javascript"></script>
  <script src="/_layouts/15/autofill.js" type="text/javascript"></script>
</head>
<body class="bg-light p-4">
  <div class="container">
    <h2 class="mb-4 text-center text-primary">Book Management</h2>

    <!-- table of books -->
    <div class="table-responsive mb-5">
      <table class="table table-bordered table-striped text-center" id="bookTable">
        <thead class="table-dark">
          <tr>
            <th>Actions</th>
            <th>Book Name</th>
            <th>Publication Date</th>
            <th>Author</th>
            <th>ISBN</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>

    <!-- update card -->
    <div class="card shadow">
      <div class="card-header bg-primary text-white">
        <h4 class="mb-0">Update Book Details</h4>
      </div>
      <div class="card-body">
        <div class="row g-3">
          <div class="col-md-6">
            <label class="form-label">Book Name</label>
            <input id="bookName" class="form-control" />
          </div>
          <div class="col-md-6">
            <label class="form-label">Publication Date</label>
            <input id="pubDate" type="date" class="form-control" />
          </div>
          <div class="col-md-6">
            <label class="form-label">Author (People Picker)</label>
            <div id="peoplePickerAuthor"></div>
          </div>
          <div class="col-md-6">
            <label class="form-label">ISBN</label>
            <input id="isbn" class="form-control" />
          </div>
        </div>
        <input type="hidden" id="itemId" />
        <div class="mt-4 text-end">
          <button class="btn btn-success" onclick="updateItem()">Update Book</button>
        </div>
      </div>
    </div>
  </div>

  <script type="text/javascript">
    // Initialize People Picker & then load items
    ExecuteOrDelayUntilScriptLoaded(function() {
      initPeoplePicker("peoplePickerAuthor");
      loadItems();
    }, "sp.js");

    function initPeoplePicker(domId) {
      var schema = {
        PrincipalAccountType: 'User,DL,SecGroup,SPGroup',
        SearchPrincipalSource: 15,
        ResolvePrincipalSource: 15,
        AllowMultipleValues: false,
        MaximumEntitySuggestions: 50,
        Width: '100%'
      };
      SPClientPeoplePicker_InitStandaloneControlWrapper(domId, null, schema);
    }

    function getSelectedUserKey() {
      var pp = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
      var users = pp.GetAllUserInfo();
      return (users.length>0)? users[0].Key : null;
    }

    function loadItems() {
      var ctx = SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      var items = list.getItems(new SP.CamlQuery());
      // include only the exact internal names
      ctx.load(items, 'Include(Id, BookName, Publication_x0020_date, AuthorName, ISBN)');
      ctx.executeQueryAsync(function() {
        var tbody = document.querySelector("#bookTable tbody");
        tbody.innerHTML = '';
        var enumItems = items.getEnumerator();
        while(enumItems.moveNext()) {
          var it = enumItems.get_current();
          var authorField = it.get_item("AuthorName");
          var authorText = authorField? authorField.get_lookupValue() : '';
          var dateVal = it.get_item("Publication_x0020_date");
          var dateStr = dateVal? new Date(dateVal).toISOString().split('T')[0] : '';
          tbody.innerHTML += `
            <tr>
              <td>
                <button class="btn btn-sm btn-outline-primary" onclick="editItem(${it.get_id()})">Select</button>
                <button class="btn btn-sm btn-outline-danger ms-2" onclick="deleteItem(${it.get_id()})">Delete</button>
              </td>
              <td>${it.get_item("BookName")||''}</td>
              <td>${dateStr}</td>
              <td>${authorText}</td>
              <td>${it.get_item("ISBN")||''}</td>
            </tr>`;
        }
      }, function(s,a){
        alert("Load failed: " + a.get_message());
      });
    }

    function editItem(id) {
      var ctx = SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      var it = list.getItemById(id);
      ctx.load(it, 'BookName, Publication_x0020_date, AuthorName, ISBN');
      ctx.executeQueryAsync(function(){
        document.getElementById("itemId").value = id;
        document.getElementById("bookName").value = it.get_item("BookName")||'';
        var d = it.get_item("Publication_x0020_date");
        document.getElementById("pubDate").value = d? new Date(d).toISOString().split('T')[0] : '';
        document.getElementById("isbn").value = it.get_item("ISBN")||'';
        // reset people picker
        document.getElementById("peoplePickerAuthor").innerHTML = '';
        initPeoplePicker("peoplePickerAuthor");
        setTimeout(function(){
          var auth = it.get_item("AuthorName");
          if(auth) {
            SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan.AddUserKeys(auth.get_lookupValue());
          }
        }, 500);
      }, function(s,a){
        alert("Edit load failed: "+a.get_message());
      });
    }

    function updateItem() {
      var id = document.getElementById("itemId").value;
      var name = document.getElementById("bookName").value.trim();
      var isbn = document.getElementById("isbn").value.trim();
      var date = document.getElementById("pubDate").value;
      var authKey = getSelectedUserKey();
      if(!id || !name || !isbn || !date || !authKey) {
        return alert("All fields including Author are required");
      }

      var ctx = SP.ClientContext.get_current();
      var web = ctx.get_web();
      var list = web.get_lists().getByTitle("Book Management");
      var it = list.getItemById(id);

      var user = web.ensureUser(authKey);
      ctx.load(user);
      ctx.executeQueryAsync(function(){
        var uv = SP.FieldUserValue.fromUser(user.get_loginName());
        it.set_item("BookName", name);
        it.set_item("Publication_x0020_date", new Date(date));
        it.set_item("ISBN", isbn);
        it.set_item("AuthorName", uv);
        it.update();
        ctx.executeQueryAsync(function(){
          alert("Book updated!");
          loadItems();
          // clear form
          document.getElementById("itemId").value='';
          document.getElementById("bookName").value='';
          document.getElementById("isbn").value='';
          document.getElementById("pubDate").value='';
          document.getElementById("peoplePickerAuthor").innerHTML='';
          initPeoplePicker("peoplePickerAuthor");
        }, function(s,a){
          alert("Update failed: "+a.get_message());
        });
      }, function(s,a){
        alert("Author lookup failed: "+a.get_message());
      });
    }

    function deleteItem(id) {
      if(!confirm("Delete this book?")) return;
      var ctx = SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      list.getItemById(id).deleteObject();
      ctx.executeQueryAsync(function(){
        alert("Deleted.");
        loadItems();
      }, function(s,a){
        alert("Delete failed: "+a.get_message());
      });
    }
  </script>
</body>
</html>





<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Add Book Details</title>
  <!-- Bootstrap 5 CDN -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #495057;
    }
    .card {
      border-radius: 15px;
    }
    .form-label {
      color: #fff;
    }
  </style>
</head>
<body>

  <div class="container py-5">
    <div class="row justify-content-center">
      <div class="col-md-6">
        <div class="card shadow-lg p-4">
          <h4 class="text-center mb-4">Add Book Details</h4>
          <form>
            <div class="mb-3">
              <label for="bookName" class="form-label">Book Name</label>
              <input type="text" class="form-control" id="bookName" placeholder="Enter book name">
            </div>
            <div class="mb-3">
              <label for="authorName" class="form-label">Author Name</label>
              <input type="text" class="form-control" id="authorName" placeholder="Enter author name">
            </div>
            <div class="mb-3">
              <label for="isbn" class="form-label">ISBN</label>
              <input type="text" class="form-control" id="isbn" placeholder="Enter ISBN">
            </div>
            <div class="mb-3">
              <label for="publicationDate" class="form-label">Publication Date</label>
              <input type="date" class="form-control" id="publicationDate">
            </div>
            <button type="submit" class="btn btn-primary w-100">Add Book</button>
          </form>
        </div>
      </div>
    </div>
  </div>

</body>
</html>
