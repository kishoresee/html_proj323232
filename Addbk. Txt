<div class="backdrop"></div>
<dialog open>
  <h2>Add Task</h2>
  <form>
    <p>
      <label for="title">Title</label>
      <input type="text" id="title" name="title" />
    </p>

    <p>
      <label for="summary">Summary</label>
      <textarea id="summary" rows="5" name="summary"></textarea>
    </p>

    <p>
      <label for="due-date">Due Date</label>
      <input type="date" id="due-date" name="due-date" />
    </p>

    <p class="actions">
      <button type="button">Cancel</button>
      <button type="submit">Create</button>
    </p>
  </form>
</dialog>






https://github.com/mschwarzmueller/angular-complete-guide-course-resources/blob/main/attachments/02-essentials/styles.css




It looks like you're encountering the error **"Rf is not recognized"** when trying to run cleanup commands. This typically happens on Windows because the `rm -rf` command is a Unix/Linux command that doesn't work directly in Windows Command Prompt. Here's how to fix this:

---

### **Solution for Windows Users**

#### **1. Use Windows-Specific Cleanup Commands**
Replace the Unix commands with their Windows equivalents:

```cmd
:: Remove node_modules and lock files
rd /s /q node_modules
del package-lock.json

:: Clear npm cache
npm cache clean --force
```

#### **2. Alternative Using PowerShell**
If you're using PowerShell (recommended for Angular development on Windows), you can use:

```powershell
# Remove node_modules and lock files
Remove-Item -Recurse -Force node_modules
Remove-Item -Force package-lock.json

# Clear npm cache
npm cache clean --force
```

#### **3. Reinstall Dependencies**
After cleaning up:

```cmd
npm install
```

---

### **If You Prefer Unix Commands on Windows**
1. **Use Git Bash** (comes with Git for Windows)  
   - It supports `rm -rf` and other Unix commands.

2. **Use Windows Subsystem for Linux (WSL)**  
   - Install WSL from Microsoft Store  
   - Then use real Linux commands.

---

### **Complete Step-by-Step Fix**
1. **Open Command Prompt or PowerShell as Administrator**
2. **Run the Windows cleanup commands** (from above)
3. **Reinstall Angular CLI globally** (if needed):
   ```cmd
   npm install -g @angular/cli@latest
   ```
4. **Reinstall project dependencies**:
   ```cmd
   npm install
   ```

---

### **Still Having Issues?**
If you get other errors after these steps:
1. Check your Node.js version (`node -v`) - should be v18+ for Angular 18
2. Try deleting the `.angular` cache folder manually
3. Post the exact error message you're seeing now

Let me know which step you get stuck on and I'll help further!







# Solution for "No Matching Version Found for @babel/generator" Error

Based on your screenshot and error message, you're encountering version installation issues with Babel packages. Here's how to fix this:

## The Problem
- You're trying to install `@babel/generator07.24.0` (incorrect syntax)
- The correct package name is `@babel/generator@7.24.0`
- There appears to be a version mismatch in your Angular environment

## Correct Solution

### 1. Fix the Installation Command
Use the correct npm package syntax:
```bash
npm install @babel/core@7.24.0 @babel/generator@7.24.0 @babel/traverse@7.24.0 --save-dev
```

### 2. Clean Your Installation First
```bash
rm -rf node_modules package-lock.json
npm cache clean --force
```

### 3. Verify Available Versions
Check what versions actually exist:
```bash
npm view @babel/generator versions
```

### 4. Alternative Version Installation
If 7.24.0 isn't available, try:
```bash
npm install @babel/core@latest @babel/generator@latest @babel/traverse@latest --save-dev
```

### 5. Reinstall Angular Dependencies
```bash
npm install
```

## Additional Checks

1. **Verify your Angular CLI version**:
   ```bash
   ng version
   ```

2. **Check for version conflicts**:
   ```bash
   npm ls @babel/core @babel/generator
   ```

3. **If using Yarn**:
   ```bash
   yarn add @babel/core @babel/generator @babel/traverse
   ```

## Why This Happened
- The `07.24.0` syntax is invalid (should be `@7.24.0`)
- There might be network/cache issues preventing package resolution
- Your project might have conflicting version requirements

Let me know if you still encounter issues after trying these steps!









# Solving "Babel Generator Not Found" Error in Angular

This error typically occurs when there's a mismatch between Babel-related packages in your Angular project. Here's how to fix it permanently:

## Root Cause
- Incomplete or corrupted Babel installation
- Version conflicts between `@babel/core`, `@babel/generator`, and other Babel packages
- Angular CLI's internal Babel configuration mismatch

## Complete Solution

### 1. First, Clean Your Project
```bash
rm -rf node_modules package-lock.json .angular/cache
npm cache clean --force
```

### 2. Install Required Babel Packages
```bash
npm install @babel/core@7.24.0 @babel/generator@7.24.0 @babel/traverse@7.24.0 --save-dev
```

### 3. Update Angular CLI and Compiler
```bash
npm install @angular/cli@18.2.0 @angular/compiler-cli@18.2.0 --save-dev
```

### 4. Reinstall All Dependencies
```bash
npm install --legacy-peer-deps
```

### 5. Verify Babel Installation
```bash
npm ls @babel/core @babel/generator @babel/traverse
```

## Additional Troubleshooting

### If the Error Persists:
1. **Check for Duplicate Babel Versions**:
   ```bash
   npm ls @babel/core
   ```
   - Remove duplicate versions with:
     ```bash
     npm uninstall @babel/core
     npm install @babel/core@7.24.0 --save-dev
     ```

2. **Update Webpack Configuration** (if using custom webpack):
   ```javascript
   // webpack.config.js
   module.exports = {
     resolve: {
       alias: {
         '@babel/generator$': require.resolve('@babel/generator')
       }
     }
   };
   ```

3. **Check Angular Builder Configuration**:
   In `angular.json`, ensure:
   ```json
   "builder": "@angular-devkit/build-angular:browser"
   ```

## Final Verification
```bash
ng build --prod
```
- The build should complete without Babel errors

## Prevention for Future
- Always use consistent Babel package versions
- Avoid manually adding Babel plugins unless absolutely necessary
- Let Angular CLI manage most of the compilation process

Let me know if you still see the error and I'll help debug further!






# Remove global Angular CLI
npm uninstall -g @angular/cli

# Clear npm cache
npm cache clean --force

# Reinstall Angular CLI globally
npm install -g @angular/cli@18.2.19







<button onclick="openNewItemDialog()">Add New Book</button>

<script type="text/javascript">
  function openNewItemDialog() {
    var options = {
      title: "Add New Book",
      url: "/sites/YourSite/Lists/BookManagement/NewForm.aspx", // Replace with your actual URL
      width: 800,
      height: 600,
      dialogReturnValueCallback: function (result, returnValue) {
        if (result === SP.UI.DialogResult.OK) {
          alert("Book added successfully!");
          location.reload();
        }
      }
    };

    SP.UI.ModalDialog.showModalDialog(options);

    // Use delay and retry mechanism
    setTimeout(function modifyIframeContents() {
      var iframe = document.querySelector("iframe[title='Add New Book']");
      if (!iframe || !iframe.contentWindow || !iframe.contentDocument) {
        setTimeout(modifyIframeContents, 500);
        return;
      }

      var iframeDoc = iframe.contentDocument;

      if (iframeDoc.readyState !== "complete") {
        setTimeout(modifyIframeContents, 500);
        return;
      }

      try {
        // ✅ Hide SITE ADMINISTRATION tab
        const tabs = iframeDoc.querySelectorAll(".ms-cui-tabContainer .ms-cui-tab");
        tabs.forEach(tab => {
          if (tab.innerText.trim().includes("SITE ADMINISTRATION")) {
            tab.style.display = "none";
          }
        });

        // ✅ Hide "Spelling" button
        const buttons = iframeDoc.querySelectorAll(".ms-cui-tt-a[title='Spelling']");
        buttons.forEach(btn => btn.style.display = "none");

        // ✅ Optionally add a custom button to ribbon
        const ribbonBar = iframeDoc.querySelector(".ms-cui-topBar2");
        if (ribbonBar) {
          const customBtn = iframeDoc.createElement("button");
          customBtn.innerText = "📚 Custom Ribbon Action";
          customBtn.style.marginLeft = "20px";
          customBtn.style.padding = "5px 10px";
          customBtn.onclick = function () {
            alert("Custom ribbon action clicked!");
          };
          ribbonBar.appendChild(customBtn);
        }
      } catch (e) {
        console.error("Error modifying iframe:", e);
        setTimeout(modifyIframeContents, 500);
      }
    }, 1500);
  }
</script>








<!DOCTYPE html>
<html>
<head>
    <title>Book Management</title>
    <!-- SharePoint required scripts -->
    <script type="text/javascript" src="/_layouts/15/init.js"></script>
    <script type="text/javascript" src="/_layouts/15/MicrosoftAjax.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.UI.Dialog.js"></script>
    
    <style>
        /* Style for our trigger button */
        .launch-button {
            background-color: #0078d4;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
    </style>
</head>
<body>
    <button class="launch-button" onclick="openCleanFormDialog()">Add New Book</button>

    <script type="text/javascript">
        function openCleanFormDialog() {
            // 1. Create a custom page URL that hides all unnecessary elements
            var formUrl = _spPageContextInfo.webAbsoluteUrl + 
                         "/Lists/BookManagement/NewForm.aspx?IsDlg=1";
            
            // 2. Configure dialog options
            var options = {
                title: "Add New Book",
                url: formUrl,
                width: 800,
                height: 600,
                dialogReturnValueCallback: function(result, returnValue) {
                    if (result === SP.UI.DialogResult.OK) {
                        SP.UI.Notify.addNotification("Book added successfully!", false);
                        location.reload(); // Refresh the page if needed
                    }
                }
            };
            
            // 3. Open the dialog
            var dialog = SP.UI.ModalDialog.showModalDialog(options);
            
            // 4. Hide unwanted elements after dialog loads
            setTimeout(function hideUnwantedElements() {
                try {
                    var iframe = document.querySelector("iframe[title='Add New Book']");
                    if (iframe && iframe.contentDocument) {
                        var doc = iframe.contentDocument;
                        
                        // Hide calendar and other elements
                        var elementsToHide = [
                            "#Ribbon\\.EditingTools\\.CPEditTab\\.RichText\\.Spelling", // Spelling
                            "#Ribbon\\.SiteActions", // Site Administration
                            "#Ribbon\\.CalendarTab", // Calendar
                            "#datepicker\\.trigger", // Date picker trigger
                            "a[title='Calendar']", // Calendar link
                            ".ms-dtinput", // Date input controls
                            ".ms-dttimeinput" // Time input controls
                        ];
                        
                        // Inject CSS to hide elements
                        var style = doc.createElement("style");
                        style.type = "text/css";
                        style.innerHTML = elementsToHide.map(selector => 
                            `${selector} { display: none !important; }`
                        ).join("\n");
                        doc.head.appendChild(style);
                        
                        // Alternatively hide via JavaScript if CSS doesn't work
                        elementsToHide.forEach(selector => {
                            var elements = doc.querySelectorAll(selector);
                            elements.forEach(el => el.style.display = "none");
                        });
                    }
                } catch(e) {
                    console.log("Error modifying dialog content:", e);
                }
            }, 2000); // Wait 2 seconds for iframe to load
        }
    </script>
</body>
</html>






<!DOCTYPE html>
<html>
<head>
    <title>Book Management</title>
    <!-- SharePoint required scripts -->
    <script type="text/javascript" src="/_layouts/15/init.js"></script>
    <script type="text/javascript" src="/_layouts/15/MicrosoftAjax.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.UI.Dialog.js"></script>
    
    <style>
        /* Style for our trigger button */
        .custom-button {
            background-color: #0078d4;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 2px;
            cursor: pointer;
            font-size: 14px;
            margin: 10px;
        }
    </style>
</head>
<body>
    <button class="custom-button" onclick="openCustomizedForm()">Add New Book</button>

    <script type="text/javascript">
        function openCustomizedForm() {
            // Use the complete URL to your NewForm.aspx
            var fullFormUrl = "https://yourdomain.sharepoint.com/sites/yoursite/Lists/BookManagement/NewForm.aspx";
            
            // Add our custom CSS to hide elements
            var cssToInject = `
                <style type="text/css">
                    /* Hide spelling option */
                    #Ribbon\.EditingTools\.CPEditTab\.RichText\.Spelling,
                    a[title="Spelling"] {
                        display: none !important;
                    }
                    
                    /* Hide Site Administration */
                    #Ribbon\.SiteActions,
                    li[title="SITE ADMINISTRATION"] {
                        display: none !important;
                    }
                    
                    /* Hide other ribbon elements if needed */
                    .ms-cui-topBar2 {
                        display: none !important;
                    }
                </style>
            `;
            
            // Create a custom page URL that will inject our CSS
            var customUrl = "/_layouts/15/iframe.aspx?";
            customUrl += "url=" + encodeURIComponent(fullFormUrl);
            customUrl += "&isDlg=1";
            
            var options = {
                title: "Add New Book",
                url: customUrl,
                width: 800,
                height: 600,
                dialogReturnValueCallback: function(result, returnValue) {
                    if (result === SP.UI.DialogResult.OK) {
                        SP.UI.Notify.addNotification("Book added successfully!", false);
                    }
                }
            };
            
            // Open the dialog
            var dialog = SP.UI.ModalDialog.showModalDialog(options);
            
            // Alternative method - inject CSS after dialog loads
            setTimeout(function() {
                var iframe = document.querySelector("iframe[title='Add New Book']");
                if (iframe && iframe.contentDocument) {
                    var style = iframe.contentDocument.createElement("style");
                    style.innerHTML = cssToInject;
                    iframe.contentDocument.head.appendChild(style);
                }
            }, 2000);
        }
    </script>
</body>
</html>







<!DOCTYPE html>
<html>
<head>
    <title>Add New Book</title>
    <!-- SharePoint required scripts -->
    <script type="text/javascript" src="/_layouts/15/init.js"></script>
    <script type="text/javascript" src="/_layouts/15/MicrosoftAjax.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.UI.Dialog.js"></script>
    
    <style type="text/css">
        /* Pre-defined styles to hide elements */
        .hide-spelling #Ribbon\.EditingTools\.CPEditTab\.RichText\.Spelling {
            display: none !important;
        }
        .hide-siteadmin #Ribbon\.SiteActions {
            display: none !important;
        }
        .hide-siteadmin #SiteAdminMenu {
            display: none !important;
        }
    </style>
</head>
<body>
    <button onclick="openCustomNewForm()" class="ms-Button">
        <span class="ms-Button-label">Add New Book</span>
    </button>

    <script type="text/javascript">
        function openCustomNewForm() {
            // Create a custom page that inherits SharePoint styles but hides unwanted elements
            var customFormUrl = "/_layouts/15/iframe.aspx?";
            customFormUrl += "url=" + encodeURIComponent("/sites/YourSite/Lists/BookManagement/NewForm.aspx");
            customFormUrl += "&hideSpelling=true";
            customFormUrl += "&hideSiteAdmin=true";
            
            var options = {
                title: "Add New Book",
                url: customFormUrl,
                width: 800,
                height: 600,
                dialogReturnValueCallback: function(result, returnValue) {
                    if (result === SP.UI.DialogResult.OK) {
                        SP.UI.Notify.addNotification("Book added successfully!");
                    }
                }
            };
            
            SP.UI.ModalDialog.showModalDialog(options);
        }
        
        // Alternative approach using query string parameters
        function modifyNewFormPage() {
            var newFormUrl = "/sites/YourSite/Lists/BookManagement/NewForm.aspx";
            newFormUrl += "?HideSpelling=true&HideSiteAdmin=true";
            
            var options = {
                title: "Add New Book",
                url: newFormUrl,
                width: 800,
                height: 600
            };
            
            var dialog = SP.UI.ModalDialog.showModalDialog(options);
            
            // This approach requires corresponding JavaScript on the NewForm.aspx page
            // that reads these parameters and hides the elements
        }
    </script>
</body>
</html>









<!DOCTYPE html>
<html>
<head>
  <title>Add New Book</title>
  <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
  <script type="text/javascript" src="/_layouts/15/SP.js"></script>
  <script type="text/javascript" src="/_layouts/15/SP.UI.Dialog.js"></script>
</head>
<body>

  <!-- Trigger Button -->
  <button onclick="openNewItemDialog()">Add New Book</button>

  <script type="text/javascript">
    function openNewItemDialog() {
      var options = {
        title: "Add New Book",
        url: "/sites/YourSite/Lists/BookManagement/NewForm.aspx", // 🔁 Replace accordingly
        width: 800,
        height: 600,
        dialogReturnValueCallback: function (result, returnValue) {
          if (result === SP.UI.DialogResult.OK) {
            alert("Book added successfully!");
            location.reload();
          }
        }
      };

      SP.UI.ModalDialog.showModalDialog(options);

      setTimeout(function waitForIframe() {
        var iframe = document.querySelector("iframe[title='Add New Book']"); // adjust if different title
        if (iframe && iframe.contentDocument && iframe.contentDocument.readyState === "complete") {
          var iframeDoc = iframe.contentDocument;

          // 1. 🔒 Hide "Spelling" button
          const spelling = iframeDoc.querySelector("a[title='Spelling']");
          if (spelling) spelling.style.display = "none";

          // 2. 🔒 Hide "SITE ADMINISTRATION" tab
          const siteAdminTab = iframeDoc.querySelector("li[title='SITE ADMINISTRATION']");
          if (siteAdminTab) siteAdminTab.style.display = "none";

          // Also hide the ribbon group if needed
          const siteAdminRibbonGroup = iframeDoc.querySelector("#Ribbon.SiteActions");
          if (siteAdminRibbonGroup) siteAdminRibbonGroup.style.display = "none";

        } else {
          // Retry if iframe not yet loaded
          setTimeout(waitForIframe, 500);
        }
      }, 1500);
    }
  </script>

</body>
</html>





<!DOCTYPE html>
<html>
<head>
  <title>Add New Book</title>
  <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
  <script type="text/javascript" src="/_layouts/15/SP.js"></script>
  <script type="text/javascript" src="/_layouts/15/SP.UI.Dialog.js"></script>
  <style>
    button {
      padding: 10px 16px;
      font-size: 14px;
      border-radius: 4px;
      border: none;
      background-color: #0078d7;
      color: white;
      cursor: pointer;
    }
    button:hover {
      background-color: #005a9e;
    }
  </style>
</head>
<body>

  <!-- Trigger Button -->
  <button onclick="openNewItemDialog()">Add New Book</button>

  <script type="text/javascript">
    function openNewItemDialog() {
      var options = {
        title: "Add New Book",
        url: "/sites/YourSite/Lists/BookManagement/NewForm.aspx", // 🔁 Replace with your site URL and list name
        width: 800,
        height: 600,
        dialogReturnValueCallback: function (result, returnValue) {
          if (result === SP.UI.DialogResult.OK) {
            alert("Book added successfully!");
            location.reload();
          }
        }
      };

      SP.UI.ModalDialog.showModalDialog(options);

      // Inject button after iframe loads
      setTimeout(function injectCustomButton() {
        var iframe = document.querySelector("iframe[title='Add New Book']"); // Match the form title shown in popup
        if (iframe && iframe.contentDocument && iframe.contentDocument.readyState === "complete") {
          var iframeDoc = iframe.contentDocument;

          // Hide the "Spelling" button if it exists
          var spellingBtn = iframeDoc.querySelector("a[title='Spelling']");
          if (spellingBtn) spellingBtn.style.display = "none";

          // Add custom button inside the ribbon
          var ribbonBar = iframeDoc.querySelector(".ms-cui-topBar2");
          if (ribbonBar) {
            var myButton = iframeDoc.createElement("button");
            myButton.innerText = "📝 Custom Action";
            myButton.style.marginLeft = "20px";
            myButton.onclick = function () {
              alert("Custom action inside modal popup clicked!");
              // You can trigger form functions here if needed
            };
            ribbonBar.appendChild(myButton);
          }
        } else {
          // Retry if iframe not yet loaded
          setTimeout(injectCustomButton, 500);
        }
      }, 1500);
    }
  </script>

</body>
</html>





$env:NODE_OPTIONS="--openssl-legacy-provider"
ng serve



<!-- AddBook.html - SharePoint Integrated Approach -->
<!DOCTYPE html>
<html>
<head>
    <title>Add Book</title>
    <!-- Reference SharePoint styles -->
    <link rel="stylesheet" href="/_layouts/15/defaultcss.ashx">
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>
    <script type="text/javascript" src="/_layouts/15/ClientPeoplePicker.js"></script>
    <script type="text/javascript" src="/_layouts/15/init.js"></script>
    <script type="text/javascript" src="/_layouts/15/ClientForms.js"></script>
    <style>
        .sp-label { font-weight: bold; margin-top: 8px; display: block; }
        .sp-input { width: 100%; padding: 6px; margin-top: 4px; }
        .container { max-width: 500px; margin: 0 auto; padding: 20px; }
        .btn { margin-top: 10px; }
    </style>
</head>
<body>
    <div class="container">
        <h2>Add New Book</h2>
        
        <label class="sp-label" for="bookName">Book Name</label>
        <input type="text" id="bookName" class="sp-input">

        <label class="sp-label" for="isbn">ISBN</label>
        <input type="number" id="isbn" class="sp-input" min="10000" max="99999" readonly>

        <label class="sp-label" for="publicationDate">Publication Date</label>
        <input type="date" id="publicationDate" class="sp-input">

        <label class="sp-label" for="bookCount">Number of Copies</label>
        <input type="number" id="bookCount" class="sp-input" min="1">

        <label class="sp-label">Author</label>
        <div id="peoplePickerDiv"></div>

        <button class="btn btn-primary" onclick="submitBook()">Submit Book</button>
    </div>

    <script>
        // Set today's date as max date for publication
        document.addEventListener("DOMContentLoaded", function () {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById("publicationDate").setAttribute("max", today);

            // Set auto-generated ISBN
            document.getElementById("isbn").value = Math.floor(10000 + Math.random() * 90000);

            initializePeoplePicker(); // init SharePoint people picker
        });

        // Function to initialize the SPClientPeoplePicker
        function initializePeoplePicker() {
            var schema = {};
            schema.PrincipalAccountType = 'User';
            schema.SearchPrincipalSource = 15;
            schema.ResolvePrincipalSource = 15;
            schema.AllowMultipleValues = false;
            schema.MaximumEntitySuggestions = 50;
            schema.Width = '100%';

            SPClientPeoplePicker_InitStandaloneControlWrapper("peoplePickerDiv", null, schema);
        }

        // Function to submit the book to SharePoint List
        function submitBook() {
            var bookName = document.getElementById("bookName").value.trim();
            var isbn = document.getElementById("isbn").value.trim();
            var pubDate = document.getElementById("publicationDate").value.trim();
            var bookCount = document.getElementById("bookCount").value.trim();

            var peoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerDiv_TopSpan;
            var users = peoplePicker.GetAllUserInfo();

            if (!bookName || !pubDate || !bookCount || users.length === 0) {
                alert("Please fill all fields and select an author.");
                return;
            }

            var loginName = users[0].Key;

            var ctx = new SP.ClientContext.get_current();
            var web = ctx.get_web();
            var user = web.ensureUser(loginName);

            ctx.load(user);
            ctx.executeQueryAsync(function () {
                var list = web.get_lists().getByTitle("Book Management");

                var itemCreateInfo = new SP.ListItemCreationInformation();
                var newItem = list.addItem(itemCreateInfo);

                newItem.set_item("BookName", bookName);
                newItem.set_item("ISBN", parseInt(isbn));
                newItem.set_item("numberof_books", parseInt(bookCount));
                newItem.set_item("AuthorName", user);
                newItem.set_item("PublicationDate", new Date(pubDate));
                newItem.update();

                ctx.executeQueryAsync(function () {
                    alert("Book added successfully!");
                    window.location.href = "/sites/yoursite/Lists/BookManagement"; // Redirect to list
                }, function (sender, args) {
                    alert("Error adding book: " + args.get_message());
                });

            }, function (sender, args) {
                alert("Error resolving user: " + args.get_message());
            });
        }
    </script>
</body>
</html>










<!DOCTYPE html>
<html>
<head>
    <title>Library Management</title>
    <!-- SharePoint styles -->
    <link rel="stylesheet" href="/_layouts/15/defaultcss.ashx" />
    <script src="/_layouts/15/init.js"></script>
    <script src="/_layouts/15/MicrosoftAjax.js"></script>
    <script src="/_layouts/15/SP.Runtime.js"></script>
    <script src="/_layouts/15/SP.js"></script>
    <script src="/_layouts/15/SP.UI.Controls.js"></script>
</head>
<body>
    <div id="chrome_ctrl_placeholder"></div>
    <div id="main-content" style="padding:20px;">
        <h2>Library Management Dashboard</h2>
        
        <button onclick="openSharePointNewForm()" class="ms-Button">
            <span class="ms-Button-label">Add New Book</span>
        </button>
        
        <button onclick="openSharePointUpload()" class="ms-Button">
            <span class="ms-Button-label">Upload Documents</span>
        </button>
        
        <h3>Book Inventory</h3>
        <iframe src="/Lists/BookManagement/AllItems.aspx?IsDlg=1" 
                style="width:100%; height:500px; border:none;"></iframe>
    </div>

    <script>
    // Initialize SharePoint UI
    ExecuteOrDelayUntilScriptLoaded(function() {
        SP.SOD.executeFunc('sp.js', 'SP.UI.Controls.Navigation', function() {
            var topNav = new SP.UI.Controls.Navigation(
                "chrome_ctrl_placeholder",
                {
                    appTitle: "Library Management",
                    appHelpPageUrl: "Help.aspx",
                    appIconUrl: "/_layouts/images/issuetracker.png",
                    appTitleIconUrl: "/_layouts/images/issuetracker.png",
                    appWebUrl: "/",
                    settingsLinks: [
                        new SP.UI.Controls.NavigationSettingsLink("Settings", "../Lists/BookManagement/AllItems.aspx")
                    ]
                }
            );
        });
        
        // Load your custom functionality
        SP.SOD.executeFunc('sp.js', 'SP.ClientContext', initCustomFeatures);
    }, 'sp.js');
    
    function initCustomFeatures() {
        // Only custom code that SharePoint can't do
        checkOverdueBooks();
    }
    
    function openSharePointNewForm() {
        var options = {
            url: _spPageContextInfo.webAbsoluteUrl + '/Lists/BookManagement/NewForm.aspx',
            title: 'Add New Book',
            allowMaximize: true,
            showClose: true,
            width: 800,
            height: 600
        };
        SP.UI.ModalDialog.showModalDialog(options);
    }
    
    function openSharePointUpload() {
        var options = {
            url: _spPageContextInfo.webAbsoluteUrl + '/_layouts/15/Upload.aspx?List={YOUR-LIST-ID}',
            title: 'Upload Document',
            allowMaximize: true,
            showClose: true,
            width: 800,
            height: 600
        };
        SP.UI.ModalDialog.showModalDialog(options);
    }
    
    function checkOverdueBooks() {
        // Your existing notification logic
        // This is one of the few custom parts you keep
    }
    </script>
</body>
</html>









<View>
  <Query>
    <Where>
      <And>
        <Eq>
          <FieldRef Name='Track_returnofbook' />
          <Value Type='Choice'>Issued</Value>
        </Eq>
        <Lt>
          <FieldRef Name='IssueDate' />
          <Value Type='DateTime' IncludeTimeValue='FALSE'>
            <Today OffsetDays='-15' />
          </Value>
        </Lt>
      </And>
    </Where>
  </Query>
</View>




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Library Notifications</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            padding: 20px;
        }
        .notification-container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
        }
        .notification-header {
            border-bottom: 2px solid #dee2e6;
            padding-bottom: 15px;
            margin-bottom: 20px;
        }
        .notification-item {
            padding: 15px;
            border-bottom: 1px solid #eee;
            transition: background-color 0.2s;
        }
        .notification-item:hover {
            background-color: #f8f9fa;
        }
        .overdue-badge {
            background-color: #dc3545;
            color: white;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
        }
        .no-notifications {
            text-align: center;
            padding: 40px;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="notification-container">
        <div class="notification-header d-flex justify-content-between align-items-center">
            <h2><i class="fas fa-bell me-2"></i> Overdue Books Notifications</h2>
            <span class="badge bg-danger" id="notificationCount">0</span>
        </div>
        
        <div id="notificationList">
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading notifications...</p>
            </div>
        </div>
    </div>

    <!-- Bootstrap & jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- SharePoint JSOM -->
    <script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/SP.js"></script>

    <script type="text/javascript">
        // Main function to load notifications
        function loadAllNotifications() {
            const ctx = new SP.ClientContext.get_current();
            const list = ctx.get_web().get_lists().getByTitle("Issuance and Returns");
            const today = new Date();
            
            const camlQuery = new SP.CamlQuery();
            camlQuery.set_viewXml(`
                <View>
                    <Query>
                        <Where>
                            <And>
                                <IsNotNull>
                                    <FieldRef Name='IssueDate' />
                                </IsNotNull>
                                <IsNotNull>
                                    <FieldRef Name='ReturnDate' />
                                </IsNotNull>
                                <Lt>
                                    <FieldRef Name='ReturnDate' />
                                    <Value Type='DateTime'><Today /></Value>
                                </Lt>
                                <Eq>
                                    <FieldRef Name='Track_returnofbook' />
                                    <Value Type='Choice'>Issued</Value>
                                </Eq>
                            </And>
                        </Where>
                    </Query>
                </View>
            `);

            const items = list.getItems(camlQuery);
            ctx.load(items, 'Include(BookLookup,MemberLookup,IssueDate,ReturnDate,Track_returnofbook)');
            
            ctx.executeQueryAsync(
                function() {
                    const overdueBooks = [];
                    const enumerator = items.getEnumerator();
                    
                    while (enumerator.moveNext()) {
                        const item = enumerator.get_current();
                        const issueDate = new Date(item.get_item("IssueDate"));
                        const returnDate = new Date(item.get_item("ReturnDate"));
                        const daysOverdue = Math.floor((today - returnDate) / (1000 * 60 * 60 * 24));
                        
                        // Check if book is overdue by more than 15 days and still issued
                        if (daysOverdue > 15 && item.get_item("Track_returnofbook") === "Issued") {
                            const bookLookup = item.get_item("BookLookup");
                            const memberLookup = item.get_item("MemberLookup");
                            
                            overdueBooks.push({
                                bookTitle: bookLookup.get_lookupValue(),
                                memberName: memberLookup.get_lookupValue(),
                                issueDate: issueDate.toLocaleDateString(),
                                returnDate: returnDate.toLocaleDateString(),
                                daysOverdue: daysOverdue,
                                itemId: item.get_id()
                            });
                        }
                    }
                    
                    updateNotificationUI(overdueBooks);
                },
                function(sender, args) {
                    console.error("Error loading notifications:", args.get_message());
                    document.getElementById("notificationList").innerHTML = 
                        `<div class="alert alert-danger">Error loading overdue books: ${args.get_message()}</div>`;
                }
            );
        }

        // Update the UI with notifications
        function updateNotificationUI(overdueBooks) {
            const notificationList = document.getElementById("notificationList");
            const countSpan = document.getElementById("notificationCount");
            
            notificationList.innerHTML = "";
            countSpan.textContent = overdueBooks.length;

            if (overdueBooks.length === 0) {
                notificationList.innerHTML = `
                    <div class="no-notifications">
                        <i class="fas fa-check-circle fa-3x text-success mb-3"></i>
                        <h4>No overdue books found</h4>
                        <p class="text-muted">All books have been returned on time</p>
                    </div>
                `;
                return;
            }

            overdueBooks.forEach(book => {
                const notificationHtml = `
                    <div class="notification-item">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h5 class="mb-0">${escapeHTML(book.bookTitle)}</h5>
                            <span class="overdue-badge">${book.daysOverdue} days overdue</span>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <p class="mb-1"><strong>Issued to:</strong> ${escapeHTML(book.memberName)}</p>
                                <p class="mb-1 text-muted"><small>Issued: ${book.issueDate}</small></p>
                            </div>
                            <div class="col-md-6">
                                <p class="mb-1"><strong>Due date:</strong> ${book.returnDate}</p>
                                <button class="btn btn-sm btn-outline-primary mt-1" onclick="sendReminder(${book.itemId})">
                                    <i class="fas fa-envelope me-1"></i> Send Reminder
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                notificationList.innerHTML += notificationHtml;
            });
        }

        // Helper function to send reminder (placeholder)
        function sendReminder(itemId) {
            alert(`Reminder would be sent for item ID: ${itemId}`);
            // Implement actual reminder logic here
        }

        // Helper function for safe HTML rendering
        function escapeHTML(str) {
            if (!str) return "";
            return str.toString()
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Load notifications when SharePoint scripts are ready
        ExecuteOrDelayUntilScriptLoaded(function() {
            SP.SOD.executeFunc('sp.js', 'SP.ClientContext', loadAllNotifications);
        });
    </script>
</body>
</html>








function renderAvailableBooks() {
    const ctx = new SP.ClientContext.get_current();
    const container = document.getElementById("availableBooks");
    container.innerHTML = "Loading books...";

    // Load all books
    const bookList = ctx.get_web().get_lists().getByTitle("Book Management");
    const bookItems = bookList.getItems(new SP.CamlQuery());
    ctx.load(bookItems);

    // Load issued books count
    const issuanceList = ctx.get_web().get_lists().getByTitle("Issuance and Returns");
    const issuedQuery = new SP.CamlQuery();
    issuedQuery.set_viewXml(`
        <View>
            <Query>
                <Where>
                    <Eq>
                        <FieldRef Name='Track_returnofbook' />
                        <Value Type='Choice'>Issued</Value>
                    </Eq>
                </Where>
            </Query>
        </View>
    `);
    const issuedItems = issuanceList.getItems(issuedQuery);
    ctx.load(issuedItems);

    ctx.executeQueryAsync(
        function() {
            try {
                // Process book items
                const bookEnumerator = bookItems.getEnumerator();
                let totalBooks = 0;
                let booksHTML = "";
                
                while (bookEnumerator.moveNext()) {
                    const item = bookEnumerator.get_current();
                    booksHTML += generateBookCardHTML(item);
                    totalBooks++;
                }

                // Calculate available books
                const issuedCount = issuedItems.get_count();
                const availableCount = totalBooks - issuedCount;

                // Update UI
                container.innerHTML = booksHTML;
                document.getElementById("availableCount").innerText = availableCount;
                document.getElementById("borrowedCount").innerText = issuedCount;
            } catch (e) {
                console.error("Error processing books:", e);
                container.innerHTML = "<div class='alert alert-danger'>Error loading books</div>";
            }
        },
        function(sender, args) {
            console.error("Query failed:", args.get_message());
            container.innerHTML = `<div class='alert alert-danger'>${args.get_message()}</div>`;
        }
    );
}





function renderAvailableBooks(listItems) {
    const container = document.getElementById("availableBooks");
    container.innerHTML = "";

    // First get count of issued books from Issuance and Returns list
    const ctx = new SP.ClientContext.get_current();
    const issuanceList = ctx.get_web().get_lists().getByTitle("Issuance and Returns");
    const issuedQuery = new SP.CamlQuery();
    
    issuedQuery.set_viewXml(`
        <View>
            <Query>
                <Where>
                    <Eq>
                        <FieldRef Name='Track_returnofbook' />
                        <Value Type='Choice'>Issued</Value>
                    </Eq>
                </Where>
            </Query>
        </View>
    `);
    
    const issuedItems = issuanceList.getItems(issuedQuery);
    ctx.load(issuedItems);
    
    // Then process the books
    const enumerator = listItems.getEnumerator();
    let totalBooks = 0;
    let booksHTML = "";
    
    while (enumerator.moveNext()) {
        const item = enumerator.get_current();
        booksHTML += generateBookCardHTML(item);
        totalBooks++;
    }
    
    ctx.executeQueryAsync(
        function() {
            const issuedCount = issuedItems.get_count();
            const availableCount = totalBooks - issuedCount;
            
            container.innerHTML = booksHTML;
            document.getElementById("availableCount").innerText = availableCount;
            document.getElementById("borrowedCount").innerText = issuedCount;
        },
        function(sender, args) {
            console.error("Error loading issued books count:", args.get_message());
            // Fallback - just show all books as available if we can't get issued count
            container.innerHTML = booksHTML;
            document.getElementById("availableCount").innerText = totalBooks;
            document.getElementById("borrowedCount").innerText = "N/A";
        }
    );
}








<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Library Management System</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <style>
    body, html {
      background-color: #f0f4f8;
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      overflow: hidden;
    }
    .sidebar {
      height: 100vh;
      background-color: #343a40;
      color: white;
      padding-top: 20px;
      position: absolute;
      width: 250px;
      overflow-y: auto;
    }
    .sidebar a {
      color: white;
      display: block;
      padding: 10px 20px;
      text-decoration: none;
    }
    .sidebar a:hover {
      background-color: #495057;
    }
    .submenu {
      padding-left: 30px;
      background-color: #3e454d;
    }
    .content {
      margin-left: 260px;
      padding: 20px;
    }
    .footer-stats {
      background-color: white;
      padding: 20px;
      border-top: 2px solid #007bff;
      text-align: center;
      position: fixed;
      bottom: 0;
      width: calc(100% - 260px);
      margin-left: 260px;
    }
    .book-card {
      cursor: pointer;
      transition: transform 0.2s, box-shadow 0.2s;
      height: 100%;
    }
    .book-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    .scrollable-div {
      max-height: calc(100vh - 300px);
      overflow-y: auto;
      padding-right: 10px;
    }
    #s4-workspace, #s4-bodyContainer, #contentBox {
      margin: 0 !important;
      padding: 0 !important;
      width: 100% !important;
      height: 100% !important;
      position: relative !important;
      top: 0 !important;
    }
    #customContentWrapper {
      width: 100%;
      height: 100vh;
      overflow-y: auto;
      padding: 0;
      margin: 0;
    }
    /* Hide SharePoint UI elements */
    #sideNavBox, #suiteBarTop, #titleAreaBox, #DeltaPlaceHolderPageTitleInTitleArea,
    #DeltaPlaceHolderPageDescription, #SiteHeader, #s4-titlerow, #TurnOnAccessibility,
    #globalNavBox, .ms-cui-topBar2, .ms-core-pageTitle, .ms-core-commandBar,
    .ms-core-navigation, .ms-quicklaunch {
      display: none !important;
      height: 0 !important;
      overflow: hidden !important;
    }
  </style>
</head>
<body>

<!-- Sidebar Menu -->
<div class="sidebar">
  <h4 class="text-center mb-4">Library Menu</h4>
  <a data-toggle="collapse" href="#bookMenu" role="button">
    <i class="fas fa-book"></i> Book Management
  </a>
  <div class="collapse submenu" id="bookMenu">
    <a href="#">Add New Book</a>
    <a href="#">Update Book</a>
    <a href="#">Remove Book</a>
    <a href="#">Search Book</a>
  </div>
  <a data-toggle="collapse" href="#memberMenu" role="button">
    <i class="fas fa-users"></i> Member Management
  </a>
  <div class="collapse submenu" id="memberMenu">
    <a href="#">Add Member</a>
    <a href="#">Update Member</a>
    <a href="#">Delete Member</a>
    <a href="#">Search Member</a>
  </div>
  <a data-toggle="collapse" href="#issueMenu" role="button">
    <i class="fas fa-book-reader"></i> Book Issuance
  </a>
  <div class="collapse submenu" id="issueMenu">
    <a href="#">Issue Book</a>
    <a href="#">Return Book</a>
    <a href="#">Check Overdue</a>
  </div>
</div>

<!-- Main Content -->
<div class="content">
  <div class="dashboard-header d-flex justify-content-between align-items-center mb-4">
    <h2 class="text-dark">Library Management Dashboard</h2>
    <div class="dropdown ms-auto">
      <button class="btn btn-link text-dark position-relative"
              type="button"
              id="notificationDropdown"
              data-bs-toggle="dropdown"
              aria-expanded="false">
        <i class="fas fa-bell fa-lg"></i>
        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="notificationCount"></span>
      </button>
      <ul class="dropdown-menu dropdown-menu-end notification-dropdown" aria-labelledby="notificationDropdown">
        <li><h6 class="dropdown-header">Overdue Publications</h6></li>
        <li><hr class="dropdown-divider"></li>
        <div id="notificationList"></div>
        <div class="more-link">
          <a href="#" class="text-primary">All notifications</a>
        </div>
      </ul>
    </div>
  </div>

  <!-- Search Box -->
  <div class="input-group mb-3">
    <input type="text" id="booksearch" placeholder="Search by Book Name, ISBN or Author Name" class="form-control" />
    <div class="input-group-append">
      <button type="button" class="btn btn-primary" onclick="searchBooks()">
        <i class="fas fa-search"></i>
      </button>
    </div>
  </div>

  <!-- Search Results -->
  <div id="searchResults" class="row row-cols-1 row-cols-md-3 g-4 mt-4"></div>

  <!-- Available Books Section -->
  <div class="scrollable-div">
    <div class="mt-5">
      <h4 class="mb-3">Available Books</h4>
      <div id="availableBooks" class="row row-cols-1 row-cols-md-3 g-4"></div>
    </div>
  </div>
</div>

<!-- Footer Stats -->
<div class="footer-stats">
  <div class="row">
    <div class="col-md-6">
      <h5>Total Borrowed Books:</h5>
      <p id="borrowedCount">--</p>
    </div>
    <div class="col-md-6">
      <h5>Total Available Books:</h5>
      <p id="availableCount">--</p>
    </div>
  </div>
</div>

<!-- Book Details Modal -->
<div class="modal fade" id="bookDetailsModal" tabindex="-1" aria-labelledby="bookDetailsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="bookDetailsModalLabel">Book Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="bookDetailsContent">
        <!-- Content will be loaded dynamically -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" onclick="issueBook()">Issue Book</button>
        <button type="button" class="btn btn-info" onclick="showMoreOptions()">More Options</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- More Options Modal -->
<div class="modal fade" id="moreOptionsModal" tabindex="-1" aria-labelledby="moreOptionsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="moreOptionsModalLabel">Book Management</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="d-grid gap-2">
          <button type="button" class="btn btn-warning" onclick="openEditModal()">Update Book</button>
          <button type="button" class="btn btn-danger" onclick="deleteBook()">Delete Book</button>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Book Modal -->
<div class="modal fade" id="editBookModal" tabindex="-1" aria-labelledby="editBookModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editBookModalLabel">Edit Book</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="editBookName" class="form-label">Book Name</label>
          <input type="text" class="form-control" id="editBookName">
        </div>
        <div class="mb-3">
          <label for="editISBN" class="form-label">ISBN</label>
          <input type="number" class="form-control" id="editISBN">
        </div>
        <div class="mb-3">
          <label for="editAuthor" class="form-label">Author</label>
          <input type="text" class="form-control" id="editAuthor">
        </div>
        <div class="mb-3">
          <label for="editPubDate" class="form-label">Publication Date</label>
          <input type="date" class="form-control" id="editPubDate">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="saveBookChanges()">Save Changes</button>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">
  // Global variables
  let currentBookId = null;
  let currentBookDetails = null;
  let notificationItems = [];

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", function() {
    loadAvailableBooks();
    loadNotifications();
  });

  // Load all available books
  function loadAvailableBooks() {
    const clientContext = new SP.ClientContext.get_current();
    const list = clientContext.get_web().get_lists().getByTitle("Book Management");
    const camlQuery = new SP.CamlQuery();
    const listItems = list.getItems(camlQuery);

    clientContext.load(listItems);
    clientContext.executeQueryAsync(
      function() {
        renderAvailableBooks(listItems);
        document.getElementById("availableCount").innerText = listItems.get_count();
      },
      function(sender, args) {
        console.error("Failed to load available books:", args.get_message());
      }
    );
  }

  // Render available books as clickable cards
  function renderAvailableBooks(listItems) {
    const container = document.getElementById("availableBooks");
    container.innerHTML = "";

    const enumerator = listItems.getEnumerator();
    while (enumerator.moveNext()) {
      const item = enumerator.get_current();
      container.innerHTML += generateBookCardHTML(item);
    }
  }

  // Generate HTML for book card
  function generateBookCardHTML(item) {
    try {
      const id = item.get_id();
      const bookName = item.get_item("BookName") || "";
      const isbn = item.get_item("ISBN") || "";
      const authorField = item.get_item("AuthorName");
      const author = authorField ? authorField.get_lookupValue() : "N/A";
      const pubDate = item.get_item("PublicationDate");
      const formattedDate = pubDate ? new Date(pubDate).toLocaleDateString() : "N/A";

      return `
        <div class="col mb-4">
          <div class="card book-card" onclick="showBookDetails(${id})">
            <div class="card-body text-center">
              <i class="fas fa-book fa-2x text-info mb-2"></i>
              <h5 class="card-title text-primary">${escapeHTML(bookName)}</h5>
              <p class="card-text"><strong>Author:</strong> ${escapeHTML(author)}</p>
              <p class="card-text"><strong>ISBN:</strong> ${escapeHTML(isbn.toString())}</p>
            </div>
          </div>
        </div>
      `;
    } catch (e) {
      console.error("Error generating book card:", e);
      return "";
    }
  }

  // Show book details in modal
  function showBookDetails(itemId) {
    currentBookId = itemId;
    const ctx = new SP.ClientContext.get_current();
    const item = ctx.get_web().get_lists().getByTitle("Book Management").getItemById(itemId);
    
    ctx.load(item);
    ctx.executeQueryAsync(
      function() {
        const bookName = item.get_item("BookName") || "";
        const isbn = item.get_item("ISBN") || "";
        const authorField = item.get_item("AuthorName");
        const author = authorField ? authorField.get_lookupValue() : "N/A";
        const pubDate = item.get_item("PublicationDate");
        const formattedDate = pubDate ? new Date(pubDate).toLocaleDateString() : "N/A";

        currentBookDetails = {
          bookName: bookName,
          isbn: isbn,
          author: author,
          pubDate: formattedDate
        };

        const content = `
          <p><strong>Book Name:</strong> ${escapeHTML(bookName)}</p>
          <p><strong>ISBN:</strong> ${escapeHTML(isbn.toString())}</p>
          <p><strong>Author:</strong> ${escapeHTML(author)}</p>
          <p><strong>Publication Date:</strong> ${formattedDate}</p>
        `;

        document.getElementById("bookDetailsContent").innerHTML = content;
        new bootstrap.Modal(document.getElementById('bookDetailsModal')).show();
      },
      function(sender, args) {
        console.error("Error loading book details:", args.get_message());
      }
    );
  }

  // Show more options modal
  function showMoreOptions() {
    $('#bookDetailsModal').modal('hide');
    new bootstrap.Modal(document.getElementById('moreOptionsModal')).show();
  }

  // Open edit modal
  function openEditModal() {
    $('#moreOptionsModal').modal('hide');
    
    // Pre-fill the edit form
    document.getElementById("editBookName").value = currentBookDetails.bookName;
    document.getElementById("editISBN").value = currentBookDetails.isbn;
    document.getElementById("editAuthor").value = currentBookDetails.author;
    
    // Format date for input field
    if (currentBookDetails.pubDate !== "N/A") {
      const dateObj = new Date(currentBookDetails.pubDate);
      document.getElementById("editPubDate").value = dateObj.toISOString().split('T')[0];
    }
    
    new bootstrap.Modal(document.getElementById('editBookModal')).show();
  }

  // Save book changes
  function saveBookChanges() {
    const ctx = new SP.ClientContext.get_current();
    const list = ctx.get_web().get_lists().getByTitle("Book Management");
    const item = list.getItemById(currentBookId);
    
    // Get user ID for AuthorName
    const userLogin = document.getElementById("editAuthor").value.trim();
    const user = ctx.get_web().ensureUser(userLogin);
    ctx.load(user);
    
    ctx.executeQueryAsync(
      function() {
        // Update item after getting user ID
        item.set_item("BookName", document.getElementById("editBookName").value);
        item.set_item("ISBN", parseInt(document.getElementById("editISBN").value));
        item.set_item("AuthorName", user.get_id());
        item.set_item("PublicationDate", new Date(document.getElementById("editPubDate").value));
        
        item.update();
        
        ctx.executeQueryAsync(
          function() {
            alert("Book updated successfully!");
            $('#editBookModal').modal('hide');
            loadAvailableBooks();
          },
          function(sender, args) {
            alert("Error saving changes: " + args.get_message());
          }
        );
      },
      function(sender, args) {
        alert("Error finding user: " + args.get_message());
      }
    );
  }

  // Delete book
  function deleteBook() {
    if (confirm("Are you sure you want to delete this book?")) {
      const ctx = new SP.ClientContext.get_current();
      const list = ctx.get_web().get_lists().getByTitle("Book Management");
      const item = list.getItemById(currentBookId);
      
      item.deleteObject();
      
      ctx.executeQueryAsync(
        function() {
          alert("Book deleted successfully!");
          $('#moreOptionsModal').modal('hide');
          loadAvailableBooks();
        },
        function(sender, args) {
          alert("Error deleting book: " + args.get_message());
        }
      );
    }
  }

  // Issue book function (placeholder)
  function issueBook() {
    alert("Issuing book with ID: " + currentBookId);
    // Implement your issue book functionality here
    $('#bookDetailsModal').modal('hide');
  }

  // Search books function
  function searchBooks() {
    const searchTerm = document.getElementById("booksearch").value.trim();
    if (!searchTerm) {
      alert("Please enter a search term.");
      return;
    }

    const clientContext = new SP.ClientContext.get_current();
    const list = clientContext.get_web().get_lists().getByTitle("Book Management");
    const camlQuery = new SP.CamlQuery();
    
    camlQuery.set_viewXml(`
      <View>
        <Query>
          <Where>
            <Or>
              <Or>
                <Contains>
                  <FieldRef Name='BookName' />
                  <Value Type='Text'>${SP.Utilities.HttpUtility.htmlEncode(searchTerm)}</Value>
                </Contains>
                <Contains>
                  <FieldRef Name='AuthorName' Lookup='True' />
                  <Value Type='Text'>${SP.Utilities.HttpUtility.htmlEncode(searchTerm)}</Value>
                </Contains>
              </Or>
              <Eq>
                <FieldRef Name='ISBN' />
                <Value Type='Number'>${SP.Utilities.HttpUtility.htmlEncode(searchTerm)}</Value>
              </Eq>
            </Or>
          </Where>
        </Query>
      </View>
    `);

    const listItems = list.getItems(camlQuery);
    clientContext.load(listItems);
    clientContext.executeQueryAsync(
      function() {
        renderSearchResults(listItems);
      },
      function(sender, args) {
        alert("Search failed: " + args.get_message());
      }
    );
  }

  // Render search results
  function renderSearchResults(listItems) {
    const container = document.getElementById("searchResults");
    container.innerHTML = "";

    const enumerator = listItems.getEnumerator();
    if (!enumerator.moveNext()) {
      container.innerHTML = "<div class='col-12 alert alert-warning'>No books found matching your search.</div>";
      return;
    }

    enumerator.reset();
    while (enumerator.moveNext()) {
      const item = enumerator.get_current();
      container.innerHTML += generateBookCardHTML(item);
    }
  }

  // Load notifications
  function loadNotifications() {
    const ctx = new SP.ClientContext.get_current();
    const list = ctx.get_web().get_lists().getByTitle("Book Management");
    const query = new SP.CamlQuery();
    const today = new Date().toISOString().split('T')[0];

    query.set_viewXml(`
      <View>
        <Query>
          <Where>
            <Lt>
              <FieldRef Name='PublicationDate' />
              <Value Type='DateTime'>${today}</Value>
            </Lt>
          </Where>
        </Query>
      </View>
    `);

    const items = list.getItems(query);
    ctx.load(items);
    ctx.executeQueryAsync(
      function() {
        const listEnumerator = items.getEnumerator();
        notificationItems = [];

        while (listEnumerator.moveNext()) {
          const item = listEnumerator.get_current();
          const authorField = item.get_item("AuthorName");
          const authorId = authorField.get_lookupId();
          const user = ctx.get_web().getUserById(authorId);
          
          ctx.load(user);
          notificationItems.push({
            title: item.get_item("BookName"),
            date: new Date(item.get_item("PublicationDate")).toLocaleDateString(),
            author: user,
            isbn: item.get_item("ISBN")
          });
        }

        ctx.executeQueryAsync(
          function() {
            updateNotificationUI();
          },
          function(sender, args) {
            console.error("Error loading users:", args.get_message());
          }
        );
      },
      function(sender, args) {
        console.error("Error loading items:", args.get_message());
      }
    );
  }

  // Update notification UI
  function updateNotificationUI() {
    const notificationList = document.getElementById("notificationList");
    const countSpan = document.getElementById("notificationCount");

    notificationList.innerHTML = "";
    countSpan.textContent = notificationItems.length;

    const topItems = notificationItems.slice(0, 3);
    topItems.forEach(function(item) {
      const notificationHtml = `
        <li>
          <div class="notification-item px-3 py-2">
            <div class="d-flex justify-content-between">
              <strong class="text-truncate">${escapeHTML(item.title)}</strong>
              <small class="text-muted">${item.date}</small>
            </div>
            <div class="text-muted text-truncate">
              Author: ${escapeHTML(item.author.get_title())}
            </div>
            <small class="text-primary">ISBN: ${escapeHTML(item.isbn.toString())}</small>
          </div>
        </li>
        <li><hr class="dropdown-divider"></li>
      `;
      notificationList.innerHTML += notificationHtml;
    });
  }

  // Helper function for safe HTML rendering
  function escapeHTML(str) {
    if (!str) return "";
    return str.toString()
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  // Ensure SharePoint scripts are loaded
  ExecuteOrDelayUntilScriptLoaded(function() {
    SP.SOD.registerSod('sp.userprofiles.js', SP.SOD.executeFunc('sp.userprofiles.js', 'SP.Utilities.Utility', loadNotifications));
    SP.Utilities.Utility.getLayoutsPageUrl('sp.userprofiles.js');
  });

  SP.SOD.executeFunc('sp.js', 'SP.ClientContext', function() {
    // SharePoint context is ready
  });
</script>

<!-- Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>

<!-- SharePoint JSOM -->
<script type="text/javascript" src="/_layouts/15/SP.Runtime.js"></script>
<script type="text/javascript" src="/_layouts/15/SP.js"></script>
<script type="text/javascript" src="/_layouts/15/SP.UserProfiles.js"></script>

</body>
</html>
















/* Hide the Content Editor Web Part wrapper */
.ms-webpart-chrome-title,
.ms-webpart-chrome-vertical,
.ms-webpart-chrome-horizontal {
    display: none !important;
    height: 0 !important;
    margin: 0 !important;
    padding: 0 !important;
    border: none !important;
}

/* Optional: remove extra space where the web part was */
td.ms-WPBody, .ms-webpart-zone {
    padding: 0 !important;
    margin: 0 !important;
}




/* Reset body and html to allow layout and scroll */
html, body {
    margin: 0 !important;
    padding: 0 !important;
    width: 100%;
    height: 100%;
    overflow: hidden; /* prevent scrollbars here */
}

/* Main scrollable content area */
#customContentWrapper {
    width: 100%;
    height: 100vh;
    overflow-y: auto; /* enables vertical scroll */
    padding: 0;
    margin: 0;
}

/* Hide SharePoint UI elements */
#s4-ribbonrow,
#sideNavBox,
#suiteBarTop,
#titleAreaBox,
#DeltaPlaceHolderPageTitleInTitleArea,
#DeltaPlaceHolderPageDescription,
#SiteHeader,
#s4-titlerow,
#TurnOnAccessibility,
#globalNavBox,
.ms-cui-topBar2,
.ms-core-pageTitle,
.ms-core-commandBar,
.ms-core-navigation,
.ms-quicklaunch {
    display: none !important;
    height: 0 !important;
    overflow: hidden !important;
}

/* Prevent leftover spacing */
#s4-bodyContainer, #s4-workspace {
    padding: 0 !important;
    margin: 0 !important;
    top: 0 !important;
    height: 100vh !important;
}








/* Force full-screen layout */
html, body {
    margin: 0 !important;
    padding: 0 !important;
    width: 100%;
    height: 100%;
    overflow: hidden;
}

/* Override SharePoint content layout */
#s4-workspace, #s4-bodyContainer, #contentBox {
    margin: 0 !important;
    padding: 0 !important;
    width: 100% !important;
    height: 100% !important;
    position: relative !important;
    top: 0 !important;
}

/* Expand your content fully */
.container-fluid {
    width: 100% !important;
    height: 100% !important;
    margin: 0 !important;
    padding: 0 !important;
    overflow: auto;
}

/* Hide SharePoint chrome (no layout reserved) */
#s4-ribbonrow,
#sideNavBox,
#suiteBarTop,
#titleAreaBox,
#DeltaPlaceHolderPageTitleInTitleArea,
#DeltaPlaceHolderPageDescription,
#SiteHeader,
#s4-titlerow,
#TurnOnAccessibility,
#globalNavBox,
.ms-cui-topBar2,
.ms-core-pageTitle,
.ms-core-commandBar,
.ms-core-navigation,
.ms-quicklaunch {
    display: none !important;
    height: 0 !important;
    overflow: hidden !important;
}







<!DOCTYPE html>



<html>
<head>
    <title>Apply Publication Date Validation</title>
    <!-- Load SharePoint JSOM Scripts -->
    <script type="text/javascript" src="/_layouts/15/init.js"></script>
    <script type="text/javascript" src="/_layouts/15/MicrosoftAjax.js"></script>
    <script type="text/javascript" src="/_layouts/15/sp.runtime.js"></script>
    <script type="text/javascript" src="/_layouts/15/sp.js"></script>
</head>
<body>
    <h2>Apply Validation to Publication Date</h2>
    <button onclick="addValidationToPublicationDate()">Apply Validation</button>

    <script type="text/javascript">
        function addValidationToPublicationDate() {
            var clientContext = new SP.ClientContext.get_current();
            var web = clientContext.get_web();
            var list = web.get_lists().getByTitle("Book Management");

            var field = list.get_fields().getByInternalNameOrTitle("PublicationDate");

            field.set_validationFormula("[PublicationDate] <= TODAY()");
            field.set_validationMessage("Publication date cannot be a future date. Please select today or an earlier date.");

            field.update();
            clientContext.executeQueryAsync(
                function () {
                    alert("✅ Validation successfully applied to 'PublicationDate' column.");
                },
                function (sender, args) {
                    alert("❌ Error: " + args.get_message());
                }
            );
        }
    </script>
</body>
</html>







<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>All Notifications - Book Management</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        .notification-card {
            border-left: 4px solid #0d6efd;
            background-color: #f8f9fa;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container py-4">
        <h2 class="mb-4">All Overdue Book Notifications</h2>
        <div id="allNotifications"></div>
    </div>

    <!-- jQuery & Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- SharePoint JSOM Scripts -->
    <script type="text/javascript">
        function loadAllNotifications() {
            var ctx = SP.ClientContext.get_current();
            var list = ctx.get_web().get_lists().getByTitle("Book Management");
            var query = new SP.CamlQuery();
            var today = new Date().toISOString().split('T')[0];

            query.set_viewXml(`
                <View>
                    <Query>
                        <Where>
                            <Leq>
                                <FieldRef Name='PublicationDate' />
                                <Value Type='DateTime'>${today}</Value>
                            </Leq>
                        </Where>
                    </Query>
                </View>
            `);

            var items = list.getItems(query);
            ctx.load(items);
            ctx.executeQueryAsync(
                function() {
                    var html = "";
                    var enumerator = items.getEnumerator();
                    var count = 0;

                    function loadAuthorsRecursive() {
                        if (!enumerator.moveNext()) {
                            $('#allNotifications').html(html || "<p>No overdue notifications found.</p>");
                            return;
                        }

                        var item = enumerator.get_current();
                        var bookTitle = item.get_item("BookName");
                        var pubDate = new Date(item.get_item("PublicationDate")).toLocaleDateString();
                        var isbn = item.get_item("ISBN");
                        var author = item.get_item("AuthorName");
                        var authorId = author.get_lookupId();

                        var user = ctx.get_web().getUserById(authorId);
                        ctx.load(user);
                        ctx.executeQueryAsync(
                            function() {
                                count++;
                                html += `
                                    <div class="card mb-3 notification-card p-3 shadow-sm">
                                        <h5>${bookTitle}</h5>
                                        <p class="mb-1"><strong>Author:</strong> ${user.get_title()}</p>
                                        <p class="mb-1"><strong>Publication Date:</strong> ${pubDate}</p>
                                        <p class="mb-0"><strong>ISBN:</strong> ${isbn}</p>
                                    </div>
                                `;
                                loadAuthorsRecursive(); // continue recursively
                            },
                            function(sender, args) {
                                console.error("Failed to load user", args.get_message());
                                loadAuthorsRecursive(); // skip and continue
                            }
                        );
                    }

                    loadAuthorsRecursive();
                },
                function(sender, args) {
                    $('#allNotifications').html("<p>Error loading notifications: " + args.get_message() + "</p>");
                }
            );
        }

        ExecuteOrDelayUntilScriptLoaded(function() {
            SP.SOD.executeFunc('sp.js', 'SP.ClientContext', loadAllNotifications);
        }, 'sp.js');
    </script>
</body>
</html>







<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Book Management Dashboard</title>

  <!-- Bootstrap CSS & Font Awesome -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

  <style>
    .notification-dropdown {
      width: 350px;
      max-height: 500px;
      overflow-y: auto;
    }
    .notification-item:hover {
      background-color: #f8f9fa;
    }
    .navbar-custom {
      background-color: #f8f9fa;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .more-link {
      text-align: center;
      padding: 8px;
    }
  </style>
</head>
<body class="bg-light">
  <!-- Navigation Bar -->
  <nav class="navbar navbar-expand-lg navbar-custom fixed-top">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">Book Management</a>
      <div class="dropdown ms-auto">
        <button class="btn btn-link text-dark position-relative" 
                id="notificationDropdown" 
                data-bs-toggle="dropdown" 
                aria-expanded="false">
          <i class="fas fa-bell fa-lg"></i>
          <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="notificationCount">0</span>
        </button>

        <ul class="dropdown-menu dropdown-menu-end notification-dropdown" aria-labelledby="notificationDropdown">
          <li><h6 class="dropdown-header">Overdue Publications</h6></li>
          <li><hr class="dropdown-divider"></li>
          <div id="notificationList"></div>
          <div class="more-link">
            <a href="all-notifications.html" class="text-primary">View All Notifications</a>
          </div>
        </ul>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <div class="container-fluid" style="margin-top: 80px;">
    <div class="row">
      <div class="col-12">
        <div class="card shadow-sm">
          <div class="card-body">
            <h5 class="card-title">Book Management Dashboard</h5>
            <p class="text-muted">View and manage publication status</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

  <!-- SharePoint JSOM -->
  <script>
    var notificationItems = [];

    function loadNotifications() {
      var ctx = SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      var query = new SP.CamlQuery();
      var today = new Date().toISOString().split('T')[0];

      query.set_viewXml(
        `<View>
            <Query>
              <Where>
                <Leq>
                  <FieldRef Name='PublicationDate' />
                  <Value IncludeTimeValue='FALSE' Type='DateTime'>${today}</Value>
                </Leq>
              </Where>
            </Query>
          </View>`
      );

      var items = list.getItems(query);
      ctx.load(items);

      ctx.executeQueryAsync(
        function() {
          var listEnumerator = items.getEnumerator();
          notificationItems = [];

          var promises = [];

          while (listEnumerator.moveNext()) {
            var item = listEnumerator.get_current();
            var authorField = item.get_item("AuthorName");
            var authorId = authorField.get_lookupId();

            var user = ctx.get_web().getUserById(authorId);
            ctx.load(user);

            notificationItems.push({
              title: item.get_item("BookName"),
              dateRaw: new Date(item.get_item("PublicationDate")),
              date: new Date(item.get_item("PublicationDate")).toLocaleDateString(),
              author: user,
              isbn: item.get_item("ISBN")
            });
          }

          ctx.executeQueryAsync(
            function() {
              // Sort by newest first
              notificationItems.sort((a, b) => b.dateRaw - a.dateRaw);

              updateNotificationUI();
              sendEmailNotifications();
            },
            function(sender, args) {
              console.error("Error loading users:", args.get_message());
            }
          );
        },
        function(sender, args) {
          console.error("Error loading items:", args.get_message());
        }
      );
    }

    function updateNotificationUI() {
      var notificationList = $('#notificationList');
      var countSpan = $('#notificationCount');

      notificationList.empty();
      countSpan.text(notificationItems.length);

      var topItems = notificationItems.slice(0, 3);

      topItems.forEach(function(item) {
        var notificationHtml = `
          <li>
            <div class="notification-item px-3 py-2">
              <div class="d-flex justify-content-between">
                <strong class="text-truncate">${item.title}</strong>
                <small class="text-muted">${item.date}</small>
              </div>
              <div class="text-muted text-truncate">
                Author: ${item.author.get_title()}
              </div>
              <small class="text-primary">ISBN: ${item.isbn}</small>
            </div>
          </li>
          <li><hr class="dropdown-divider"></li>
        `;
        notificationList.append(notificationHtml);
      });
    }

    function sendEmailNotifications() {
      notificationItems.forEach(function(item) {
        var emailProps = {
          To: [item.author.get_email()],
          Subject: "Overdue Publication Notification",
          Body: `Dear ${item.author.get_title()},<br><br>
                 The book "<strong>${item.title}</strong>" (ISBN: ${item.isbn}) has passed its publication date.<br>
                 Publication Date: ${item.date}<br><br>
                 Please update the publication information if necessary.`
        };

        try {
          SP.Utilities.Utility.sendEmail(SP.ClientContext.get_current(), emailProps);
          SP.ClientContext.get_current().executeQueryAsync(
            function() {
              console.log("Email sent to:", item.author.get_email());
            },
            function(sender, args) {
              console.error("Failed to send email:", args.get_message());
            }
          );
        } catch (e) {
          console.error("Email API not supported in this environment.");
        }
      });
    }

    ExecuteOrDelayUntilScriptLoaded(function() {
      SP.SOD.executeFunc('sp.js', 'SP.ClientContext', function() {
        SP.SOD.registerSod('sp.userprofiles.js', SP.Utilities.Utility.getLayoutsPageUrl('sp.userprofiles.js'));
        SP.SOD.executeFunc('sp.userprofiles.js', 'SP.Utilities.Utility', loadNotifications);
      });
    }, 'sp.js');
  </script>
</body>
</html>








function sendEmailWithFallback(to, subject, body) {
    return new Promise(function(resolve, reject) {
        // First try the standard method
        if (typeof SP.Utilities.Utility !== 'undefined' && 
            typeof SP.Utilities.Utility.sendEmail === 'function') {
            
            var emailProperties = new SP.Utilities.EmailProperties();
            emailProperties.set_to(to);
            emailProperties.set_subject(subject);
            emailProperties.set_body(body);
            
            SP.Utilities.Utility.sendEmail(
                SP.ClientContext.get_current(), 
                emailProperties
            );
            
            SP.ClientContext.get_current().executeQueryAsync(
                function() { resolve(true); },
                function(sender, args) { reject(args.get_message()); }
            );
        } 
        // Fallback to REST API if JSOM fails
        else {
            sendEmailViaREST(to, subject, body)
                .then(resolve)
                .catch(reject);
        }
    });
}

// REST API fallback
function sendEmailViaREST(to, subject, body) {
    var endpoint = _spPageContextInfo.webAbsoluteUrl + 
                  "/_api/SP.Utilities.Utility.SendEmail";
    
    return $.ajax({
        url: endpoint,
        type: "POST",
        data: JSON.stringify({
            'properties': {
                '__metadata': { 'type': 'SP.Utilities.EmailProperties' },
                'To': { 'results': [to] },
                'Subject': subject,
                'Body': body
            }
        }),
        headers: {
            "Accept": "application/json;odata=verbose",
            "Content-Type": "application/json;odata=verbose",
            "X-RequestDigest": $("#__REQUESTDIGEST").val()
        }
    });
}








function sendEmailNotifications() {
    // Ensure SP utilities are loaded first
    SP.SOD.executeFunc('sp.js', 'SP.ClientContext', function() {
        SP.SOD.executeFunc('sp.js', 'SP.Utilities.Utility', function() {
            notificationItems.forEach(function(item) {
                try {
                    var emailProperties = new SP.Utilities.EmailProperties();
                    emailProperties.set_to(item.author.get_email());
                    emailProperties.set_subject("Overdue Publication Notification");
                    emailProperties.set_body(
                        `Dear ${item.author.get_title()},<br><br>
                        The book "${item.title}" (ISBN: ${item.isbn}) has passed its publication date.<br>
                        Publication Date: ${item.date}<br><br>
                        Please update the publication information if necessary.`
                    );

                    SP.Utilities.Utility.sendEmail(
                        SP.ClientContext.get_current(), 
                        emailProperties
                    );
                    
                    SP.ClientContext.get_current().executeQueryAsync(
                        function() {
                            console.log("Email sent to:", item.author.get_email());
                        },
                        function(sender, args) {
                            console.error("Failed to send email:", args.get_message());
                        }
                    );
                } catch (e) {
                    console.error("Email error:", e);
                }
            });
        });
    });
}




<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Book Management – Update & Delete</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

  <!-- SharePoint JSOM + People Picker -->
  <script src="/_layouts/15/sp.runtime.js" type="text/javascript"></script>
  <script src="/_layouts/15/sp.js" type="text/javascript"></script>
  <script src="/_layouts/15/clienttemplates.js" type="text/javascript"></script>
  <script src="/_layouts/15/clientforms.js" type="text/javascript"></script>
  <script src="/_layouts/15/clientpeoplepicker.js" type="text/javascript"></script>
  <script src="/_layouts/15/autofill.js" type="text/javascript"></script>
</head>
<body class="bg-light p-4">
  <div class="container">
    <h2 class="mb-4 text-center text-primary">Book Management</h2>

    <!-- table of books -->
    <div class="table-responsive mb-5">
      <table class="table table-bordered table-striped text-center" id="bookTable">
        <thead class="table-dark">
          <tr>
            <th>Actions</th>
            <th>Book Name</th>
            <th>Publication Date</th>
            <th>Author</th>
            <th>ISBN</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>

    <!-- update card -->
    <div class="card shadow">
      <div class="card-header bg-primary text-white">
        <h4 class="mb-0">Update Book Details</h4>
      </div>
      <div class="card-body">
        <div class="row g-3">
          <div class="col-md-6">
            <label class="form-label">Book Name</label>
            <input id="bookName" class="form-control" />
          </div>
          <div class="col-md-6">
            <label class="form-label">Publication Date</label>
            <input id="pubDate" type="date" class="form-control" />
          </div>
          <div class="col-md-6">
            <label class="form-label">Author (People Picker)</label>
            <div id="peoplePickerAuthor"></div>
          </div>
          <div class="col-md-6">
            <label class="form-label">ISBN</label>
            <input id="isbn" class="form-control" />
          </div>
        </div>
        <input type="hidden" id="itemId" />
        <div class="mt-4 text-end">
          <button class="btn btn-success" onclick="updateItem()">Update Book</button>
        </div>
      </div>
    </div>
  </div>

  <script type="text/javascript">
    // Initialize People Picker & then load items
    ExecuteOrDelayUntilScriptLoaded(function() {
      initPeoplePicker("peoplePickerAuthor");
      loadItems();
    }, "sp.js");

    function initPeoplePicker(domId) {
      var schema = {
        PrincipalAccountType: 'User,DL,SecGroup,SPGroup',
        SearchPrincipalSource: 15,
        ResolvePrincipalSource: 15,
        AllowMultipleValues: false,
        MaximumEntitySuggestions: 50,
        Width: '100%'
      };
      SPClientPeoplePicker_InitStandaloneControlWrapper(domId, null, schema);
    }

    function getSelectedUserKey() {
      var pp = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan;
      var users = pp.GetAllUserInfo();
      return (users.length>0)? users[0].Key : null;
    }

    function loadItems() {
      var ctx = SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      var items = list.getItems(new SP.CamlQuery());
      // include only the exact internal names
      ctx.load(items, 'Include(Id, BookName, Publication_x0020_date, AuthorName, ISBN)');
      ctx.executeQueryAsync(function() {
        var tbody = document.querySelector("#bookTable tbody");
        tbody.innerHTML = '';
        var enumItems = items.getEnumerator();
        while(enumItems.moveNext()) {
          var it = enumItems.get_current();
          var authorField = it.get_item("AuthorName");
          var authorText = authorField? authorField.get_lookupValue() : '';
          var dateVal = it.get_item("Publication_x0020_date");
          var dateStr = dateVal? new Date(dateVal).toISOString().split('T')[0] : '';
          tbody.innerHTML += `
            <tr>
              <td>
                <button class="btn btn-sm btn-outline-primary" onclick="editItem(${it.get_id()})">Select</button>
                <button class="btn btn-sm btn-outline-danger ms-2" onclick="deleteItem(${it.get_id()})">Delete</button>
              </td>
              <td>${it.get_item("BookName")||''}</td>
              <td>${dateStr}</td>
              <td>${authorText}</td>
              <td>${it.get_item("ISBN")||''}</td>
            </tr>`;
        }
      }, function(s,a){
        alert("Load failed: " + a.get_message());
      });
    }

    function editItem(id) {
      var ctx = SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      var it = list.getItemById(id);
      ctx.load(it, 'BookName, Publication_x0020_date, AuthorName, ISBN');
      ctx.executeQueryAsync(function(){
        document.getElementById("itemId").value = id;
        document.getElementById("bookName").value = it.get_item("BookName")||'';
        var d = it.get_item("Publication_x0020_date");
        document.getElementById("pubDate").value = d? new Date(d).toISOString().split('T')[0] : '';
        document.getElementById("isbn").value = it.get_item("ISBN")||'';
        // reset people picker
        document.getElementById("peoplePickerAuthor").innerHTML = '';
        initPeoplePicker("peoplePickerAuthor");
        setTimeout(function(){
          var auth = it.get_item("AuthorName");
          if(auth) {
            SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerAuthor_TopSpan.AddUserKeys(auth.get_lookupValue());
          }
        }, 500);
      }, function(s,a){
        alert("Edit load failed: "+a.get_message());
      });
    }

    function updateItem() {
      var id = document.getElementById("itemId").value;
      var name = document.getElementById("bookName").value.trim();
      var isbn = document.getElementById("isbn").value.trim();
      var date = document.getElementById("pubDate").value;
      var authKey = getSelectedUserKey();
      if(!id || !name || !isbn || !date || !authKey) {
        return alert("All fields including Author are required");
      }

      var ctx = SP.ClientContext.get_current();
      var web = ctx.get_web();
      var list = web.get_lists().getByTitle("Book Management");
      var it = list.getItemById(id);

      var user = web.ensureUser(authKey);
      ctx.load(user);
      ctx.executeQueryAsync(function(){
        var uv = SP.FieldUserValue.fromUser(user.get_loginName());
        it.set_item("BookName", name);
        it.set_item("Publication_x0020_date", new Date(date));
        it.set_item("ISBN", isbn);
        it.set_item("AuthorName", uv);
        it.update();
        ctx.executeQueryAsync(function(){
          alert("Book updated!");
          loadItems();
          // clear form
          document.getElementById("itemId").value='';
          document.getElementById("bookName").value='';
          document.getElementById("isbn").value='';
          document.getElementById("pubDate").value='';
          document.getElementById("peoplePickerAuthor").innerHTML='';
          initPeoplePicker("peoplePickerAuthor");
        }, function(s,a){
          alert("Update failed: "+a.get_message());
        });
      }, function(s,a){
        alert("Author lookup failed: "+a.get_message());
      });
    }

    function deleteItem(id) {
      if(!confirm("Delete this book?")) return;
      var ctx = SP.ClientContext.get_current();
      var list = ctx.get_web().get_lists().getByTitle("Book Management");
      list.getItemById(id).deleteObject();
      ctx.executeQueryAsync(function(){
        alert("Deleted.");
        loadItems();
      }, function(s,a){
        alert("Delete failed: "+a.get_message());
      });
    }
  </script>
</body>
</html>





<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Add Book Details</title>
  <!-- Bootstrap 5 CDN -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #495057;
    }
    .card {
      border-radius: 15px;
    }
    .form-label {
      color: #fff;
    }
  </style>
</head>
<body>

  <div class="container py-5">
    <div class="row justify-content-center">
      <div class="col-md-6">
        <div class="card shadow-lg p-4">
          <h4 class="text-center mb-4">Add Book Details</h4>
          <form>
            <div class="mb-3">
              <label for="bookName" class="form-label">Book Name</label>
              <input type="text" class="form-control" id="bookName" placeholder="Enter book name">
            </div>
            <div class="mb-3">
              <label for="authorName" class="form-label">Author Name</label>
              <input type="text" class="form-control" id="authorName" placeholder="Enter author name">
            </div>
            <div class="mb-3">
              <label for="isbn" class="form-label">ISBN</label>
              <input type="text" class="form-control" id="isbn" placeholder="Enter ISBN">
            </div>
            <div class="mb-3">
              <label for="publicationDate" class="form-label">Publication Date</label>
              <input type="date" class="form-control" id="publicationDate">
            </div>
            <button type="submit" class="btn btn-primary w-100">Add Book</button>
          </form>
        </div>
      </div>
    </div>
  </div>

</body>
</html>
